module.exports = {

"[project]/node_modules/@aps_sdk/oss/dist/esm/base.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ __turbopack_context__.s({
    "BaseApi": (()=>BaseApi),
    "COLLECTION_FORMATS": (()=>COLLECTION_FORMATS),
    "OssApiError": (()=>OssApiError),
    "RequiredError": (()=>RequiredError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$axios$2f$lib$2f$axios$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/axios/lib/axios.js [app-route] (ecmascript)");
;
const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|"
};
class BaseApi {
    constructor(sdkManager, axios = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$axios$2f$lib$2f$axios$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"]){
        this.axios = axios;
        if (sdkManager) {
            this.sdkManager = sdkManager;
        }
    }
}
;
class RequiredError extends Error {
    constructor(field, msg){
        super(msg);
        this.field = field;
        this.name = "RequiredError";
    }
}
class OssApiError extends Error {
    constructor(message, axiosError){
        super(message);
        if (axiosError) {
            this.axiosError = axiosError;
        }
        Object.setPrototypeOf(this, OssApiError.prototype);
    }
    httpStatusCode() {
        var _a, _b;
        return (_b = (_a = this.axiosError) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.status;
    }
}
}}),
"[project]/node_modules/@aps_sdk/oss/dist/esm/common.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ __turbopack_context__.s({
    "assertParamExists": (()=>assertParamExists),
    "createRequestFunction": (()=>createRequestFunction),
    "createRequestFunctionOss": (()=>createRequestFunctionOss),
    "serializeDataIfNeeded": (()=>serializeDataIfNeeded),
    "setBearerAuthToObject": (()=>setBearerAuthToObject),
    "setSearchParams": (()=>setSearchParams),
    "toPathString": (()=>toPathString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/base.js [app-route] (ecmascript)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
;
const assertParamExists = function(functionName, paramName, paramValue) {
    if (paramValue === null || paramValue === undefined) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RequiredError"](paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
};
const setBearerAuthToObject = function(object, accessToken) {
    return __awaiter(this, void 0, void 0, function*() {
        object["Authorization"] = "Bearer " + accessToken;
    });
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            parameter.forEach((item)=>setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach((currentKey)=>setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`));
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}
const setSearchParams = function(url, ...objects) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
};
const serializeDataIfNeeded = function(value, requestOptions, apsConfiguration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && apsConfiguration && isJsonMime ? isJsonMime(requestOptions.headers['Content-Type']) : nonString;
    return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || "";
};
/**
* Check if the given MIME is a JSON MIME.
* JSON MIME examples:
*   application/json
*   application/json; charset=UTF8
*   APPLICATION/JSON
*   application/vnd.company+json
* @param mime - MIME (Multipurpose Internet Mail Extensions)
* @return True if the given MIME is JSON, false otherwise.
*/ function isJsonMime(mime) {
    const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
}
const toPathString = function(url) {
    return url.pathname + url.search + url.hash;
};
const createRequestFunction = function(axiosArgs, sdkManager) {
    return ()=>{
        var _a, _b;
        const config = Object.assign(Object.assign({}, axiosArgs.options), {
            url: ((_a = sdkManager.apsConfiguration) === null || _a === void 0 ? void 0 : _a.baseAddress) + axiosArgs.url
        });
        return (_b = sdkManager === null || sdkManager === void 0 ? void 0 : sdkManager.apsClient) === null || _b === void 0 ? void 0 : _b.apsService.request(config);
    };
};
const createRequestFunctionOss = function(axiosArgs, sdkManager) {
    return ()=>{
        var _a;
        const config = Object.assign(Object.assign({}, axiosArgs.options), {
            url: axiosArgs.url
        });
        return (_a = sdkManager === null || sdkManager === void 0 ? void 0 : sdkManager.apsClient) === null || _a === void 0 ? void 0 : _a.apsService.request(config);
    };
};
}}),
"[project]/node_modules/@aps_sdk/oss/dist/esm/api/objectsApi.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ __turbopack_context__.s({
    "ObjectsApi": (()=>ObjectsApi),
    "ObjectsApiAxiosParamCreator": (()=>ObjectsApiAxiosParamCreator),
    "ObjectsApiFp": (()=>ObjectsApiFp)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/common.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/base.js [app-route] (ecmascript)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
;
;
;
const ObjectsApiAxiosParamCreator = function(apsConfiguration) {
    return {
        /**
         * Requests OSS to start reconstituting the set of objects that were uploaded using signed S3 upload URLs. You must call this operation only after all the objects have been uploaded.   You can specify up to 25 objects in this operation.
         * @summary Complete Batch Upload to S3 Signed URLs
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {BatchcompleteuploadObject} [requests] An array of objects, each of which represents an upload to complete.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ batchCompleteUpload: (accessToken_1, bucketKey_1, requests_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                requests_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, requests, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('batchCompleteUpload', 'bucketKey', bucketKey);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects/batchcompleteupload`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'POST'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["serializeDataIfNeeded"])(requests, localVarRequestOptions, apsConfiguration);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Creates and returns signed URLs to download a set of objects directly from S3. These signed URLs expire in 2 minutes by default, but you can change this duration if needed.  You must start download the objects before the signed URLs expire. The download itself can take longer.  Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
         * @summary Batch Generate Signed S3 Download URLs
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {Batchsigneds3downloadObject} requests An array of objects representing each request for a signed download URL.
         * @param {boolean} [publicResourceFallback] Specifies how to return the signed URLs, in case the object was uploaded in chunks, and assembling of chunks is not yet complete.  - &#x60;&#x60;true&#x60;&#x60; : Return a single signed OSS URL. - &#x60;&#x60;false&#x60;&#x60; : (Default) Return multiple signed S3 URLs, where each URL points to a chunk.
         * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ batchSignedS3Download: (accessToken_1, bucketKey_1, requests_1, publicResourceFallback_1, minutesExpiration_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                requests_1,
                publicResourceFallback_1,
                minutesExpiration_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, requests, publicResourceFallback, minutesExpiration, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('batchSignedS3Download', 'bucketKey', bucketKey);
                // verify required parameter 'requests' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('batchSignedS3Download', 'requests', requests);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects/batchsigneds3download`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'POST'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (publicResourceFallback !== undefined) {
                    localVarQueryParameter['public-resource-fallback'] = publicResourceFallback;
                }
                if (minutesExpiration !== undefined) {
                    localVarQueryParameter['minutesExpiration'] = minutesExpiration;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["serializeDataIfNeeded"])(requests, localVarRequestOptions, apsConfiguration);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Creates and returns signed URLs to upload a set of objects directly to S3. These signed URLs expire in 2 minutes by default, but you can change this duration if needed.  You must start uploading the objects before the signed URLs expire. The upload  itself can take longer.  Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.  If required, you can request an array of signed URLs for each object, which lets you upload the objects in chunks. Once you upload all chunks you must call the [Complete Batch Upload to S3 Signed URL](/en/docs/data/v2/reference/http/buckets-:bucketKey-objects-:objectKey-batchcompleteupload-POST/) operation to indicate completion. This instructs OSS to assemble the chunks and reconstitute the object on OSS. You must call this operation even if you requested a single signed URL for an object.  If an upload fails after the validity period of a signed URL has elapsed, you can call this operation again to obtain fresh signed URLs. However, you must use the same ``uploadKey`` that was returned when you originally called this operation.
         * @summary Batch Generate Signed S3 Upload URLs
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {boolean} [useAcceleration] &#x60;&#x60;true&#x60;&#x60; : (Default) Generates a faster S3 signed URL using Transfer Acceleration.  &#x60;&#x60;false&#x60;&#x60;: Generates a standard S3 signed URL.
         * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
         * @param {Batchsigneds3uploadObject} [requests] An array of objects representing each request for a signed upload URL.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ batchSignedS3Upload: (accessToken_1, bucketKey_1, useAcceleration_1, minutesExpiration_1, requests_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                useAcceleration_1,
                minutesExpiration_1,
                requests_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, useAcceleration, minutesExpiration, requests, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('batchSignedS3Upload', 'bucketKey', bucketKey);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects/batchsigneds3upload`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'POST'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (useAcceleration !== undefined) {
                    localVarQueryParameter['useAcceleration'] = useAcceleration;
                }
                if (minutesExpiration !== undefined) {
                    localVarQueryParameter['minutesExpiration'] = minutesExpiration;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["serializeDataIfNeeded"])(requests, localVarRequestOptions, apsConfiguration);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Requests OSS to assemble and reconstitute the object that was uploaded using signed S3 upload URL. You must call this operation only after all parts/chunks of the object has been uploaded.
         * @summary Complete Upload to S3 Signed URL
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} contentType Must be &#x60;&#x60;application/json&#x60;&#x60;.
         * @param {Completes3uploadBody} body
         * @param {string} [xAdsMetaContentType] The Content-Type value for the uploaded object to record within OSS.
         * @param {string} [xAdsMetaContentDisposition] The Content-Disposition value for the uploaded object to record within OSS.
         * @param {string} [xAdsMetaContentEncoding] The Content-Encoding value for the uploaded object to record within OSS.
         * @param {string} [xAdsMetaCacheControl] The Cache-Control value for the uploaded object to record within OSS.
         * @param {string} [xAdsUserDefinedMetadata] Custom metadata to be stored with the object, which can be retrieved later on download or when retrieving object details. Must be a JSON object that is less than 100 bytes.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ completeSignedS3Upload: (accessToken_1, bucketKey_1, objectKey_1, contentType_1, body_1, xAdsMetaContentType_1, xAdsMetaContentDisposition_1, xAdsMetaContentEncoding_1, xAdsMetaCacheControl_1, xAdsUserDefinedMetadata_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                objectKey_1,
                contentType_1,
                body_1,
                xAdsMetaContentType_1,
                xAdsMetaContentDisposition_1,
                xAdsMetaContentEncoding_1,
                xAdsMetaCacheControl_1,
                xAdsUserDefinedMetadata_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, objectKey, contentType, body, xAdsMetaContentType, xAdsMetaContentDisposition, xAdsMetaContentEncoding, xAdsMetaCacheControl, xAdsUserDefinedMetadata, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('completeSignedS3Upload', 'bucketKey', bucketKey);
                // verify required parameter 'objectKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('completeSignedS3Upload', 'objectKey', objectKey);
                // verify required parameter 'contentType' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('completeSignedS3Upload', 'contentType', contentType);
                // verify required parameter 'body' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('completeSignedS3Upload', 'body', body);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects/{objectKey}/signeds3upload`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey))).replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'POST'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (contentType != null) {
                    localVarHeaderParameter['Content-Type'] = String(contentType);
                }
                if (xAdsMetaContentType != null) {
                    localVarHeaderParameter['x-ads-meta-Content-Type'] = String(xAdsMetaContentType);
                }
                if (xAdsMetaContentDisposition != null) {
                    localVarHeaderParameter['x-ads-meta-Content-Disposition'] = String(xAdsMetaContentDisposition);
                }
                if (xAdsMetaContentEncoding != null) {
                    localVarHeaderParameter['x-ads-meta-Content-Encoding'] = String(xAdsMetaContentEncoding);
                }
                if (xAdsMetaCacheControl != null) {
                    localVarHeaderParameter['x-ads-meta-Cache-Control'] = String(xAdsMetaCacheControl);
                }
                if (xAdsUserDefinedMetadata != null) {
                    localVarHeaderParameter['x-ads-user-defined-metadata'] = String(xAdsUserDefinedMetadata);
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["serializeDataIfNeeded"])(body, localVarRequestOptions, apsConfiguration);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Creates a copy of an object within the bucket.
         * @summary Copy Object
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} newObjName A URL-encoded human friendly name to identify the copied object.
         * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
         * @param {string} [xAdsAcmCheckGroups] Informs the OSS Api Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of &#x60;&#x60;true&#x60;&#x60;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
         * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ copyTo: (accessToken_1, bucketKey_1, objectKey_1, newObjName_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                objectKey_1,
                newObjName_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, objectKey, newObjName, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('copyTo', 'bucketKey', bucketKey);
                // verify required parameter 'objectKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('copyTo', 'objectKey', objectKey);
                // verify required parameter 'newObjName' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('copyTo', 'newObjName', newObjName);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects/{objectKey}/copyto/{newObjName}`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey))).replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey))).replace(`{${"newObjName"}}`, encodeURIComponent(String(newObjName)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'PUT'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Generates a signed URL that can be used to download or upload an object within the specified expiration time. If the object the signed URL points to is deleted or expires before the signed URL expires, the signed URL will no longer be valid.  In addition to this operation that generates OSS signed URLs, OSS provides operations to generate S3 signed URLs. S3 signed URLs allow direct upload/download from S3 but are restricted to bucket owners. OSS signed URLs also allow upload/download and can be configured for access by other applications, making them suitable for sharing objects across applications.  Only the application that owns the bucket containing the object can call this operation.
         * @summary Generate OSS Signed URL
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {Access} [access]
         * @param {boolean} [useCdn] &#x60;&#x60;true&#x60;&#x60; : Returns a Cloudfront URL to the object instead of an Autodesk URL (one that points to a location on https://developer.api.autodesk.com). Applications can interact with the Cloudfront URL exactly like with any classic public resource in OSS. They can use GET requests to download objects or PUT requests to upload objects.  &#x60;&#x60;false&#x60;&#x60; : (Default) Returns an Autodesk URL (one that points to a location on https://developer.api.autodesk.com) to the object.
         * @param {CreateSignedResource} [createSignedResource]
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ createSignedResource: (accessToken_1, bucketKey_1, objectKey_1, access_1, useCdn_1, createSignedResource_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                objectKey_1,
                access_1,
                useCdn_1,
                createSignedResource_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, objectKey, access, useCdn, createSignedResource, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('createSignedResource', 'bucketKey', bucketKey);
                // verify required parameter 'objectKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('createSignedResource', 'objectKey', objectKey);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects/{objectKey}/signed`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey))).replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'POST'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (access !== undefined) {
                    localVarQueryParameter['access'] = access;
                }
                if (useCdn !== undefined) {
                    localVarQueryParameter['useCdn'] = useCdn;
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["serializeDataIfNeeded"])(createSignedResource, localVarRequestOptions, apsConfiguration);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Deletes an object from the bucket.
         * @summary Delete Object
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
         * @param {string} [xAdsAcmCheckGroups] Informs the OSS API Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of &#x60;&#x60;true&#x60;&#x60;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
         * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ deleteObject: (accessToken_1, bucketKey_1, objectKey_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                objectKey_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, objectKey, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('deleteObject', 'bucketKey', bucketKey);
                // verify required parameter 'objectKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('deleteObject', 'objectKey', objectKey);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects/{objectKey}`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey))).replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'DELETE'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Delete an object using an OSS signed URL to access it.  Only applications that own the bucket containing the object can call this operation.
         * @summary Delete Object Using Signed URL
         * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
         * @param {Region} [xAdsRegion] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ deleteSignedResource: (accessToken_1, hash_1, xAdsRegion_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                hash_1,
                xAdsRegion_1,
                ...args_1
            ], void 0, function*(accessToken, hash, xAdsRegion, options = {}) {
                // verify required parameter 'hash' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('deleteSignedResource', 'hash', hash);
                const localVarPath = `/oss/v2/signedresources/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'DELETE'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (xAdsRegion != null) {
                    localVarHeaderParameter['x-ads-region'] = typeof xAdsRegion === 'string' ? xAdsRegion : JSON.stringify(xAdsRegion);
                }
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Returns detailed information about the specified object.
         * @summary Get Object Details
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} [ifModifiedSince] A timestamp in the HTTP date format (Mon, DD Month YYYY HH:MM:SS GMT). The requested data is returned only if the object has been modified since the specified timestamp. If not, a 304 (Not Modified) HTTP status is returned.
         * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
         * @param {string} [xAdsAcmCheckGroups] Informs the OSS Api Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of &#x60;&#x60;true&#x60;&#x60;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
         * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
         * @param {With} [_with]
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getObjectDetails: (accessToken_1, bucketKey_1, objectKey_1, ifModifiedSince_1, _with_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                objectKey_1,
                ifModifiedSince_1,
                _with_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, objectKey, ifModifiedSince, _with, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('getObjectDetails', 'bucketKey', bucketKey);
                // verify required parameter 'objectKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('getObjectDetails', 'objectKey', objectKey);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects/{objectKey}/details`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey))).replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'GET'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (_with !== undefined) {
                    localVarQueryParameter['with'] = _with;
                }
                if (ifModifiedSince != null) {
                    localVarHeaderParameter['If-Modified-Since'] = typeof ifModifiedSince === 'string' ? ifModifiedSince : JSON.stringify(ifModifiedSince);
                }
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Returns a list objects in the specified bucket.   Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
         * @summary List Objects
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {number} [limit] The number of items you want per page. Acceptable values &#x3D; 1-100. Default &#x3D; 10.
         * @param {string} [beginsWith] Filters the results by the value you specify. Only the objects with their &#x60;&#x60;objectKey&#x60;&#x60; beginning with the specified string are returned.
         * @param {string} [startAt] The ID of the last item that was returned in the previous result set.  It enables the system to return subsequent items starting from the next one after the specified ID.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getObjects: (accessToken_1, bucketKey_1, limit_1, beginsWith_1, startAt_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                limit_1,
                beginsWith_1,
                startAt_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, limit, beginsWith, startAt, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('getObjects', 'bucketKey', bucketKey);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'GET'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (limit !== undefined) {
                    localVarQueryParameter['limit'] = limit;
                }
                if (beginsWith !== undefined) {
                    localVarQueryParameter['beginsWith'] = beginsWith;
                }
                if (startAt !== undefined) {
                    localVarQueryParameter['startAt'] = startAt;
                }
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Downloads an object using an OSS signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/)  contains the ``hash`` URI parameter as well.
         * @summary Download Object Using Signed URL
         * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
         * @param {string} [range] The byte range to download, specified in the form &#x60;&#x60;bytes&#x3D;&lt;START_BYTE&gt;-&lt;END_BYTE&gt;&#x60;&#x60;.
         * @param {string} [ifNoneMatch] The last known ETag value of the object. OSS returns the requested data  only if the &#x60;&#x60;If-None-Match&#x60;&#x60; header differs from the ETag value of the object on OSS, which indicates that the object on OSS is newer. If not, it returns a 304 \&quot;Not Modified\&quot; HTTP status.
         * @param {string} [ifModifiedSince] A timestamp in the HTTP date format (Mon, DD Month YYYY HH:MM:SS GMT). The requested data is returned only if the object has been modified since the specified timestamp. If not, a 304 (Not Modified) HTTP status is returned.
         * @param {string} [acceptEncoding] The compression format your prefer to receive the data. Possible values are:  - &#x60;&#x60;gzip&#x60;&#x60; - Use the gzip format  **Note:** You cannot use &#x60;&#x60;Accept-Encoding:gzip&#x60;&#x60; with a Range header containing an end byte range. OSS will not honor the End byte range if &#x60;&#x60;Accept-Encoding: gzip&#x60;&#x60; header is used.
         * @param {Region} [region] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {string} [responseContentDisposition] The value of the Content-Disposition header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Disposition header defaults to the value stored with OSS.
         * @param {string} [responseContentType] The value of the Content-Type header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Type header defaults to the value stored with OSS.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getSignedResource: (accessToken_1, hash_1, range_1, ifNoneMatch_1, ifModifiedSince_1, acceptEncoding_1, region_1, responseContentDisposition_1, responseContentType_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                hash_1,
                range_1,
                ifNoneMatch_1,
                ifModifiedSince_1,
                acceptEncoding_1,
                region_1,
                responseContentDisposition_1,
                responseContentType_1,
                ...args_1
            ], void 0, function*(accessToken, hash, range, ifNoneMatch, ifModifiedSince, acceptEncoding, region, responseContentDisposition, responseContentType, options = {}) {
                // verify required parameter 'hash' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('getSignedResource', 'hash', hash);
                const localVarPath = `/oss/v2/signedresources/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'GET'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (region !== undefined) {
                    localVarQueryParameter['region'] = region;
                }
                if (responseContentDisposition !== undefined) {
                    localVarQueryParameter['response-content-disposition'] = responseContentDisposition;
                }
                if (responseContentType !== undefined) {
                    localVarQueryParameter['response-content-type'] = responseContentType;
                }
                if (range != null) {
                    localVarHeaderParameter['Range'] = String(range);
                }
                if (ifNoneMatch != null) {
                    localVarHeaderParameter['If-None-Match'] = String(ifNoneMatch);
                }
                if (ifModifiedSince != null) {
                    localVarHeaderParameter['If-Modified-Since'] = typeof ifModifiedSince === 'string' ? ifModifiedSince : JSON.stringify(ifModifiedSince);
                }
                if (acceptEncoding != null) {
                    localVarHeaderParameter['Accept-Encoding'] = String(acceptEncoding);
                }
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Gets a signed URL to download an object directly from S3, bypassing OSS servers. This signed URL expires in 2 minutes by default, but you can change this duration if needed.  You must start the download before the signed URL expires. The download itself can take longer. If the download fails after the validity period of the signed URL has elapsed, you can call this operation again to obtain a fresh signed URL.  Only applications that have read access to the object can call this operation.     You can use range headers with the signed download URL to download the object in chunks. This ability lets you download chunks in parallel, which can result in faster downloads.  If the object you want to download was uploaded in chunks and is still assembling on OSS, you will receive multiple S3 URLs instead of just one. Each URL will point to a chunk. If you prefer to receive a single URL, set the ``public-resource-fallback`` query parameter to ``true``. This setting will make OSS fallback to returning a single signed OSS URL, if assembling is still in progress.   In addition to this operation that generates S3 signed URLs, OSS provides an operation to generate OSS signed URLs. S3 signed URLs allow direct upload/download from S3 but are restricted to bucket owners. OSS signed URLs also allow upload/download and can be configured for access by other applications, making them suitable for sharing objects across applications.
         * @summary Generate Signed S3 Download URL
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} [ifNoneMatch] The last known ETag value of the object. OSS returns the signed URL only if the &#x60;&#x60;If-None-Match&#x60;&#x60; header differs from the ETag value of the object on S3. If not, it returns a 304 \&quot;Not Modified\&quot; HTTP status.
         * @param {string} [ifModifiedSince] A timestamp in the HTTP date format (Mon, DD Month YYYY HH:MM:SS GMT). The signed URL is returned only if the object has been modified since the specified timestamp. If not, a 304 (Not Modified) HTTP status is returned.
         * @param {string} [xAdsAcmScopes] Optional OSS-compliant scope reference to increase bucket search performance
         * @param {string} [responseContentType] The value of the Content-Type header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Type header defaults to the value stored with OSS.
         * @param {string} [responseContentDisposition] The value of the Content-Disposition header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Disposition header defaults to the value stored with OSS.
         * @param {string} [responseCacheControl] The value of the Cache-Control header you want to receive when you download the object using the signed URL. If you do not specify a value, the Cache-Control header defaults to the value stored with OSS.
         * @param {boolean} [publicResourceFallback] Specifies how to return the signed URLs, in case the object was uploaded in chunks, and assembling of chunks is not yet complete.  - &#x60;&#x60;true&#x60;&#x60; : Return a single signed OSS URL. - &#x60;&#x60;false&#x60;&#x60; : (Default) Return multiple signed S3 URLs, where each URL points to a chunk.
         * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
         * @param {boolean} [useCdn] &#x60;&#x60;true&#x60;&#x60; : Returns a URL that points to a CloudFront edge location.  &#x60;&#x60;false&#x60;&#x60; : (Default) Returns a URL that points directly to the S3 object.
         * @param {boolean} [redirect] Generates a HTTP redirection response (Temporary Redirect 307​) using the generated URL.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ signedS3Download: (accessToken_1, bucketKey_1, objectKey_1, ifNoneMatch_1, ifModifiedSince_1, responseContentType_1, responseContentDisposition_1, responseCacheControl_1, publicResourceFallback_1, minutesExpiration_1, useCdn_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                objectKey_1,
                ifNoneMatch_1,
                ifModifiedSince_1,
                responseContentType_1,
                responseContentDisposition_1,
                responseCacheControl_1,
                publicResourceFallback_1,
                minutesExpiration_1,
                useCdn_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, objectKey, ifNoneMatch, ifModifiedSince, responseContentType, responseContentDisposition, responseCacheControl, publicResourceFallback, minutesExpiration, useCdn, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('signedS3Download', 'bucketKey', bucketKey);
                // verify required parameter 'objectKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('signedS3Download', 'objectKey', objectKey);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects/{objectKey}/signeds3download`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey))).replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'GET'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (responseContentType !== undefined) {
                    localVarQueryParameter['response-content-type'] = responseContentType;
                }
                if (responseContentDisposition !== undefined) {
                    localVarQueryParameter['response-content-disposition'] = responseContentDisposition;
                }
                if (responseCacheControl !== undefined) {
                    localVarQueryParameter['response-cache-control'] = responseCacheControl;
                }
                if (publicResourceFallback !== undefined) {
                    localVarQueryParameter['public-resource-fallback'] = publicResourceFallback;
                }
                if (minutesExpiration !== undefined) {
                    localVarQueryParameter['minutesExpiration'] = minutesExpiration;
                }
                if (useCdn !== undefined) {
                    localVarQueryParameter['useCdn'] = useCdn;
                }
                if (ifNoneMatch != null) {
                    localVarHeaderParameter['If-None-Match'] = String(ifNoneMatch);
                }
                if (ifModifiedSince != null) {
                    localVarHeaderParameter['If-Modified-Since'] = typeof ifModifiedSince === 'string' ? ifModifiedSince : JSON.stringify(ifModifiedSince);
                }
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Gets a signed URL to upload an object directly to S3, bypassing OSS servers. You can also request an array of signed URLs which lets you upload an object in chunks.  This signed URL expires in 2 minutes by default, but you can change this duration if needed.  You must start the upload before the signed URL expires. The upload itself can take longer. If the upload fails after the validity period of the signed URL has elapsed, you can call this operation again to obtain a fresh signed URL (or an array of signed URLs as the case may be). However, you must use the same ``uploadKey`` that was returned when you originally called this operation.   Only applications that own the bucket can call this operation.  **Note:** Once you upload all chunks you must call the [Complete Upload to S3 Signed URL](/en/docs/data/v2/reference/http/buckets-:bucketKey-objects-:objectKey-signeds3upload-POST/) operation to indicate completion. This instructs OSS to assemble the chunks and reconstitute the object on OSS. You must call this operation even when using a single signed URL.   In addition to this operation that generates S3 signed URLs, OSS provides an operation to generate OSS signed URLs. S3 signed URLs allow direct upload/download from S3 but are restricted to bucket owners. OSS signed URLs also allow upload/download and can be configured for access by other applications, making them suitable for sharing objects across applications.
         * @summary Generate Signed S3 Upload URL
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} [xAdsAcmScopes] Optional OSS-compliant scope reference to increase bucket search performance
         * @param {number} [parts] The number of parts you intend to chunk the object for uploading. OSS will return that many signed URLs, one URL for each chunk. If you do not specify a value you\&#39;ll get only one URL to upload the entire object.
         * @param {number} [firstPart] The index of the first chunk to be uploaded.
         * @param {string} [uploadKey] The &#x60;&#x60;uploadKey&#x60;&#x60; of a previously-initiated upload, in order to request more chunk upload URLs for the same upload. If you do not specify a value, OSS will initiate a new upload entirely.
         * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
         * @param {boolean} [useAcceleration] &#x60;&#x60;true&#x60;&#x60; : (Default) Generates a faster S3 signed URL using Transfer Acceleration.  &#x60;&#x60;false&#x60;&#x60;: Generates a standard S3 signed URL.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ signedS3Upload: (accessToken_1, bucketKey_1, objectKey_1, parts_1, firstPart_1, uploadKey_1, minutesExpiration_1, useAcceleration_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                objectKey_1,
                parts_1,
                firstPart_1,
                uploadKey_1,
                minutesExpiration_1,
                useAcceleration_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, objectKey, parts, firstPart, uploadKey, minutesExpiration, useAcceleration, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('signedS3Upload', 'bucketKey', bucketKey);
                // verify required parameter 'objectKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('signedS3Upload', 'objectKey', objectKey);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/objects/{objectKey}/signeds3upload`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey))).replace(`{${"objectKey"}}`, encodeURIComponent(String(objectKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'GET'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (parts !== undefined) {
                    localVarQueryParameter['parts'] = parts;
                }
                if (firstPart !== undefined) {
                    localVarQueryParameter['firstPart'] = firstPart;
                }
                if (uploadKey !== undefined) {
                    localVarQueryParameter['uploadKey'] = uploadKey;
                }
                if (minutesExpiration !== undefined) {
                    localVarQueryParameter['minutesExpiration'] = minutesExpiration;
                }
                if (useAcceleration !== undefined) {
                    localVarQueryParameter['useAcceleration'] = useAcceleration;
                }
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Replaces an object that already exists on OSS, using an OSS signed URL.   The signed URL must fulfil the following conditions:  - The signed URL is valid (it has not expired as yet). - It was generated with ``write`` or ``readwrite`` for the ``access`` parameter.
         * @summary Replace Object Using Signed URL
         * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
         * @param {number} contentLength The size of the data contained in the request body, in bytes.
         * @param {File} body The object to upload.
         * @param {string} [contentType] The MIME type of the object to upload; can be any type except \&#39;multipart/form-data\&#39;. This can be omitted, but we recommend adding it.
         * @param {string} [contentDisposition] The suggested file name to use when this object is downloaded as a file.
         * @param {Region} [xAdsRegion] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {string} [ifMatch] The current value of the &#x60;&#x60;sha1&#x60;&#x60; attribute of the object you want to replace. OSS checks the &#x60;&#x60;If-Match&#x60;&#x60; header against the &#x60;&#x60;sha1&#x60;&#x60; attribute of the object in OSS. If they match, OSS allows the object to be overwritten. Otherwise, it means that the object on OSS has been modified since you retrieved the &#x60;&#x60;sha1&#x60;&#x60; and the request fails.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ uploadSignedResource: (accessToken_1, hash_1, contentLength_1, body_1, contentType_1, contentDisposition_1, xAdsRegion_1, ifMatch_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                hash_1,
                contentLength_1,
                body_1,
                contentType_1,
                contentDisposition_1,
                xAdsRegion_1,
                ifMatch_1,
                ...args_1
            ], void 0, function*(accessToken, hash, contentLength, body, contentType, contentDisposition, xAdsRegion, ifMatch, options = {}) {
                // verify required parameter 'hash' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('uploadSignedResource', 'hash', hash);
                // verify required parameter 'contentLength' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('uploadSignedResource', 'contentLength', contentLength);
                // verify required parameter 'body' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('uploadSignedResource', 'body', body);
                const localVarPath = `/oss/v2/signedresources/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'PUT'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                const localVarFormParams = new URLSearchParams();
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (contentType != null) {
                    localVarHeaderParameter['Content-Type'] = String(contentType);
                }
                if (contentLength != null) {
                    localVarHeaderParameter['Content-Length'] = typeof contentLength === 'string' ? contentLength : JSON.stringify(contentLength);
                }
                if (contentDisposition != null) {
                    localVarHeaderParameter['Content-Disposition'] = String(contentDisposition);
                }
                if (xAdsRegion != null) {
                    localVarHeaderParameter['x-ads-region'] = typeof xAdsRegion === 'string' ? xAdsRegion : JSON.stringify(xAdsRegion);
                }
                if (ifMatch != null) {
                    localVarHeaderParameter['If-Match'] = String(ifMatch);
                }
                if (body !== undefined) {
                    localVarFormParams.set('body', body);
                }
                localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = localVarFormParams.toString();
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Performs a resumable upload using an OSS signed URL. Use this operation to upload an object in chunks.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains the ``hash`` as a URI parameter.
         * @summary Upload Object Using Signed URL
         * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
         * @param {string} contentRange The byte range to upload, specified in the form &#x60;&#x60;bytes&#x3D;&lt;START_BYTE&gt;-&lt;END_BYTE&gt;&#x60;&#x60;.
         * @param {string} sessionId An ID to uniquely identify the file upload session.
         * @param {File} body The chunk to upload.
         * @param {string} [contentType] The MIME type of the object to upload; can be any type except \&#39;multipart/form-data\&#39;. This can be omitted, but we recommend adding it.
         * @param {string} [contentDisposition] The suggested file name to use when this object is downloaded as a file.
         * @param {Region} [xAdsRegion] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ uploadSignedResourcesChunk: (accessToken_1, hash_1, contentRange_1, sessionId_1, body_1, contentType_1, contentDisposition_1, xAdsRegion_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                hash_1,
                contentRange_1,
                sessionId_1,
                body_1,
                contentType_1,
                contentDisposition_1,
                xAdsRegion_1,
                ...args_1
            ], void 0, function*(accessToken, hash, contentRange, sessionId, body, contentType, contentDisposition, xAdsRegion, options = {}) {
                // verify required parameter 'hash' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('uploadSignedResourcesChunk', 'hash', hash);
                // verify required parameter 'contentRange' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('uploadSignedResourcesChunk', 'contentRange', contentRange);
                // verify required parameter 'sessionId' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('uploadSignedResourcesChunk', 'sessionId', sessionId);
                // verify required parameter 'body' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('uploadSignedResourcesChunk', 'body', body);
                const localVarPath = `/oss/v2/signedresources/{hash}/resumable`.replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'PUT'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                const localVarFormParams = new URLSearchParams();
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (contentType != null) {
                    localVarHeaderParameter['Content-Type'] = String(contentType);
                }
                if (contentRange != null) {
                    localVarHeaderParameter['Content-Range'] = String(contentRange);
                }
                if (contentDisposition != null) {
                    localVarHeaderParameter['Content-Disposition'] = String(contentDisposition);
                }
                if (xAdsRegion != null) {
                    localVarHeaderParameter['x-ads-region'] = typeof xAdsRegion === 'string' ? xAdsRegion : JSON.stringify(xAdsRegion);
                }
                if (sessionId != null) {
                    localVarHeaderParameter['Session-Id'] = String(sessionId);
                }
                if (body !== undefined) {
                    localVarFormParams.set('body', body);
                }
                localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = localVarFormParams.toString();
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            })
    };
};
const ObjectsApiFp = function(sdkManager) {
    const localVarAxiosParamCreator = ObjectsApiAxiosParamCreator(sdkManager.apsConfiguration);
    return {
        /**
         * Requests OSS to start reconstituting the set of objects that were uploaded using signed S3 upload URLs. You must call this operation only after all the objects have been uploaded.   You can specify up to 25 objects in this operation.
         * @summary Complete Batch Upload to S3 Signed URLs
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {BatchcompleteuploadObject} [requests] An array of objects, each of which represents an upload to complete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ batchCompleteUpload (accessToken, bucketKey, requests, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.batchCompleteUpload(accessToken, bucketKey, requests, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Creates and returns signed URLs to download a set of objects directly from S3. These signed URLs expire in 2 minutes by default, but you can change this duration if needed.  You must start download the objects before the signed URLs expire. The download itself can take longer.  Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
         * @summary Batch Generate Signed S3 Download URLs
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {Batchsigneds3downloadObject} requests An array of objects representing each request for a signed download URL.
         * @param {boolean} [publicResourceFallback] Specifies how to return the signed URLs, in case the object was uploaded in chunks, and assembling of chunks is not yet complete.  - &#x60;&#x60;true&#x60;&#x60; : Return a single signed OSS URL. - &#x60;&#x60;false&#x60;&#x60; : (Default) Return multiple signed S3 URLs, where each URL points to a chunk.
         * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ batchSignedS3Download (accessToken, bucketKey, requests, publicResourceFallback, minutesExpiration, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.batchSignedS3Download(accessToken, bucketKey, requests, publicResourceFallback, minutesExpiration, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Creates and returns signed URLs to upload a set of objects directly to S3. These signed URLs expire in 2 minutes by default, but you can change this duration if needed.  You must start uploading the objects before the signed URLs expire. The upload  itself can take longer.  Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.  If required, you can request an array of signed URLs for each object, which lets you upload the objects in chunks. Once you upload all chunks you must call the [Complete Batch Upload to S3 Signed URL](/en/docs/data/v2/reference/http/buckets-:bucketKey-objects-:objectKey-batchcompleteupload-POST/) operation to indicate completion. This instructs OSS to assemble the chunks and reconstitute the object on OSS. You must call this operation even if you requested a single signed URL for an object.  If an upload fails after the validity period of a signed URL has elapsed, you can call this operation again to obtain fresh signed URLs. However, you must use the same ``uploadKey`` that was returned when you originally called this operation.
         * @summary Batch Generate Signed S3 Upload URLs
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {boolean} [useAcceleration] &#x60;&#x60;true&#x60;&#x60; : (Default) Generates a faster S3 signed URL using Transfer Acceleration.  &#x60;&#x60;false&#x60;&#x60;: Generates a standard S3 signed URL.
         * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
         * @param {Batchsigneds3uploadObject} [requests] An array of objects representing each request for a signed upload URL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ batchSignedS3Upload (accessToken, bucketKey, useAcceleration, minutesExpiration, requests, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.batchSignedS3Upload(accessToken, bucketKey, useAcceleration, minutesExpiration, requests, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Requests OSS to assemble and reconstitute the object that was uploaded using signed S3 upload URL. You must call this operation only after all parts/chunks of the object has been uploaded.
         * @summary Complete Upload to S3 Signed URL
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} contentType Must be &#x60;&#x60;application/json&#x60;&#x60;.
         * @param {Completes3uploadBody} body
         * @param {string} [xAdsMetaContentType] The Content-Type value for the uploaded object to record within OSS.
         * @param {string} [xAdsMetaContentDisposition] The Content-Disposition value for the uploaded object to record within OSS.
         * @param {string} [xAdsMetaContentEncoding] The Content-Encoding value for the uploaded object to record within OSS.
         * @param {string} [xAdsMetaCacheControl] The Cache-Control value for the uploaded object to record within OSS.
         * @param {string} [xAdsUserDefinedMetadata] Custom metadata to be stored with the object, which can be retrieved later on download or when retrieving object details. Must be a JSON object that is less than 100 bytes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ completeSignedS3Upload (accessToken, bucketKey, objectKey, contentType, body, xAdsMetaContentType, xAdsMetaContentDisposition, xAdsMetaContentEncoding, xAdsMetaCacheControl, xAdsUserDefinedMetadata, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.completeSignedS3Upload(accessToken, bucketKey, objectKey, contentType, body, xAdsMetaContentType, xAdsMetaContentDisposition, xAdsMetaContentEncoding, xAdsMetaCacheControl, xAdsUserDefinedMetadata, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Creates a copy of an object within the bucket.
         * @summary Copy Object
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} newObjName A URL-encoded human friendly name to identify the copied object.
         * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
         * @param {string} [xAdsAcmCheckGroups] Informs the OSS Api Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of &#x60;&#x60;true&#x60;&#x60;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
         * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ copyTo (accessToken, bucketKey, objectKey, newObjName, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.copyTo(accessToken, bucketKey, objectKey, newObjName, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Generates a signed URL that can be used to download or upload an object within the specified expiration time. If the object the signed URL points to is deleted or expires before the signed URL expires, the signed URL will no longer be valid.  In addition to this operation that generates OSS signed URLs, OSS provides operations to generate S3 signed URLs. S3 signed URLs allow direct upload/download from S3 but are restricted to bucket owners. OSS signed URLs also allow upload/download and can be configured for access by other applications, making them suitable for sharing objects across applications.  Only the application that owns the bucket containing the object can call this operation.
         * @summary Generate OSS Signed URL
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {Access} [access]
         * @param {boolean} [useCdn] &#x60;&#x60;true&#x60;&#x60; : Returns a Cloudfront URL to the object instead of an Autodesk URL (one that points to a location on https://developer.api.autodesk.com). Applications can interact with the Cloudfront URL exactly like with any classic public resource in OSS. They can use GET requests to download objects or PUT requests to upload objects.  &#x60;&#x60;false&#x60;&#x60; : (Default) Returns an Autodesk URL (one that points to a location on https://developer.api.autodesk.com) to the object.
         * @param {CreateSignedResource} [createSignedResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ createSignedResource (accessToken, bucketKey, objectKey, access, useCdn, createSignedResource, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSignedResource(accessToken, bucketKey, objectKey, access, useCdn, createSignedResource, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Deletes an object from the bucket.
         * @summary Delete Object
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
         * @param {string} [xAdsAcmCheckGroups] Informs the OSS API Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of &#x60;&#x60;true&#x60;&#x60;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
         * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ deleteObject (accessToken, bucketKey, objectKey, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteObject(accessToken, bucketKey, objectKey, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Delete an object using an OSS signed URL to access it.  Only applications that own the bucket containing the object can call this operation.
         * @summary Delete Object Using Signed URL
         * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
         * @param {Region} [xAdsRegion] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ deleteSignedResource (accessToken, hash, xAdsRegion, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteSignedResource(accessToken, hash, xAdsRegion, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Returns detailed information about the specified object.
         * @summary Get Object Details
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} [ifModifiedSince] A timestamp in the HTTP date format (Mon, DD Month YYYY HH:MM:SS GMT). The requested data is returned only if the object has been modified since the specified timestamp. If not, a 304 (Not Modified) HTTP status is returned.
         * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
         * @param {string} [xAdsAcmCheckGroups] Informs the OSS Api Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of &#x60;&#x60;true&#x60;&#x60;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
         * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
         * @param {With} [_with]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getObjectDetails (accessToken, bucketKey, objectKey, ifModifiedSince, _with, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getObjectDetails(accessToken, bucketKey, objectKey, ifModifiedSince, _with, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Returns a list objects in the specified bucket.   Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
         * @summary List Objects
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {number} [limit] The number of items you want per page. Acceptable values &#x3D; 1-100. Default &#x3D; 10.
         * @param {string} [beginsWith] Filters the results by the value you specify. Only the objects with their &#x60;&#x60;objectKey&#x60;&#x60; beginning with the specified string are returned.
         * @param {string} [startAt] The ID of the last item that was returned in the previous result set.  It enables the system to return subsequent items starting from the next one after the specified ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getObjects (accessToken, bucketKey, limit, beginsWith, startAt, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getObjects(accessToken, bucketKey, limit, beginsWith, startAt, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Downloads an object using an OSS signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/)  contains the ``hash`` URI parameter as well.
         * @summary Download Object Using Signed URL
         * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
         * @param {string} [range] The byte range to download, specified in the form &#x60;&#x60;bytes&#x3D;&lt;START_BYTE&gt;-&lt;END_BYTE&gt;&#x60;&#x60;.
         * @param {string} [ifNoneMatch] The last known ETag value of the object. OSS returns the requested data  only if the &#x60;&#x60;If-None-Match&#x60;&#x60; header differs from the ETag value of the object on OSS, which indicates that the object on OSS is newer. If not, it returns a 304 \&quot;Not Modified\&quot; HTTP status.
         * @param {string} [ifModifiedSince] A timestamp in the HTTP date format (Mon, DD Month YYYY HH:MM:SS GMT). The requested data is returned only if the object has been modified since the specified timestamp. If not, a 304 (Not Modified) HTTP status is returned.
         * @param {string} [acceptEncoding] The compression format your prefer to receive the data. Possible values are:  - &#x60;&#x60;gzip&#x60;&#x60; - Use the gzip format  **Note:** You cannot use &#x60;&#x60;Accept-Encoding:gzip&#x60;&#x60; with a Range header containing an end byte range. OSS will not honor the End byte range if &#x60;&#x60;Accept-Encoding: gzip&#x60;&#x60; header is used.
         * @param {Region} [region] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {string} [responseContentDisposition] The value of the Content-Disposition header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Disposition header defaults to the value stored with OSS.
         * @param {string} [responseContentType] The value of the Content-Type header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Type header defaults to the value stored with OSS.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getSignedResource (accessToken, hash, range, ifNoneMatch, ifModifiedSince, acceptEncoding, region, responseContentDisposition, responseContentType, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getSignedResource(accessToken, hash, range, ifNoneMatch, ifModifiedSince, acceptEncoding, region, responseContentDisposition, responseContentType, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Gets a signed URL to download an object directly from S3, bypassing OSS servers. This signed URL expires in 2 minutes by default, but you can change this duration if needed.  You must start the download before the signed URL expires. The download itself can take longer. If the download fails after the validity period of the signed URL has elapsed, you can call this operation again to obtain a fresh signed URL.  Only applications that have read access to the object can call this operation.     You can use range headers with the signed download URL to download the object in chunks. This ability lets you download chunks in parallel, which can result in faster downloads.  If the object you want to download was uploaded in chunks and is still assembling on OSS, you will receive multiple S3 URLs instead of just one. Each URL will point to a chunk. If you prefer to receive a single URL, set the ``public-resource-fallback`` query parameter to ``true``. This setting will make OSS fallback to returning a single signed OSS URL, if assembling is still in progress.   In addition to this operation that generates S3 signed URLs, OSS provides an operation to generate OSS signed URLs. S3 signed URLs allow direct upload/download from S3 but are restricted to bucket owners. OSS signed URLs also allow upload/download and can be configured for access by other applications, making them suitable for sharing objects across applications.
         * @summary Generate Signed S3 Download URL
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} [ifNoneMatch] The last known ETag value of the object. OSS returns the signed URL only if the &#x60;&#x60;If-None-Match&#x60;&#x60; header differs from the ETag value of the object on S3. If not, it returns a 304 \&quot;Not Modified\&quot; HTTP status.
         * @param {string} [ifModifiedSince] A timestamp in the HTTP date format (Mon, DD Month YYYY HH:MM:SS GMT). The signed URL is returned only if the object has been modified since the specified timestamp. If not, a 304 (Not Modified) HTTP status is returned.
         * @param {string} [xAdsAcmScopes] Optional OSS-compliant scope reference to increase bucket search performance
         * @param {string} [responseContentType] The value of the Content-Type header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Type header defaults to the value stored with OSS.
         * @param {string} [responseContentDisposition] The value of the Content-Disposition header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Disposition header defaults to the value stored with OSS.
         * @param {string} [responseCacheControl] The value of the Cache-Control header you want to receive when you download the object using the signed URL. If you do not specify a value, the Cache-Control header defaults to the value stored with OSS.
         * @param {boolean} [publicResourceFallback] Specifies how to return the signed URLs, in case the object was uploaded in chunks, and assembling of chunks is not yet complete.  - &#x60;&#x60;true&#x60;&#x60; : Return a single signed OSS URL. - &#x60;&#x60;false&#x60;&#x60; : (Default) Return multiple signed S3 URLs, where each URL points to a chunk.
         * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
         * @param {boolean} [useCdn] &#x60;&#x60;true&#x60;&#x60; : Returns a URL that points to a CloudFront edge location.  &#x60;&#x60;false&#x60;&#x60; : (Default) Returns a URL that points directly to the S3 object.
         * @param {boolean} [redirect] Generates a HTTP redirection response (Temporary Redirect 307​) using the generated URL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ signedS3Download (accessToken, bucketKey, objectKey, ifNoneMatch, ifModifiedSince, responseContentType, responseContentDisposition, responseCacheControl, publicResourceFallback, minutesExpiration, useCdn, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.signedS3Download(accessToken, bucketKey, objectKey, ifNoneMatch, ifModifiedSince, responseContentType, responseContentDisposition, responseCacheControl, publicResourceFallback, minutesExpiration, useCdn, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Gets a signed URL to upload an object directly to S3, bypassing OSS servers. You can also request an array of signed URLs which lets you upload an object in chunks.  This signed URL expires in 2 minutes by default, but you can change this duration if needed.  You must start the upload before the signed URL expires. The upload itself can take longer. If the upload fails after the validity period of the signed URL has elapsed, you can call this operation again to obtain a fresh signed URL (or an array of signed URLs as the case may be). However, you must use the same ``uploadKey`` that was returned when you originally called this operation.   Only applications that own the bucket can call this operation.  **Note:** Once you upload all chunks you must call the [Complete Upload to S3 Signed URL](/en/docs/data/v2/reference/http/buckets-:bucketKey-objects-:objectKey-signeds3upload-POST/) operation to indicate completion. This instructs OSS to assemble the chunks and reconstitute the object on OSS. You must call this operation even when using a single signed URL.   In addition to this operation that generates S3 signed URLs, OSS provides an operation to generate OSS signed URLs. S3 signed URLs allow direct upload/download from S3 but are restricted to bucket owners. OSS signed URLs also allow upload/download and can be configured for access by other applications, making them suitable for sharing objects across applications.
         * @summary Generate Signed S3 Upload URL
         * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
         * @param {string} objectKey The URL-encoded human friendly name of the object.
         * @param {string} [xAdsAcmScopes] Optional OSS-compliant scope reference to increase bucket search performance
         * @param {number} [parts] The number of parts you intend to chunk the object for uploading. OSS will return that many signed URLs, one URL for each chunk. If you do not specify a value you\&#39;ll get only one URL to upload the entire object.
         * @param {number} [firstPart] The index of the first chunk to be uploaded.
         * @param {string} [uploadKey] The &#x60;&#x60;uploadKey&#x60;&#x60; of a previously-initiated upload, in order to request more chunk upload URLs for the same upload. If you do not specify a value, OSS will initiate a new upload entirely.
         * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
         * @param {boolean} [useAcceleration] &#x60;&#x60;true&#x60;&#x60; : (Default) Generates a faster S3 signed URL using Transfer Acceleration.  &#x60;&#x60;false&#x60;&#x60;: Generates a standard S3 signed URL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ signedS3Upload (accessToken, bucketKey, objectKey, parts, firstPart, uploadKey, minutesExpiration, useAcceleration, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.signedS3Upload(accessToken, bucketKey, objectKey, parts, firstPart, uploadKey, minutesExpiration, useAcceleration, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Replaces an object that already exists on OSS, using an OSS signed URL.   The signed URL must fulfil the following conditions:  - The signed URL is valid (it has not expired as yet). - It was generated with ``write`` or ``readwrite`` for the ``access`` parameter.
         * @summary Replace Object Using Signed URL
         * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
         * @param {number} contentLength The size of the data contained in the request body, in bytes.
         * @param {File} body The object to upload.
         * @param {string} [contentType] The MIME type of the object to upload; can be any type except \&#39;multipart/form-data\&#39;. This can be omitted, but we recommend adding it.
         * @param {string} [contentDisposition] The suggested file name to use when this object is downloaded as a file.
         * @param {Region} [xAdsRegion] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {string} [ifMatch] The current value of the &#x60;&#x60;sha1&#x60;&#x60; attribute of the object you want to replace. OSS checks the &#x60;&#x60;If-Match&#x60;&#x60; header against the &#x60;&#x60;sha1&#x60;&#x60; attribute of the object in OSS. If they match, OSS allows the object to be overwritten. Otherwise, it means that the object on OSS has been modified since you retrieved the &#x60;&#x60;sha1&#x60;&#x60; and the request fails.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ uploadSignedResource (accessToken, hash, contentLength, body, contentType, contentDisposition, xAdsRegion, ifMatch, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.uploadSignedResource(accessToken, hash, contentLength, body, contentType, contentDisposition, xAdsRegion, ifMatch, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Performs a resumable upload using an OSS signed URL. Use this operation to upload an object in chunks.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains the ``hash`` as a URI parameter.
         * @summary Upload Object Using Signed URL
         * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
         * @param {string} contentRange The byte range to upload, specified in the form &#x60;&#x60;bytes&#x3D;&lt;START_BYTE&gt;-&lt;END_BYTE&gt;&#x60;&#x60;.
         * @param {string} sessionId An ID to uniquely identify the file upload session.
         * @param {File} body The chunk to upload.
         * @param {string} [contentType] The MIME type of the object to upload; can be any type except \&#39;multipart/form-data\&#39;. This can be omitted, but we recommend adding it.
         * @param {string} [contentDisposition] The suggested file name to use when this object is downloaded as a file.
         * @param {Region} [xAdsRegion] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ uploadSignedResourcesChunk (accessToken, hash, contentRange, sessionId, body, contentType, contentDisposition, xAdsRegion, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.uploadSignedResourcesChunk(accessToken, hash, contentRange, sessionId, body, contentType, contentDisposition, xAdsRegion, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        }
    };
};
class ObjectsApi extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseApi"] {
    constructor(){
        super(...arguments);
        this.logger = this.sdkManager.logger;
    }
    /**
     * Requests OSS to start reconstituting the set of objects that were uploaded using signed S3 upload URLs. You must call this operation only after all the objects have been uploaded.   You can specify up to 25 objects in this operation.
     * @summary Complete Batch Upload to S3 Signed URLs
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {BatchcompleteuploadObject} [requests] An array of objects, each of which represents an upload to complete.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ batchCompleteUpload(accessToken, bucketKey, requests, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into batchCompleteUpload ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).batchCompleteUpload(accessToken, bucketKey, requests, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`batchCompleteUpload Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`batchCompleteUpload Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`batchCompleteUpload Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`batchCompleteUpload Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`batchCompleteUpload Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Creates and returns signed URLs to download a set of objects directly from S3. These signed URLs expire in 2 minutes by default, but you can change this duration if needed.  You must start download the objects before the signed URLs expire. The download itself can take longer.  Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
     * @summary Batch Generate Signed S3 Download URLs
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {Batchsigneds3downloadObject} requests An array of objects representing each request for a signed download URL.
     * @param {boolean} [publicResourceFallback] Specifies how to return the signed URLs, in case the object was uploaded in chunks, and assembling of chunks is not yet complete.  - &#x60;&#x60;true&#x60;&#x60; : Return a single signed OSS URL. - &#x60;&#x60;false&#x60;&#x60; : (Default) Return multiple signed S3 URLs, where each URL points to a chunk.
     * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ batchSignedS3Download(accessToken, bucketKey, requests, publicResourceFallback, minutesExpiration, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into batchSignedS3Download ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).batchSignedS3Download(accessToken, bucketKey, requests, publicResourceFallback, minutesExpiration, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`batchSignedS3Download Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`batchSignedS3Download Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`batchSignedS3Download Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`batchSignedS3Download Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`batchSignedS3Download Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Creates and returns signed URLs to upload a set of objects directly to S3. These signed URLs expire in 2 minutes by default, but you can change this duration if needed.  You must start uploading the objects before the signed URLs expire. The upload  itself can take longer.  Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.  If required, you can request an array of signed URLs for each object, which lets you upload the objects in chunks. Once you upload all chunks you must call the [Complete Batch Upload to S3 Signed URL](/en/docs/data/v2/reference/http/buckets-:bucketKey-objects-:objectKey-batchcompleteupload-POST/) operation to indicate completion. This instructs OSS to assemble the chunks and reconstitute the object on OSS. You must call this operation even if you requested a single signed URL for an object.  If an upload fails after the validity period of a signed URL has elapsed, you can call this operation again to obtain fresh signed URLs. However, you must use the same ``uploadKey`` that was returned when you originally called this operation.
     * @summary Batch Generate Signed S3 Upload URLs
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {boolean} [useAcceleration] &#x60;&#x60;true&#x60;&#x60; : (Default) Generates a faster S3 signed URL using Transfer Acceleration.  &#x60;&#x60;false&#x60;&#x60;: Generates a standard S3 signed URL.
     * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
     * @param {Batchsigneds3uploadObject} [requests] An array of objects representing each request for a signed upload URL.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ batchSignedS3Upload(accessToken, bucketKey, useAcceleration, minutesExpiration, requests, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into batchSignedS3Upload ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).batchSignedS3Upload(accessToken, bucketKey, useAcceleration, minutesExpiration, requests, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`batchSignedS3Upload Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`batchSignedS3Upload Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`batchSignedS3Upload Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`batchSignedS3Upload Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`batchSignedS3Upload Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Requests OSS to assemble and reconstitute the object that was uploaded using signed S3 upload URL. You must call this operation only after all parts/chunks of the object has been uploaded.
     * @summary Complete Upload to S3 Signed URL
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {string} objectKey The URL-encoded human friendly name of the object.
     * @param {string} contentType Must be &#x60;&#x60;application/json&#x60;&#x60;.
     * @param {Completes3uploadBody} body
     * @param {string} [xAdsMetaContentType] The Content-Type value for the uploaded object to record within OSS.
     * @param {string} [xAdsMetaContentDisposition] The Content-Disposition value for the uploaded object to record within OSS.
     * @param {string} [xAdsMetaContentEncoding] The Content-Encoding value for the uploaded object to record within OSS.
     * @param {string} [xAdsMetaCacheControl] The Cache-Control value for the uploaded object to record within OSS.
     * @param {string} [xAdsUserDefinedMetadata] Custom metadata to be stored with the object, which can be retrieved later on download or when retrieving object details. Must be a JSON object that is less than 100 bytes.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ completeSignedS3Upload(accessToken, bucketKey, objectKey, contentType, body, xAdsMetaContentType, xAdsMetaContentDisposition, xAdsMetaContentEncoding, xAdsMetaCacheControl, xAdsUserDefinedMetadata, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into completeSignedS3Upload ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).completeSignedS3Upload(accessToken, bucketKey, objectKey, contentType, body, xAdsMetaContentType, xAdsMetaContentDisposition, xAdsMetaContentEncoding, xAdsMetaCacheControl, xAdsUserDefinedMetadata, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`completeSignedS3Upload Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`completeSignedS3Upload Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`completeSignedS3Upload Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`completeSignedS3Upload Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`completeSignedS3Upload Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Creates a copy of an object within the bucket.
     * @summary Copy Object
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {string} objectKey The URL-encoded human friendly name of the object.
     * @param {string} newObjName A URL-encoded human friendly name to identify the copied object.
     * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
     * @param {string} [xAdsAcmCheckGroups] Informs the OSS Api Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of &#x60;&#x60;true&#x60;&#x60;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
     * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ copyTo(accessToken, bucketKey, objectKey, newObjName, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into copyTo ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).copyTo(accessToken, bucketKey, objectKey, newObjName, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`copyTo Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`copyTo Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`copyTo Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`copyTo Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`copyTo Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Generates a signed URL that can be used to download or upload an object within the specified expiration time. If the object the signed URL points to is deleted or expires before the signed URL expires, the signed URL will no longer be valid.  In addition to this operation that generates OSS signed URLs, OSS provides operations to generate S3 signed URLs. S3 signed URLs allow direct upload/download from S3 but are restricted to bucket owners. OSS signed URLs also allow upload/download and can be configured for access by other applications, making them suitable for sharing objects across applications.  Only the application that owns the bucket containing the object can call this operation.
     * @summary Generate OSS Signed URL
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {string} objectKey The URL-encoded human friendly name of the object.
     * @param {Access} [access]
     * @param {boolean} [useCdn] &#x60;&#x60;true&#x60;&#x60; : Returns a Cloudfront URL to the object instead of an Autodesk URL (one that points to a location on https://developer.api.autodesk.com). Applications can interact with the Cloudfront URL exactly like with any classic public resource in OSS. They can use GET requests to download objects or PUT requests to upload objects.  &#x60;&#x60;false&#x60;&#x60; : (Default) Returns an Autodesk URL (one that points to a location on https://developer.api.autodesk.com) to the object.
     * @param {CreateSignedResource} [createSignedResource]
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ createSignedResource(accessToken, bucketKey, objectKey, access, useCdn, createSignedResource, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into createSignedResource ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).createSignedResource(accessToken, bucketKey, objectKey, access, useCdn, createSignedResource, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`createSignedResource Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`createSignedResource Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`createSignedResource Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`createSignedResource Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`createSignedResource Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Deletes an object from the bucket.
     * @summary Delete Object
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {string} objectKey The URL-encoded human friendly name of the object.
     * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
     * @param {string} [xAdsAcmCheckGroups] Informs the OSS API Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of &#x60;&#x60;true&#x60;&#x60;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
     * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ deleteObject(accessToken, bucketKey, objectKey, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into deleteObject ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).deleteObject(accessToken, bucketKey, objectKey, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`deleteObject Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`deleteObject Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`deleteObject Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`deleteObject Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`deleteObject Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Delete an object using an OSS signed URL to access it.  Only applications that own the bucket containing the object can call this operation.
     * @summary Delete Object Using Signed URL
     * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
     * @param {Region} [xAdsRegion] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ deleteSignedResource(accessToken, hash, xAdsRegion, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into deleteSignedResource ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).deleteSignedResource(accessToken, hash, xAdsRegion, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`deleteSignedResource Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`deleteSignedResource Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`deleteSignedResource Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`deleteSignedResource Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`deleteSignedResource Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Returns detailed information about the specified object.
     * @summary Get Object Details
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {string} objectKey The URL-encoded human friendly name of the object.
     * @param {string} [ifModifiedSince] A timestamp in the HTTP date format (Mon, DD Month YYYY HH:MM:SS GMT). The requested data is returned only if the object has been modified since the specified timestamp. If not, a 304 (Not Modified) HTTP status is returned.
     * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
     * @param {string} [xAdsAcmCheckGroups] Informs the OSS Api Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of &#x60;&#x60;true&#x60;&#x60;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
     * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
     * @param {With} [_with]
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ getObjectDetails(accessToken, bucketKey, objectKey, ifModifiedSince, _with, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into getObjectDetails ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).getObjectDetails(accessToken, bucketKey, objectKey, ifModifiedSince, _with, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getObjectDetails Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getObjectDetails Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`getObjectDetails Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`getObjectDetails Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`getObjectDetails Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Returns a list objects in the specified bucket.   Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
     * @summary List Objects
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {number} [limit] The number of items you want per page. Acceptable values &#x3D; 1-100. Default &#x3D; 10.
     * @param {string} [beginsWith] Filters the results by the value you specify. Only the objects with their &#x60;&#x60;objectKey&#x60;&#x60; beginning with the specified string are returned.
     * @param {string} [startAt] The ID of the last item that was returned in the previous result set.  It enables the system to return subsequent items starting from the next one after the specified ID.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ getObjects(accessToken, bucketKey, limit, beginsWith, startAt, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into getObjects ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).getObjects(accessToken, bucketKey, limit, beginsWith, startAt, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getObjects Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getObjects Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`getObjects Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`getObjects Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`getObjects Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Downloads an object using an OSS signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/)  contains the ``hash`` URI parameter as well.
     * @summary Download Object Using Signed URL
     * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
     * @param {string} [range] The byte range to download, specified in the form &#x60;&#x60;bytes&#x3D;&lt;START_BYTE&gt;-&lt;END_BYTE&gt;&#x60;&#x60;.
     * @param {string} [ifNoneMatch] The last known ETag value of the object. OSS returns the requested data  only if the &#x60;&#x60;If-None-Match&#x60;&#x60; header differs from the ETag value of the object on OSS, which indicates that the object on OSS is newer. If not, it returns a 304 \&quot;Not Modified\&quot; HTTP status.
     * @param {string} [ifModifiedSince] A timestamp in the HTTP date format (Mon, DD Month YYYY HH:MM:SS GMT). The requested data is returned only if the object has been modified since the specified timestamp. If not, a 304 (Not Modified) HTTP status is returned.
     * @param {string} [acceptEncoding] The compression format your prefer to receive the data. Possible values are:  - &#x60;&#x60;gzip&#x60;&#x60; - Use the gzip format  **Note:** You cannot use &#x60;&#x60;Accept-Encoding:gzip&#x60;&#x60; with a Range header containing an end byte range. OSS will not honor the End byte range if &#x60;&#x60;Accept-Encoding: gzip&#x60;&#x60; header is used.
     * @param {Region} [region] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
     * @param {string} [responseContentDisposition] The value of the Content-Disposition header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Disposition header defaults to the value stored with OSS.
     * @param {string} [responseContentType] The value of the Content-Type header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Type header defaults to the value stored with OSS.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ getSignedResource(accessToken, hash, range, ifNoneMatch, ifModifiedSince, acceptEncoding, region, responseContentDisposition, responseContentType, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into getSignedResource ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).getSignedResource(accessToken, hash, range, ifNoneMatch, ifModifiedSince, acceptEncoding, region, responseContentDisposition, responseContentType, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getSignedResource Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getSignedResource Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`getSignedResource Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`getSignedResource Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`getSignedResource Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Gets a signed URL to download an object directly from S3, bypassing OSS servers. This signed URL expires in 2 minutes by default, but you can change this duration if needed.  You must start the download before the signed URL expires. The download itself can take longer. If the download fails after the validity period of the signed URL has elapsed, you can call this operation again to obtain a fresh signed URL.  Only applications that have read access to the object can call this operation.     You can use range headers with the signed download URL to download the object in chunks. This ability lets you download chunks in parallel, which can result in faster downloads.  If the object you want to download was uploaded in chunks and is still assembling on OSS, you will receive multiple S3 URLs instead of just one. Each URL will point to a chunk. If you prefer to receive a single URL, set the ``public-resource-fallback`` query parameter to ``true``. This setting will make OSS fallback to returning a single signed OSS URL, if assembling is still in progress.   In addition to this operation that generates S3 signed URLs, OSS provides an operation to generate OSS signed URLs. S3 signed URLs allow direct upload/download from S3 but are restricted to bucket owners. OSS signed URLs also allow upload/download and can be configured for access by other applications, making them suitable for sharing objects across applications.
     * @summary Generate Signed S3 Download URL
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {string} objectKey The URL-encoded human friendly name of the object.
     * @param {string} [ifNoneMatch] The last known ETag value of the object. OSS returns the signed URL only if the &#x60;&#x60;If-None-Match&#x60;&#x60; header differs from the ETag value of the object on S3. If not, it returns a 304 \&quot;Not Modified\&quot; HTTP status.
     * @param {string} [ifModifiedSince] A timestamp in the HTTP date format (Mon, DD Month YYYY HH:MM:SS GMT). The signed URL is returned only if the object has been modified since the specified timestamp. If not, a 304 (Not Modified) HTTP status is returned.
     * @param {string} [xAdsAcmScopes] Optional OSS-compliant scope reference to increase bucket search performance
     * @param {string} [responseContentType] The value of the Content-Type header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Type header defaults to the value stored with OSS.
     * @param {string} [responseContentDisposition] The value of the Content-Disposition header you want to receive when you download the object using the signed URL. If you do not specify a value, the Content-Disposition header defaults to the value stored with OSS.
     * @param {string} [responseCacheControl] The value of the Cache-Control header you want to receive when you download the object using the signed URL. If you do not specify a value, the Cache-Control header defaults to the value stored with OSS.
     * @param {boolean} [publicResourceFallback] Specifies how to return the signed URLs, in case the object was uploaded in chunks, and assembling of chunks is not yet complete.  - &#x60;&#x60;true&#x60;&#x60; : Return a single signed OSS URL. - &#x60;&#x60;false&#x60;&#x60; : (Default) Return multiple signed S3 URLs, where each URL points to a chunk.
     * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
     * @param {boolean} [useCdn] &#x60;&#x60;true&#x60;&#x60; : Returns a URL that points to a CloudFront edge location.  &#x60;&#x60;false&#x60;&#x60; : (Default) Returns a URL that points directly to the S3 object.
     * @param {boolean} [redirect] Generates a HTTP redirection response (Temporary Redirect 307​) using the generated URL.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ signedS3Download(accessToken, bucketKey, objectKey, ifNoneMatch, ifModifiedSince, responseContentType, responseContentDisposition, responseCacheControl, publicResourceFallback, minutesExpiration, useCdn, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into signedS3Download ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).signedS3Download(accessToken, bucketKey, objectKey, ifNoneMatch, ifModifiedSince, responseContentType, responseContentDisposition, responseCacheControl, publicResourceFallback, minutesExpiration, useCdn, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`signedS3Download Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`signedS3Download Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`signedS3Download Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`signedS3Download Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`signedS3Download Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Gets a signed URL to upload an object directly to S3, bypassing OSS servers. You can also request an array of signed URLs which lets you upload an object in chunks.  This signed URL expires in 2 minutes by default, but you can change this duration if needed.  You must start the upload before the signed URL expires. The upload itself can take longer. If the upload fails after the validity period of the signed URL has elapsed, you can call this operation again to obtain a fresh signed URL (or an array of signed URLs as the case may be). However, you must use the same ``uploadKey`` that was returned when you originally called this operation.   Only applications that own the bucket can call this operation.  **Note:** Once you upload all chunks you must call the [Complete Upload to S3 Signed URL](/en/docs/data/v2/reference/http/buckets-:bucketKey-objects-:objectKey-signeds3upload-POST/) operation to indicate completion. This instructs OSS to assemble the chunks and reconstitute the object on OSS. You must call this operation even when using a single signed URL.   In addition to this operation that generates S3 signed URLs, OSS provides an operation to generate OSS signed URLs. S3 signed URLs allow direct upload/download from S3 but are restricted to bucket owners. OSS signed URLs also allow upload/download and can be configured for access by other applications, making them suitable for sharing objects across applications.
     * @summary Generate Signed S3 Upload URL
     * @param {string} bucketKey The bucket key of the bucket that contains the objects you are operating on.
     * @param {string} objectKey The URL-encoded human friendly name of the object.
     * @param {string} [xAdsAcmScopes] Optional OSS-compliant scope reference to increase bucket search performance
     * @param {number} [parts] The number of parts you intend to chunk the object for uploading. OSS will return that many signed URLs, one URL for each chunk. If you do not specify a value you\&#39;ll get only one URL to upload the entire object.
     * @param {number} [firstPart] The index of the first chunk to be uploaded.
     * @param {string} [uploadKey] The &#x60;&#x60;uploadKey&#x60;&#x60; of a previously-initiated upload, in order to request more chunk upload URLs for the same upload. If you do not specify a value, OSS will initiate a new upload entirely.
     * @param {number} [minutesExpiration] The time window (in minutes) the signed URL will remain usable. Acceptable values &#x3D; 1-60 minutes. Default &#x3D; 2 minutes.  **Tip:** Use the smallest possible time window to minimize exposure of the signed URL.
     * @param {boolean} [useAcceleration] &#x60;&#x60;true&#x60;&#x60; : (Default) Generates a faster S3 signed URL using Transfer Acceleration.  &#x60;&#x60;false&#x60;&#x60;: Generates a standard S3 signed URL.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ signedS3Upload(accessToken, bucketKey, objectKey, parts, firstPart, uploadKey, minutesExpiration, useAcceleration, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into signedS3Upload ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).signedS3Upload(accessToken, bucketKey, objectKey, parts, firstPart, uploadKey, minutesExpiration, useAcceleration, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`signedS3Upload Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`signedS3Upload Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`signedS3Upload Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`signedS3Upload Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`signedS3Upload Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Replaces an object that already exists on OSS, using an OSS signed URL.   The signed URL must fulfil the following conditions:  - The signed URL is valid (it has not expired as yet). - It was generated with ``write`` or ``readwrite`` for the ``access`` parameter.
     * @summary Replace Object Using Signed URL
     * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
     * @param {number} contentLength The size of the data contained in the request body, in bytes.
     * @param {File} body The object to upload.
     * @param {string} [contentType] The MIME type of the object to upload; can be any type except \&#39;multipart/form-data\&#39;. This can be omitted, but we recommend adding it.
     * @param {string} [contentDisposition] The suggested file name to use when this object is downloaded as a file.
     * @param {Region} [xAdsRegion] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
     * @param {string} [ifMatch] The current value of the &#x60;&#x60;sha1&#x60;&#x60; attribute of the object you want to replace. OSS checks the &#x60;&#x60;If-Match&#x60;&#x60; header against the &#x60;&#x60;sha1&#x60;&#x60; attribute of the object in OSS. If they match, OSS allows the object to be overwritten. Otherwise, it means that the object on OSS has been modified since you retrieved the &#x60;&#x60;sha1&#x60;&#x60; and the request fails.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ uploadSignedResource(accessToken, hash, contentLength, body, contentType, contentDisposition, xAdsRegion, ifMatch, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into uploadSignedResource ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).uploadSignedResource(accessToken, hash, contentLength, body, contentType, contentDisposition, xAdsRegion, ifMatch, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`uploadSignedResource Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`uploadSignedResource Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`uploadSignedResource Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`uploadSignedResource Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`uploadSignedResource Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Performs a resumable upload using an OSS signed URL. Use this operation to upload an object in chunks.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains the ``hash`` as a URI parameter.
     * @summary Upload Object Using Signed URL
     * @param {string} hash The ID component of the signed URL.  **Note:** The signed URL returned by [Generate OSS Signed URL](/en/docs/data/v2/reference/http/signedresources-:id-GET/) contains &#x60;&#x60;hash&#x60;&#x60; as a URI parameter.
     * @param {string} contentRange The byte range to upload, specified in the form &#x60;&#x60;bytes&#x3D;&lt;START_BYTE&gt;-&lt;END_BYTE&gt;&#x60;&#x60;.
     * @param {string} sessionId An ID to uniquely identify the file upload session.
     * @param {File} body The chunk to upload.
     * @param {string} [contentType] The MIME type of the object to upload; can be any type except \&#39;multipart/form-data\&#39;. This can be omitted, but we recommend adding it.
     * @param {string} [contentDisposition] The suggested file name to use when this object is downloaded as a file.
     * @param {Region} [xAdsRegion] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */ uploadSignedResourcesChunk(accessToken, hash, contentRange, sessionId, body, contentType, contentDisposition, xAdsRegion, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into uploadSignedResourcesChunk ");
            try {
                const request = yield ObjectsApiFp(this.sdkManager).uploadSignedResourcesChunk(accessToken, hash, contentRange, sessionId, body, contentType, contentDisposition, xAdsRegion, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`uploadSignedResourcesChunk Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`uploadSignedResourcesChunk Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`uploadSignedResourcesChunk Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`uploadSignedResourcesChunk Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`uploadSignedResourcesChunk Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
}
}}),
"[project]/node_modules/@aps_sdk/oss/dist/esm/model/downloadStatus.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ /**
 * Indicates the upload status of the requested object. Possible values are:  - ``complete`` - The upload process is finished. If the object was uploaded in chunks, assembly of chunks into the final object is also complete. - ``chunked`` - The object was uploaded in chunks, but assembly of chunks into the final object is still pending. `public-resource-fallback`` = ``false`` - ``fallback`` - The object was uploaded in chunks, but assembly of chunks into the final object is still pending. `public-resource-fallback`` = ``true``
 * @export
 * @enum {string}
 */ __turbopack_context__.s({
    "DownloadStatus": (()=>DownloadStatus)
});
const DownloadStatus = {
    Complete: 'complete',
    Chunked: 'chunked',
    Fallback: 'fallback'
};
}}),
"[project]/node_modules/@aps_sdk/oss/dist/esm/custom-code/ossFileTransfer.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OSSFileTransfer": (()=>OSSFileTransfer)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$api$2f$objectsApi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/api/objectsApi.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$model$2f$downloadStatus$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/model/downloadStatus.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/base.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/common.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/fs [external] (fs, cjs)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/stream [external] (stream, cjs)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
;
;
;
;
;
;
class Constants {
}
Constants.MaxRetry = 5;
Constants.ChunkSize = 5 * 1024 * 1024;
Constants.BatchSize = 25;
class OSSFileTransfer {
    constructor(configuration, sdkmanager, authenticationProvider){
        this.accessTokenExpiredMessage = 'Access token provided is invalid or expired.';
        this.forbiddenMessage = '403 (Forbidden)';
        this.sdkManager = sdkmanager;
        this.configuration = configuration;
        this.objectApi = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$api$2f$objectsApi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ObjectsApi"](this.sdkManager);
        this.maxChunkCountAllowed = this.configuration.getMaxChunkCountAllowed();
        this.maxRetryOnUrlExpiry = this.configuration.getMaxRetryOnUrlExpiry();
        this.maxRetryOnTokenExpiry = this.configuration.getMaxRetryOnTokenExpiry();
        // this._authentication = authentication;
        this.logger = this.sdkManager.logger;
        if (authenticationProvider) {
            this.authProvider = authenticationProvider;
        }
    }
    upload(bucketKey_1, objectKey_1, sourceToUpload_1, accessToken_1, cancellationToken_1) {
        return __awaiter(this, arguments, void 0, function*(bucketKey, objectKey, sourceToUpload, accessToken, cancellationToken, requestIdPrefix = '', onProgress) {
            const requestId = yield this.handleRequestId(requestIdPrefix, bucketKey, objectKey);
            const retryCount = this.configuration.getRetryCount();
            this.logger.logDebug(`${requestId} Config retry setting was: ${retryCount}`);
            yield this.validateFileSize(requestId, sourceToUpload);
            onProgress === null || onProgress === void 0 ? void 0 : onProgress(1);
            var numberOfChunks = this.calculateNumberOfChunks(sourceToUpload.length);
            var chunksUploaded = 0;
            var start = 0;
            var uploadUrls = [];
            var uploadKey = null;
            while(chunksUploaded < numberOfChunks){
                this.throwIfCancellationRequested(cancellationToken, requestId);
                var attempts = 0;
                var end = Math.min(start + Constants.ChunkSize, sourceToUpload.length);
                var fileBuffer = this.readFileBytes(sourceToUpload, start, end);
                var retryUrlExpiryCount = 0;
                while(true){
                    this.throwIfCancellationRequested(cancellationToken, requestId);
                    attempts++;
                    this.logger.logInfo(`${requestId} Uploading part ${chunksUploaded}, attempt ${attempts}`);
                    if (uploadUrls.length == 0) {
                        retryUrlExpiryCount++;
                        var [uploadUrlsResponse, currentAccessToken] = yield this.getUploadUrlsWithRetry(bucketKey, objectKey, numberOfChunks, chunksUploaded, uploadKey, accessToken, requestId);
                        uploadKey = uploadUrlsResponse.uploadKey;
                        uploadUrls = uploadUrlsResponse.urls;
                        accessToken = currentAccessToken;
                    }
                    var currentUrl = uploadUrls.shift();
                    try {
                        this.throwIfCancellationRequested(cancellationToken, requestId);
                        var responseBuffer = yield this.uploadToURL(currentUrl, fileBuffer, accessToken, requestId);
                        var statusCode = responseBuffer.status;
                        if (statusCode === 403 && retryUrlExpiryCount === this.maxRetryOnUrlExpiry) {
                            this.logger.logInfo(`${requestId} URL can not be refreshed.`);
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`${statusCode} URL can not be refreshed`);
                        }
                        if (statusCode == 403) {
                            this.logger.logInfo(`${requestId} 403, refreshing urls, attempt: ${retryUrlExpiryCount}`);
                            uploadUrls = [];
                            continue;
                        }
                        break;
                    } catch (error) {
                        this.logger.logError(error.message);
                        if (attempts == Constants.MaxRetry) {
                            this.logger.logError(`${requestId} Couldn't upload chunk after max retry of ${Constants.MaxRetry}`);
                            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`${requestId} ${error.Message}`);
                        }
                    }
                }
                chunksUploaded++;
                start = end;
                var percentCompleted = chunksUploaded / numberOfChunks * 100;
                onProgress === null || onProgress === void 0 ? void 0 : onProgress(percentCompleted);
                this.logger.logInfo(`${requestId} Number of chunks uploaded : ${chunksUploaded}`);
            }
            var completeResponse = yield this.objectApi.completeSignedS3Upload(accessToken, bucketKey, objectKey, "application/json", {
                uploadKey: uploadKey
            });
            onProgress === null || onProgress === void 0 ? void 0 : onProgress(100);
            return completeResponse;
        });
    }
    uploadToURL(currentUrl, fileChunk, accessToken, requestId, options) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarHeaderParameter = {};
            localVarHeaderParameter['x-ads-request-id'] = requestId;
            const localVarRequestOptions = Object.assign({
                method: 'PUT'
            }, options);
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter);
            localVarRequestOptions.data = fileChunk;
            const localVarAxiosArgs = {
                url: currentUrl,
                options: localVarRequestOptions
            };
            const request = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunctionOss"])(localVarAxiosArgs, this.sdkManager);
            const response = yield request();
            return response;
        });
    }
    download(bucketKey, objectKey, accessToken, filePath, cancellationToken, requestIdPrefix, onProgress) {
        return __awaiter(this, void 0, void 0, function*() {
            const requestId = yield this.handleRequestId(requestIdPrefix, bucketKey, objectKey);
            onProgress === null || onProgress === void 0 ? void 0 : onProgress(1);
            const response = yield this.getS3SignedDownloadUrlWithRetry(bucketKey, objectKey, accessToken, requestId);
            const fileSize = response.size;
            const numberOfChunks = this.calculateNumberOfChunks(fileSize);
            let partsDownloaded = 0;
            let start = 0;
            let outStream = new __TURBOPACK__imported__module__$5b$externals$5d2f$stream__$5b$external$5d$__$28$stream$2c$__cjs$29$__["PassThrough"]();
            outStream.setMaxListeners(numberOfChunks + 1);
            let fileStream;
            if (filePath) {
                fileStream = (0, __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["createWriteStream"])(filePath, {
                    flags: 'a'
                });
            }
            try {
                while(partsDownloaded < numberOfChunks){
                    this.logger.logInfo(`${requestId} Downloading part: ${partsDownloaded}`);
                    const end = Math.min((partsDownloaded + 1) * Constants.ChunkSize, fileSize);
                    if (start == end) {
                        break;
                    }
                    let attemptCount = 0;
                    while(attemptCount < this.maxRetryOnUrlExpiry){
                        try {
                            attemptCount++;
                            this.logger.logInfo(`${requestId} Downloading file range: ${start}-${end}`);
                            const partStream = yield this.writeToFileStreamFromUrl(response.url, start, end, requestId);
                            if (filePath) {
                                partStream.pipe(fileStream, {
                                    end: false
                                });
                            } else partStream.pipe(outStream, {
                                end: false
                            });
                            start = end + 1;
                            partsDownloaded++;
                            const percentCompleted = Math.floor(partsDownloaded / numberOfChunks * 100);
                            onProgress === null || onProgress === void 0 ? void 0 : onProgress(percentCompleted);
                            break;
                        } catch (error) {
                            this.logger.logError(`${requestId} Error downloading part: ${partsDownloaded}. Attempt ${attemptCount}/${this.maxRetryOnUrlExpiry}. Error: ${error}`);
                        }
                    }
                }
            } catch (error) {
                this.logger.logError(`${requestId} Error downloading file: ${error}`);
            }
            if (!filePath) {
                return outStream;
            }
        });
    }
    isFileSizeAllowed(file) {
        return __awaiter(this, void 0, void 0, function*() {
            const fileSize = file.length;
            const numberOfChunks = this.calculateNumberOfChunks(fileSize);
            if (numberOfChunks > this.maxChunkCountAllowed) {
                return false;
            }
            return true;
        });
    }
    readFileBytes(file, start, end) {
        const fileReader = file.subarray(start, end);
        return fileReader;
    }
    getUploadUrlsWithRetry(bucketKey, objectKey, numberOfChunks, chunksUploaded, uploadKey, accessToken, requestId) {
        return __awaiter(this, void 0, void 0, function*() {
            var _a;
            var attemptcount = 0;
            var parts = Math.min(numberOfChunks - chunksUploaded, Constants.BatchSize);
            var firstPart = chunksUploaded + 1;
            do {
                this.logger.logInfo(`${requestId} Refreshing URL attempt:${attemptcount}.`);
                try {
                    var response = yield this.objectApi.signedS3Upload(accessToken, bucketKey, objectKey, parts, firstPart, uploadKey);
                    return [
                        response.content,
                        accessToken
                    ];
                } catch (e) {
                    if (e.message.includes(this.accessTokenExpiredMessage)) {
                        attemptcount++;
                        //Yet to be implemented
                        // accessToken = this.authentication.getUpdatedAccessToken();
                        accessToken = yield (_a = this.authProvider) === null || _a === void 0 ? void 0 : _a.getAccessToken();
                        this.logger.logInfo(`${requestId} Token expired. Trying to refresh`);
                    } else {
                        this.logger.logInfo(`${requestId} Error: ${e.message}`);
                        throw e;
                    }
                }
            }while (attemptcount < this.maxRetryOnTokenExpiry)
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`${requestId} Error: Fail getting upload urls after maximum retry`);
        });
    }
    calculateNumberOfChunks(fileSize) {
        if (fileSize == 0) {
            return 1;
        }
        var numberOfChunks = Math.trunc(fileSize / Constants.ChunkSize);
        if (fileSize % Constants.ChunkSize != 0) {
            numberOfChunks++;
        }
        return numberOfChunks;
    }
    validateFileSize(requestId, sourceToUpload) {
        return __awaiter(this, void 0, void 0, function*() {
            var sizeAllowed = yield this.isFileSizeAllowed(sourceToUpload);
            if (!sizeAllowed) {
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`${requestId} File size too big to upload. Currently max file size allowed is ${Number(this.maxChunkCountAllowed) * Number(Constants.ChunkSize)} bytes`);
            }
        });
    }
    handleRequestId(parentRequestId, bucketKey, objectKey) {
        return __awaiter(this, void 0, void 0, function*() {
            var requestId = parentRequestId && parentRequestId.trim() != "" ? parentRequestId : String(Math.random());
            requestId = requestId + ":" + this.GenerateSdkRequestId(bucketKey, objectKey);
            return requestId;
        });
    }
    GenerateSdkRequestId(bucketKey, objectKey) {
        return encodeURIComponent(String(bucketKey + "/" + objectKey));
    }
    getS3SignedDownloadUrlWithRetry(bucketKey, objectKey, accessToken, requestId) {
        return __awaiter(this, void 0, void 0, function*() {
            var _a;
            var attemptCount = 0;
            do {
                this.logger.logInfo(`${requestId} Get signed URL to download directly from S3 attempt: ${attemptCount}`);
                try {
                    var objectStatusEnumString = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$model$2f$downloadStatus$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DownloadStatus"].Complete;
                    var response = yield this.objectApi.signedS3Download(accessToken, bucketKey, objectKey, requestId);
                    if (response.content.status != objectStatusEnumString) {
                        this.logger.logError(`${requestId} File not available for download yet.`);
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`${requestId} File not available for download yet.`);
                    }
                    return response.content;
                } catch (error) {
                    if (error.message.includes(this.accessTokenExpiredMessage)) {
                        attemptCount++;
                        //Yet to be implemented
                        // accessToken = this.authentication.getUpdatedAccessToken();
                        accessToken = yield (_a = this.authProvider) === null || _a === void 0 ? void 0 : _a.getAccessToken();
                        this.logger.logInfo(`${requestId} Token expired. Trying to refresh`);
                    } else {
                        this.logger.logError(`${requestId} Error: ${error.message}`);
                        throw error;
                    }
                }
            }while (attemptCount < this.maxRetryOnTokenExpiry)
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`${requestId} Error: Fail getting upload urls after maximum retry`);
        });
    }
    validateProjectScopeName(requestId, projectScope) {
        const scopeRegex = /^([a-zA-Z0-9.\\-_]{3,50}(,?)){1,20}$/;
        if (!(projectScope === '' || scopeRegex.test(projectScope))) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`${requestId} Parameter 'projectScope' doesn't pass regex test - user must submit a valid scope.`);
        }
    }
    throwIfCancellationRequested(cancellationToken, requestId) {
        if (cancellationToken.signal.aborted) {
            this.logger.logInfo("${requestId} Cancellation requested.");
            cancellationToken.signal.throwIfAborted();
        }
    }
    writeToFileStreamFromUrl(Url, start, end, requestId, options) {
        return __awaiter(this, void 0, void 0, function*() {
            const localVarHeaderParameter = {};
            const rangeHeaderValue = `bytes=${start}-${end}`;
            localVarHeaderParameter['x-ads-request-id'] = requestId;
            localVarHeaderParameter['Range'] = String(rangeHeaderValue);
            const localVarRequestOptions = Object.assign({
                method: 'GET'
            }, options);
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter);
            localVarRequestOptions.responseType = "stream";
            const localVarAxiosArgs = {
                url: Url,
                options: localVarRequestOptions
            };
            const request = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunctionOss"])(localVarAxiosArgs, this.sdkManager);
            const response = yield request();
            this.logger.logInfo(`${requestId} Successfully downloaded file range: ${start} - ${end}`);
            return response.data;
        });
    }
}
}}),
"[project]/node_modules/@aps_sdk/oss/dist/esm/api/bucketsApi.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ __turbopack_context__.s({
    "BucketsApi": (()=>BucketsApi),
    "BucketsApiAxiosParamCreator": (()=>BucketsApiAxiosParamCreator),
    "BucketsApiFp": (()=>BucketsApiFp)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/common.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/base.js [app-route] (ecmascript)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
;
;
;
const BucketsApiAxiosParamCreator = function(apsConfiguration) {
    return {
        /**
         * Creates a bucket.   Buckets are virtual container within the Object Storage Service (OSS), which you can use to store and manage objects (files) in the cloud. The application creating the bucket is the owner of the bucket.  **Note:** Do not use this operation to create buckets for BIM360 Document Management. Use [POST projects/{project_id}/storage](/en/docs/data/v2/reference/http/projects-project_id-storage-POST>) instead. For details, see [Upload Files to BIM 360 Document Management](/en/docs/bim360/v1/tutorials/document-management/upload-document).
         * @summary Create Bucket
         * @param {CreateBucketsPayload} policyKey
         * @param {Region} [xAdsRegion] Specifies where the bucket must be stored. Possible values are: - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia. **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ createBucket: (accessToken_1, policyKey_1, xAdsRegion_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                policyKey_1,
                xAdsRegion_1,
                ...args_1
            ], void 0, function*(accessToken, policyKey, xAdsRegion, options = {}) {
                // verify required parameter 'policyKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('createBucket', 'policyKey', policyKey);
                const localVarPath = `/oss/v2/buckets`;
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'POST'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (xAdsRegion != null) {
                    localVarHeaderParameter['x-ads-region'] = typeof xAdsRegion === 'string' ? xAdsRegion : JSON.stringify(xAdsRegion);
                }
                localVarHeaderParameter['Content-Type'] = 'application/json';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["serializeDataIfNeeded"])(policyKey, localVarRequestOptions, apsConfiguration);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Deletes the specified bucket. Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.   The initial processing of a bucket deletion request can be time-consuming. So, we recommend only deleting buckets containing a few objects, like those typically used for acceptance testing and prototyping.   **Note:** Bucket keys will not be immediately available for reuse.
         * @summary Delete Bucket
         * @param {string} bucketKey The bucket key of the bucket to delete.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ deleteBucket: (accessToken_1, bucketKey_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('deleteBucket', 'bucketKey', bucketKey);
                const localVarPath = `/oss/v2/buckets/{bucketKey}`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'DELETE'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Returns detailed information about the specified bucket.  **Note:** Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
         * @summary Get Bucket Details
         * @param {string} bucketKey The bucket key of the bucket to query.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getBucketDetails: (accessToken_1, bucketKey_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                bucketKey_1,
                ...args_1
            ], void 0, function*(accessToken, bucketKey, options = {}) {
                // verify required parameter 'bucketKey' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('getBucketDetails', 'bucketKey', bucketKey);
                const localVarPath = `/oss/v2/buckets/{bucketKey}/details`.replace(`{${"bucketKey"}}`, encodeURIComponent(String(bucketKey)));
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'GET'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Returns a list of buckets owned by the application.
         * @summary List Buckets
         * @param {Region} [region] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {number} [limit] The number of items you want per page. Acceptable values &#x3D; 1-100. Default &#x3D; 10.
         * @param {string} [startAt] The ID of the last item that was returned in the previous result set.  It enables the system to return subsequent items starting from the next one after the specified ID.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getBuckets: (accessToken_1, region_1, limit_1, startAt_1, ...args_1)=>__awaiter(this, [
                accessToken_1,
                region_1,
                limit_1,
                startAt_1,
                ...args_1
            ], void 0, function*(accessToken, region, limit, startAt, options = {}) {
                const localVarPath = `/oss/v2/buckets`;
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'GET'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                yield (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setBearerAuthToObject"])(localVarHeaderParameter, accessToken);
                if (region !== undefined) {
                    localVarQueryParameter['region'] = region;
                }
                if (limit !== undefined) {
                    localVarQueryParameter['limit'] = limit;
                }
                if (startAt !== undefined) {
                    localVarQueryParameter['startAt'] = startAt;
                }
                localVarHeaderParameter['User-Agent'] = 'APS SDK/OSS/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            })
    };
};
const BucketsApiFp = function(sdkManager) {
    const localVarAxiosParamCreator = BucketsApiAxiosParamCreator(sdkManager.apsConfiguration);
    return {
        /**
         * Creates a bucket.   Buckets are virtual container within the Object Storage Service (OSS), which you can use to store and manage objects (files) in the cloud. The application creating the bucket is the owner of the bucket.  **Note:** Do not use this operation to create buckets for BIM360 Document Management. Use [POST projects/{project_id}/storage](/en/docs/data/v2/reference/http/projects-project_id-storage-POST>) instead. For details, see [Upload Files to BIM 360 Document Management](/en/docs/bim360/v1/tutorials/document-management/upload-document).
         * @summary Create Bucket
         * @param {CreateBucketsPayload} policyKey
         * @param {Region} [xAdsRegion] Specifies where the bucket must be stored. Possible values are: - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia. **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ createBucket (accessToken, policyKey, xAdsRegion, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createBucket(accessToken, policyKey, xAdsRegion, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Deletes the specified bucket. Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.   The initial processing of a bucket deletion request can be time-consuming. So, we recommend only deleting buckets containing a few objects, like those typically used for acceptance testing and prototyping.   **Note:** Bucket keys will not be immediately available for reuse.
         * @summary Delete Bucket
         * @param {string} bucketKey The bucket key of the bucket to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ deleteBucket (accessToken, bucketKey, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteBucket(accessToken, bucketKey, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Returns detailed information about the specified bucket.  **Note:** Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
         * @summary Get Bucket Details
         * @param {string} bucketKey The bucket key of the bucket to query.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getBucketDetails (accessToken, bucketKey, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBucketDetails(accessToken, bucketKey, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Returns a list of buckets owned by the application.
         * @summary List Buckets
         * @param {Region} [region] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
         * @param {number} [limit] The number of items you want per page. Acceptable values &#x3D; 1-100. Default &#x3D; 10.
         * @param {string} [startAt] The ID of the last item that was returned in the previous result set.  It enables the system to return subsequent items starting from the next one after the specified ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getBuckets (accessToken, region, limit, startAt, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getBuckets(accessToken, region, limit, startAt, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        }
    };
};
class BucketsApi extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseApi"] {
    constructor(){
        super(...arguments);
        this.logger = this.sdkManager.logger;
    }
    /**
     * Creates a bucket.   Buckets are virtual container within the Object Storage Service (OSS), which you can use to store and manage objects (files) in the cloud. The application creating the bucket is the owner of the bucket.  **Note:** Do not use this operation to create buckets for BIM360 Document Management. Use [POST projects/{project_id}/storage](/en/docs/data/v2/reference/http/projects-project_id-storage-POST>) instead. For details, see [Upload Files to BIM 360 Document Management](/en/docs/bim360/v1/tutorials/document-management/upload-document).
     * @summary Create Bucket
     * @param {CreateBucketsPayload} policyKey
     * @param {Region} [xAdsRegion] Specifies where the bucket must be stored. Possible values are: - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia. **Note:** Beta features are subject to change. Please do not use in production environments.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketsApi
     */ createBucket(accessToken, policyKey, xAdsRegion, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into createBucket ");
            try {
                const request = yield BucketsApiFp(this.sdkManager).createBucket(accessToken, policyKey, xAdsRegion, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`createBucket Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`createBucket Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`createBucket Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`createBucket Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`createBucket Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Deletes the specified bucket. Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.   The initial processing of a bucket deletion request can be time-consuming. So, we recommend only deleting buckets containing a few objects, like those typically used for acceptance testing and prototyping.   **Note:** Bucket keys will not be immediately available for reuse.
     * @summary Delete Bucket
     * @param {string} bucketKey The bucket key of the bucket to delete.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketsApi
     */ deleteBucket(accessToken, bucketKey, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into deleteBucket ");
            try {
                const request = yield BucketsApiFp(this.sdkManager).deleteBucket(accessToken, bucketKey, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`deleteBucket Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`deleteBucket Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`deleteBucket Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`deleteBucket Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`deleteBucket Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Returns detailed information about the specified bucket.  **Note:** Only the application that owns the bucket can call this operation. All other applications that call this operation will receive a \"403 Forbidden\" error.
     * @summary Get Bucket Details
     * @param {string} bucketKey The bucket key of the bucket to query.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketsApi
     */ getBucketDetails(accessToken, bucketKey, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into getBucketDetails ");
            try {
                const request = yield BucketsApiFp(this.sdkManager).getBucketDetails(accessToken, bucketKey, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getBucketDetails Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getBucketDetails Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`getBucketDetails Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`getBucketDetails Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`getBucketDetails Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Returns a list of buckets owned by the application.
     * @summary List Buckets
     * @param {Region} [region] Specifies where the bucket containing the object stored. Possible values are:  - &#x60;&#x60;US&#x60;&#x60; - (Default) Data center for the US region. - &#x60;&#x60;EMEA&#x60;&#x60; - Data center for the European Union, Middle East, and Africa. - &#x60;&#x60;APAC&#x60;&#x60; -  (Beta) Data center for Australia.  **Note:** Beta features are subject to change. Please do not use in production environments.
     * @param {number} [limit] The number of items you want per page. Acceptable values &#x3D; 1-100. Default &#x3D; 10.
     * @param {string} [startAt] The ID of the last item that was returned in the previous result set.  It enables the system to return subsequent items starting from the next one after the specified ID.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BucketsApi
     */ getBuckets(accessToken, region, limit, startAt, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into getBuckets ");
            try {
                const request = yield BucketsApiFp(this.sdkManager).getBuckets(accessToken, region, limit, startAt, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getBuckets Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getBuckets Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`getBuckets Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`getBuckets Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OssApiError"](`getBuckets Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
}
}}),
"[project]/node_modules/@aps_sdk/oss/dist/esm/custom-code/fileTransferConfigurations.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "FileTransferConfigurations": (()=>FileTransferConfigurations)
});
class FileTransferConfigurations {
    constructor(retryCount, maxChunkCountAllowed = 10000, maxRetryOnTokenExpiry = 2, maxRetryOnUrlExpiry = 2){
        this._retryCount = retryCount;
        this._maxChunkCountAllowed = maxChunkCountAllowed;
        this._maxRetryOnTokenExpiry = maxRetryOnTokenExpiry;
        this._maxRetryOnUrlExpiry = maxRetryOnUrlExpiry;
    }
    getRetryCount() {
        return this._retryCount;
    }
    getMaxChunkCountAllowed() {
        return this._maxChunkCountAllowed;
    }
    getMaxRetryOnTokenExpiry() {
        return this._maxRetryOnTokenExpiry;
    }
    getMaxRetryOnUrlExpiry() {
        return this._maxRetryOnUrlExpiry;
    }
}
}}),
"[project]/node_modules/@aps_sdk/oss/dist/esm/custom-code/ossClient.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "OssClient": (()=>OssClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$custom$2d$code$2f$ossFileTransfer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/custom-code/ossFileTransfer.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$api$2f$bucketsApi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/api/bucketsApi.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$api$2f$objectsApi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/api/objectsApi.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$custom$2d$code$2f$fileTransferConfigurations$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/oss/dist/esm/custom-code/fileTransferConfigurations.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__ = __turbopack_context__.i("[externals]/fs [external] (fs, cjs)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
;
;
;
;
;
class OssClient extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseClient"] {
    constructor(optionalArgs){
        super(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.authenticationProvider);
        if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.sdkManager)) {
            (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).sdkManager = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SdkManagerBuilder"].create().build();
        }
        this.objectApi = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$api$2f$objectsApi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ObjectsApi"](optionalArgs.sdkManager);
        this.bucketApi = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$api$2f$bucketsApi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BucketsApi"](optionalArgs.sdkManager);
        this.ossFileTransfer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$custom$2d$code$2f$ossFileTransfer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["OSSFileTransfer"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$oss$2f$dist$2f$esm$2f$custom$2d$code$2f$fileTransferConfigurations$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FileTransferConfigurations"](3), optionalArgs.sdkManager, optionalArgs.authenticationProvider);
    }
    /**
    * @deprecated Use the `downloadObject` method instead.
    */ downloadObjectAsync(bucketKey, objectKey, filePathOrOptionalArgs, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            let filePath;
            if (typeof filePathOrOptionalArgs === 'string') {
                filePath = filePathOrOptionalArgs;
            } else {
                optionalArgs = filePathOrOptionalArgs;
            }
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            if (filePath) {
                yield this.ossFileTransfer.download(bucketKey, objectKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, filePath, (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.cancellationToken) || new AbortController(), optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.requestIdPrefix, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.onProgress);
            } else {
                return this.ossFileTransfer.download(bucketKey, objectKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, null, (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.cancellationToken) || new AbortController(), optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.requestIdPrefix, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.onProgress);
            }
        });
    }
    downloadObject(bucketKey, objectKey, filePathOrOptionalArgs, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            let filePath;
            if (typeof filePathOrOptionalArgs === 'string') {
                filePath = filePathOrOptionalArgs;
            } else {
                optionalArgs = filePathOrOptionalArgs;
            }
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            if (filePath) {
                yield this.ossFileTransfer.download(bucketKey, objectKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, filePath, (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.cancellationToken) || new AbortController(), optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.requestIdPrefix, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.onProgress);
            } else {
                return this.ossFileTransfer.download(bucketKey, objectKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, null, (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.cancellationToken) || new AbortController(), optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.requestIdPrefix, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.onProgress);
            }
        });
    }
    /**
     * Instructs OSS to complete the object creation process for numerous objects after their bytes have been uploaded directly to S3. An object will not be accessible until you complete the object creation process, either with this endpoint or the single Complete Upload endpoint. This endpoint accepts batch sizes of up to 25. Any larger and the request will fail.
     * @param {string} bucketKey URL-encoded bucket key
     * @param {string} objectKey URL-encoded object name
     * @param {Buffer|string} sourceToUpload The Path of the file to be uploaded or the buffer of the file .
     * @param accessToken bearer access token
     * @param {AbortController} cancellationToken
     * @param {string} requestIdPrefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSApiInterface
     */ /**
   * @deprecated Use the `uploadObject` method instead.
   */ uploadObjectAsync(bucketKey, objectKey, sourceToUpload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            var response;
            if (typeof sourceToUpload === 'string') {
                var buffer = yield __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["promises"].readFile(sourceToUpload);
                response = yield this.ossFileTransfer.upload(bucketKey, objectKey, buffer, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.cancellationToken) || new AbortController, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.requestIdPrefix, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.onProgress);
            } else {
                response = yield this.ossFileTransfer.upload(bucketKey, objectKey, sourceToUpload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.cancellationToken) || new AbortController, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.requestIdPrefix, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.onProgress);
            }
            return response.content;
        });
    }
    /**
     * Instructs OSS to complete the object creation process for numerous objects after their bytes have been uploaded directly to S3. An object will not be accessible until you complete the object creation process, either with this endpoint or the single Complete Upload endpoint. This endpoint accepts batch sizes of up to 25. Any larger and the request will fail.
     * @param {string} bucketKey URL-encoded bucket key
     * @param {string} objectKey URL-encoded object name
     * @param {Buffer|string} sourceToUpload The Path of the file to be uploaded or the buffer of the file .
     * @param accessToken bearer access token
     * @param {AbortController} cancellationToken
     * @param {string} requestIdPrefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSApiInterface
     */ uploadObject(bucketKey, objectKey, sourceToUpload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            var response;
            if (typeof sourceToUpload === 'string') {
                var buffer = yield __TURBOPACK__imported__module__$5b$externals$5d2f$fs__$5b$external$5d$__$28$fs$2c$__cjs$29$__["promises"].readFile(sourceToUpload);
                response = yield this.ossFileTransfer.upload(bucketKey, objectKey, buffer, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.cancellationToken) || new AbortController, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.requestIdPrefix, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.onProgress);
            } else {
                response = yield this.ossFileTransfer.upload(bucketKey, objectKey, sourceToUpload, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.cancellationToken) || new AbortController, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.requestIdPrefix, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.onProgress);
            }
            return response.content;
        });
    }
    /**
     * Instructs OSS to complete the object creation process for numerous objects after their bytes have been uploaded directly to S3. An object will not be accessible until you complete the object creation process, either with this endpoint or the single Complete Upload endpoint. This endpoint accepts batch sizes of up to 25. Any larger and the request will fail.
     * @param {string} bucketKey URL-encoded bucket key
     * @param {BatchcompleteuploadObject} [requests] An array of objects, each of which represents an upload to complete.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSApiInterface
     */ batchCompleteUpload(bucketKey, requests, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.batchCompleteUpload(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, requests, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
         * Gets one or more signed URLs to download objects. The signed URLs can be used to download the objects directly from S3, skipping OSS servers. Be aware that expiration time for the signed URL(s) is just 60 seconds. So, a request to the URL(s) must begin within 60 seconds; the transfer of the data can exceed 60 seconds. A successful call to this endpoint requires bucket owner access.
         * @param {string} bucketKey URL-encoded bucket key
         * @param {Batchsigneds3downloadObject} requests An array of objects representing each request for a signed download URL.
         * @param {boolean} [publicResourceFallback] Indicates that for each requested object, OSS should return an OSS Signed Resource if the object is unmerged, rather than a map of S3 signed URLs for the chunks of the object.
         * @param {number} [minutesExpiration] The custom expiration time within the 1 to 60 minutes range, if not specified, default is 2 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ batchSignedS3Download(bucketKey, requests, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.batchSignedS3Download(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, requests, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.publicResourceFallback, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.minutesExpiration, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
     * Requests a batch of S3 signed URL with which to upload multiple objects or chunks of multiple objects. As with the Batch Get Download URL endpoint, the requests within the batch are evaluated independently and individual requests can be rejected even if the overall request returns a 200 response code. You can request a maximum of 25 URLs in a single request.
     * @param {string} bucketKey URL-encoded bucket key
     * @param {boolean} [useAcceleration] Whether or not to generate an accelerated signed URL (ie: URLs of the form ...s3-accelerate.amazonaws.com... vs ...s3.amazonaws.com...). When not specified, defaults to true. Providing non-boolean values will result in a 400 error.
     * @param {number} [minutesExpiration] The custom expiration time within the 1 to 60 minutes range, if not specified, default is 2 minutes.
     * @param {Batchsigneds3uploadObject} [requests] An array of objects, each of which represents a signed URL / URLs to retrieve.
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSApi
     */ batchSignedS3Upload(bucketKey, requests, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.batchSignedS3Upload(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.useAcceleration, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.minutesExpiration, requests, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
         * Instructs OSS to complete the object creation process after the bytes have been uploaded directly to S3.
         * @param {string} bucketKey URL-encoded bucket key
         * @param {string} objectKey The URL-encoded key of the object for which to create a signed URL.
         * @param {string} contentType Must be exactly &#x60;application/json&#x60;.
         * @param {Completes3uploadBody} body
         * @param {string} [xAdsMetaContentType] The Content-Type value for the uploaded object to record within OSS.
         * @param {string} [xAdsMetaContentDisposition] The Content-Disposition value for the uploaded object to record within OSS.
         * @param {string} [xAdsMetaContentEncoding] The Content-Encoding value for the uploaded object to record within OSS.
         * @param {string} [xAdsMetaCacheControl] The Cache-Control value for the uploaded object to record within OSS.
         * @param {string} [xAdsUserDefinedMetadata] This parameter allows setting any custom metadata to be stored with the object, which can be retrieved later on download or when getting the object details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ completeSignedS3Upload(bucketKey, objectKey, contentType, body, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.completeSignedS3Upload(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, objectKey, contentType, body, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xAdsMetaContentType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xAdsMetaContentDisposition, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xAdsMetaContentEncoding, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xAdsMetaCacheControl, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xAdsUserDefinedMetadata, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
         * Copies an object to another object name in the same bucket.
         * @param {string} bucketKey URL-encoded bucket key
         * @param {string} objectKey URL-encoded object name
         * @param {string} newObjName URL-encoded Object key to use as the destination
         * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
         * @param {string} [xAdsAcmCheckGroups] Informs the OSS Api Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of \&#39;true\&#39;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
         * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ copyTo(bucketKey, objectKey, newObjName, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.copyTo(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, objectKey, newObjName, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
     * Use this endpoint to create a bucket. Buckets are arbitrary spaces created and owned by applications. Bucket keys are globally unique across all regions, regardless of where they were created, and they cannot be changed. The application creating the bucket is the owner of the bucket.
     * @param {Region} xAdsRegion The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60; EMEA&#x60; and &#x60;AUS (Beta)&#x60; Default is &#x60;US&#x60;
     * @param {CreateBucketsPayload} bucketPayload Length of time for objects in the bucket to exist; &#x60;transient&#x60; (24h),  &#x60;temporary&#x60; (30d), or &#x60;persistent&#x60; (until delete request).
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSApiInterface
     */ createBucket(xAdsRegion, bucketPayload, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.bucketApi.createBucket(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketPayload, xAdsRegion, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
         * This endpoint creates a signed URL that can be used to download an object within the specified expiration time. Be aware that if the object the signed URL points to is deleted or expires before the signed URL expires, then the signed URL will no longer be valid. A successful call to this endpoint requires bucket owner access.
         * @param {string} bucketKey URL-encoded bucket key
         * @param {string} objectKey URL-encoded object name
         * @param {Access} [access] Access for signed resource Acceptable values: &#x60;read&#x60;, &#x60;write&#x60;, &#x60;readwrite&#x60;. Default value: &#x60;read&#x60;
         * @param {boolean} [useCdn] When this is provided, OSS will return a URL that does not point to https://developer.api.autodesk.com.... , but instead points towards an alternate domain. A client can then interact with this public resource exactly as they would for a classic public resource in OSS, i.e. make a GET request to download an object or a PUT request to upload an object.
         * @param {CreateSignedResource} [createSignedResource]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ createSignedResource(bucketKey, objectKey, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.createSignedResource(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, objectKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.access, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.useCdn, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.createSignedResource, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
   * Delete the bucket with the specified key
   * @param {string} bucketKey URL-encoded bucket key
   * @param accessToken bearer access token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OSSApiInterface
   */ deleteBucket(bucketKey, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.bucketApi.deleteBucket(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
  * Deletes an object from the bucket.
  * @param {string} bucketKey URL-encoded key of the bucket containing the object.
  * @param {string} objectKey URL-encoded key of the object to delete.
  * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
  * @param {string} [xAdsAcmCheckGroups] Informs the OSS Api Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of \&#39;true\&#39;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
  * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
  * @param accessToken bearer access token
  * @param {*} [options] Override http request option.
  * @throws {RequiredError}
  * @memberof OSSApiInterface
  */ deleteObject(bucketKey, objectKey, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.deleteObject(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, objectKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
     * Delete a signed URL. A successful call to this endpoint requires bucket owner access.
     * @param {string} hash Hash of signed resource
     * @param {Region} [region] The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60; EMEA&#x60; and &#x60;AUS (Beta)&#x60; Default is &#x60;US&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */ deleteSignedResource(hash, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.deleteSignedResource(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, hash, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.region, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
     * This endpoint will return the details about the specified bucket.
     * @param {string} bucketKey URL-encoded bucket key
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSApiInterface
     */ getBucketDetails(bucketKey, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.bucketApi.getBucketDetails(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
        * This endpoint will return the buckets owned by the application. This endpoint supports pagination.
        * @param {Region} [region] The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60; EMEA&#x60; and &#x60;AUS (Beta)&#x60; Default is &#x60;US&#x60;
        * @param {number} [limit] Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10
        * @param {string} [startAt] Key to use as an offset to continue pagination This is typically the last bucket key found in a preceding GET buckets response
        * @param accessToken bearer access token
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        * @memberof OSSApiInterface
        */ getBuckets(optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.bucketApi.getBuckets(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.region, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.limit, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.startAt, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
        * Returns object details in JSON format.
        * @param {string} bucketKey URL-encoded bucket key
        * @param {string} objectKey URL-encoded object name
        * @param {string} [ifModifiedSince] If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.
        * @param {string} [xAdsAcmNamespace] This header is used to let the OSS Api Proxy know if ACM is used to authorize access to the given object. If this authorization is used by your service, then you must provide the name of the namespace you want to validate access control policies against.
        * @param {string} [xAdsAcmCheckGroups] Informs the OSS Api Proxy know if your service requires ACM authorization to also validate against Oxygen groups. If so, you must pass this header with a value of \&#39;true\&#39;. Otherwise, the assumption is that checking authorization against Oxygen groups is not required.
        * @param {string} [xAdsAcmGroups] Use this header to pass the Oxygen groups you want the OSS Api Proxy to use for group validation for the given user in the OAuth2 token.
        * @param {With} [_with] Extra information in details; multiple uses are supported Acceptable values: &#x60;createdDate&#x60;, &#x60;lastAccessedDate&#x60;, &#x60;lastModifiedDate&#x60;, &#x60;userDefinedMetadata&#x60;
        * @param accessToken bearer access token
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        * @memberof OSSApiInterface
        */ getObjectDetails(bucketKey, objectKey, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.getObjectDetails(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, objectKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.ifModifiedSince, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs._with, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
     * List objects in a bucket. It is only available to the bucket creator.
     * @param {string} bucketKey URL-encoded bucket key
     * @param {number} [limit] Limit to the response size, Acceptable values: 1-100 Default &#x3D; 10
     * @param {string} [beginsWith] Provides a way to filter the based on object key name
     * @param {string} [startAt] Key to use as an offset to continue pagination. This is typically the last bucket key found in a preceding GET buckets response
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSApiInterface
     */ getObjects(bucketKey, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.getObjects(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.limit, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.beginsWith, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.startAt);
            return response.content;
        });
    }
    /**
        * Download an object using a signed URL.
        * @param {string} hash Hash of signed resource
        * @param {string} [range] A range of bytes to download from the specified object.
        * @param {string} [ifNoneMatch] The value of this header is compared to the ETAG of the object. If they match, the body will not be included in the response. Only the object information will be included.
        * @param {string} [ifModifiedSince] If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message body.
        * @param {string} [acceptEncoding] When gzip is specified, a gzip compressed stream of the object’s bytes will be returned in the response. Cannot use “Accept-Encoding:gzip” with Range header containing an end byte range. End byte range will not be honored if “Accept-Encoding: gzip” header is used.
        * @param {Region} [region] The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60; EMEA&#x60; and &#x60;AUS (Beta)&#x60; Default is &#x60;US&#x60;
        * @param {string} [responseContentDisposition] Value of the Content-Disposition HTTP header you expect to receive. If the parameter is not provided, the value associated with the object is used.
        * @param {string} [responseContentType] Value of the Content-Type HTTP header you expect to receive in the download response.
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */ getSignedResource(hash, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.getSignedResource(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, hash, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.range, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.ifNoneMatch, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.ifModifiedSince, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.acceptEncoding, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.region, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.responseContentDisposition, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.responseContentType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
     * Gets a signed URL to a download an object directly from S3, bypassing OSS servers. This signed URL expires in 60 seconds, so the request must begin within that time frame; the actual data transfer can take longer. Note that resumable uploads store each chunk individually; after the upload completes, an async process merges all the chunks and creates the definitive OSS file. If you request a signed URL before the async process completes, the response returns a map of S3 URLs, one per chunk; the key is the byte range of the total file to which the chunk corresponds. If you need a single URL in the response, you can use OSS signed resource functionality by setting the \'public-resource-fallback\' query parameter to true. Lastly, note that ranged downloads can be used with the returned URL.
     * @param {string} bucketKey URL-encoded bucket key
     * @param {string} objectKey The URL-encoded key of the object for which to create a signed URL.
     * @param {string} [ifNoneMatch] If the value of this header matches the ETag of the object, an entity will not be returned from the server; instead a 304 (not modified) response will be returned without any message-body.
     * @param {string} [ifModifiedSince] If the requested object has not been modified since the time specified in this field, an entity will not be returned from the server; instead, a 304 (not modified) response will be returned without any message-body.
     * @param {string} [xAdsAcmScopes] Optional OSS-compliant scope reference to increase bucket search performance
     * @param {string} [responseContentType] Value of the Content-Type header that the client expects to receive from S3. If this attribute is not provided, it defaults to the value corresponding to the object.
     * @param {string} [responseContentDisposition] Value of the Content-Disposition header that the client expects to receive. If this attribute is not provided, it defaults to the value corresponding to the object.
     * @param {string} [responseCacheControl] Value of the Cache-Control header that the client expects to receive from S3. If this attribute is not provided, it defaults to the value corresponding to the object.
     * @param {boolean} [publicResourceFallback] Indicates that OSS should return an OSS Signed Resource if the object is unmerged, rather than a map of S3 signed URLs for the chunks of the object.
     * @param {number} [minutesExpiration] The custom expiration time within the 1 to 60 minutes range, if not specified, default is 2 minutes.
     * @param {boolean} [useCdn] This will generate a CloudFront URL for the S3 object.
     * @param {boolean} [redirect] Generates a HTTP redirection response (Temporary Redirect 307​) using the generated URL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */ signedS3Download(bucketKey, objectKey, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.signedS3Download(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, objectKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.ifNoneMatch, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.ifModifiedSince, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.responseContentType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.responseContentDisposition, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.responseCacheControl, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.publicResourceFallback, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.minutesExpiration, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.useCdn, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
     * Gets a signed URL to upload an object in a single request, or an array of signed URLs with which to upload an object in multiple parts.
     * @param {string} bucketKey URL-encoded bucket key
     * @param {string} objectKey The URL-encoded key of the object for which to create a signed URL.
     * @param {string} [xAdsAcmScopes] Optional OSS-compliant scope reference to increase bucket search performance
     * @param {number} [parts] For a multipart upload, the number of chunk upload URLs to return. If X is provided, the response will include chunk URLs from 1 to X. If none provided, the response will include only a single URL with which to upload an entire object.
     * @param {number} [firstPart] Index of first part in the parts collection.
     * @param {string} [uploadKey] The identifier of a previously-initiated upload, in order to request more chunk upload URLs for the same upload. This must match the &#x60;uploadKey&#x60; returned by a previous call to this endpoint where the client requested more than one part URL. If none provided, OSS will initiate a new upload entirely.
     * @param {number} [minutesExpiration] The custom expiration time within the 1 to 60 minutes range, if not specified, default is 2 minutes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */ signedS3Upload(bucketKey, objectKey, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.signedS3Upload(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, bucketKey, objectKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.parts, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.firstPart, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.uploadKey, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.minutesExpiration, optionalArgs.useAcceleration, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
     * Upload an object using a signed URL. If the signed resource is available and its expiration period is valid, you can overwrite the existing object via a signed URL upload using the \'access\' query parameter with value \'write\' or \'readwrite\'.
     * @param {string} hash Hash of signed resource
     * @param {number} contentLength Indicates the size of the request body.
     * @param {File} body The object to upload.
     * @param {string} [contentType] The MIME type of the object to upload; can be any type except \&#39;multipart/form-data\&#39;. This can be omitted, but we recommend adding it.
     * @param {string} [contentDisposition] The suggested default filename when downloading this object to a file after it has been uploaded.
     * @param {Region} [xAdsRegion] The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60; EMEA&#x60; and &#x60;AUS (Beta)&#x60; Default is &#x60;US&#x60;
     * @param {string} [ifMatch] If-Match header containing a SHA-1 hash of the bytes in the request body can be sent by the calling service or client application with the request. If present, OSS will use the value of If-Match header to verify that a SHA-1 calculated for the uploaded bytes server side matches what was sent in the header. If not, the request is failed with a status 412 Precondition Failed and the data is not written.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */ uploadSignedResource(hash, contentLength, body, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.uploadSignedResource(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, hash, contentLength, body, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.contentType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.contentDisposition, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xAdsRegion, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.ifMatch, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
     * Resumable upload for signed URLs.
     * @param {string} hash Hash of the signed resource
     * @param {string} contentRange Byte range of a segment being uploaded
     * @param {string} sessionId Unique identifier of a session of a file being uploaded
     * @param {File} body The chunk to upload.
     * @param {string} [contentType] The MIME type of the object to upload; can be any type except \&#39;multipart/form-data\&#39;. This can be omitted, but we recommend adding it.
     * @param {string} [contentDisposition] The suggested default filename when downloading this object to a file after it has been uploaded.
     * @param {Region} [xAdsRegion] The region where the bucket resides Acceptable values: &#x60;US&#x60;, &#x60; EMEA&#x60; and &#x60;AUS (Beta)&#x60; Default is &#x60;US&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */ uploadSignedResourcesChunk(hash, contentRange, sessionId, body, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken) && !this.authenticationProvider) {
                throw new Error("Please provide a valid access token or an authentication provider");
            } else if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken)) {
                (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).accessToken = yield this.authenticationProvider.getAccessToken();
            }
            const response = yield this.objectApi.uploadSignedResourcesChunk(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.accessToken, hash, contentRange, sessionId, body, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.contentType, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.contentDisposition, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.xAdsRegion, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
}
}}),
"[project]/node_modules/@aps_sdk/oss/dist/esm/model/region.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ /**
 * Specifies where the bucket containing the object is stored. Possible values are:          - ``US`` - (Default) Data center for the US region.         - ``EMEA`` - Data center for the European Union, Middle East, and Africa.         - ``AUS`` -  (Beta) Data center for Australia.          **Note:** Beta features are subject to change. Please do not use in production environments.
 * @export
 * @enum {string}
 */ __turbopack_context__.s({
    "Region": (()=>Region)
});
const Region = {
    Us: 'US',
    Emea: 'EMEA',
    /**
     * @deprecated Please use AUS instead.
     */ Apac: 'APAC',
    Aus: 'AUS'
};
}}),
"[project]/node_modules/@aps_sdk/oss/dist/esm/model/policyKey.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ /**
 * Specifies the retention policy for the objects stored in the bucket. Possible values are:               - ``transient`` - Objects are retained for 24 hours. - ``temporary`` - Objects are retained for 30 days. - ``persistent`` - Objects are retained until they are deleted.
 * @export
 * @enum {string}
 */ __turbopack_context__.s({
    "PolicyKey": (()=>PolicyKey)
});
const PolicyKey = {
    Transient: 'transient',
    Temporary: 'temporary',
    Persistent: 'persistent'
};
}}),

};

//# sourceMappingURL=node_modules_%40aps_sdk_oss_dist_esm_fe6307e6._.js.map