module.exports = {

"[project]/node_modules/delayed-stream/lib/delayed_stream.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var Stream = __turbopack_context__.r("[externals]/stream [external] (stream, cjs)").Stream;
var util = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
module.exports = DelayedStream;
function DelayedStream() {
    this.source = null;
    this.dataSize = 0;
    this.maxDataSize = 1024 * 1024;
    this.pauseStream = true;
    this._maxDataSizeExceeded = false;
    this._released = false;
    this._bufferedEvents = [];
}
util.inherits(DelayedStream, Stream);
DelayedStream.create = function(source, options) {
    var delayedStream = new this();
    options = options || {};
    for(var option in options){
        delayedStream[option] = options[option];
    }
    delayedStream.source = source;
    var realEmit = source.emit;
    source.emit = function() {
        delayedStream._handleEmit(arguments);
        return realEmit.apply(source, arguments);
    };
    source.on('error', function() {});
    if (delayedStream.pauseStream) {
        source.pause();
    }
    return delayedStream;
};
Object.defineProperty(DelayedStream.prototype, 'readable', {
    configurable: true,
    enumerable: true,
    get: function() {
        return this.source.readable;
    }
});
DelayedStream.prototype.setEncoding = function() {
    return this.source.setEncoding.apply(this.source, arguments);
};
DelayedStream.prototype.resume = function() {
    if (!this._released) {
        this.release();
    }
    this.source.resume();
};
DelayedStream.prototype.pause = function() {
    this.source.pause();
};
DelayedStream.prototype.release = function() {
    this._released = true;
    this._bufferedEvents.forEach((function(args) {
        this.emit.apply(this, args);
    }).bind(this));
    this._bufferedEvents = [];
};
DelayedStream.prototype.pipe = function() {
    var r = Stream.prototype.pipe.apply(this, arguments);
    this.resume();
    return r;
};
DelayedStream.prototype._handleEmit = function(args) {
    if (this._released) {
        this.emit.apply(this, args);
        return;
    }
    if (args[0] === 'data') {
        this.dataSize += args[1].length;
        this._checkIfMaxDataSizeExceeded();
    }
    this._bufferedEvents.push(args);
};
DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
    if (this._maxDataSizeExceeded) {
        return;
    }
    if (this.dataSize <= this.maxDataSize) {
        return;
    }
    this._maxDataSizeExceeded = true;
    var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
    this.emit('error', new Error(message));
};
}}),
"[project]/node_modules/combined-stream/lib/combined_stream.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var util = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
var Stream = __turbopack_context__.r("[externals]/stream [external] (stream, cjs)").Stream;
var DelayedStream = __turbopack_context__.r("[project]/node_modules/delayed-stream/lib/delayed_stream.js [app-route] (ecmascript)");
module.exports = CombinedStream;
function CombinedStream() {
    this.writable = false;
    this.readable = true;
    this.dataSize = 0;
    this.maxDataSize = 2 * 1024 * 1024;
    this.pauseStreams = true;
    this._released = false;
    this._streams = [];
    this._currentStream = null;
    this._insideLoop = false;
    this._pendingNext = false;
}
util.inherits(CombinedStream, Stream);
CombinedStream.create = function(options) {
    var combinedStream = new this();
    options = options || {};
    for(var option in options){
        combinedStream[option] = options[option];
    }
    return combinedStream;
};
CombinedStream.isStreamLike = function(stream) {
    return typeof stream !== 'function' && typeof stream !== 'string' && typeof stream !== 'boolean' && typeof stream !== 'number' && !Buffer.isBuffer(stream);
};
CombinedStream.prototype.append = function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
        if (!(stream instanceof DelayedStream)) {
            var newStream = DelayedStream.create(stream, {
                maxDataSize: Infinity,
                pauseStream: this.pauseStreams
            });
            stream.on('data', this._checkDataSize.bind(this));
            stream = newStream;
        }
        this._handleErrors(stream);
        if (this.pauseStreams) {
            stream.pause();
        }
    }
    this._streams.push(stream);
    return this;
};
CombinedStream.prototype.pipe = function(dest, options) {
    Stream.prototype.pipe.call(this, dest, options);
    this.resume();
    return dest;
};
CombinedStream.prototype._getNext = function() {
    this._currentStream = null;
    if (this._insideLoop) {
        this._pendingNext = true;
        return; // defer call
    }
    this._insideLoop = true;
    try {
        do {
            this._pendingNext = false;
            this._realGetNext();
        }while (this._pendingNext)
    } finally{
        this._insideLoop = false;
    }
};
CombinedStream.prototype._realGetNext = function() {
    var stream = this._streams.shift();
    if (typeof stream == 'undefined') {
        this.end();
        return;
    }
    if (typeof stream !== 'function') {
        this._pipeNext(stream);
        return;
    }
    var getStream = stream;
    getStream((function(stream) {
        var isStreamLike = CombinedStream.isStreamLike(stream);
        if (isStreamLike) {
            stream.on('data', this._checkDataSize.bind(this));
            this._handleErrors(stream);
        }
        this._pipeNext(stream);
    }).bind(this));
};
CombinedStream.prototype._pipeNext = function(stream) {
    this._currentStream = stream;
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
        stream.on('end', this._getNext.bind(this));
        stream.pipe(this, {
            end: false
        });
        return;
    }
    var value = stream;
    this.write(value);
    this._getNext();
};
CombinedStream.prototype._handleErrors = function(stream) {
    var self = this;
    stream.on('error', function(err) {
        self._emitError(err);
    });
};
CombinedStream.prototype.write = function(data) {
    this.emit('data', data);
};
CombinedStream.prototype.pause = function() {
    if (!this.pauseStreams) {
        return;
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == 'function') this._currentStream.pause();
    this.emit('pause');
};
CombinedStream.prototype.resume = function() {
    if (!this._released) {
        this._released = true;
        this.writable = true;
        this._getNext();
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == 'function') this._currentStream.resume();
    this.emit('resume');
};
CombinedStream.prototype.end = function() {
    this._reset();
    this.emit('end');
};
CombinedStream.prototype.destroy = function() {
    this._reset();
    this.emit('close');
};
CombinedStream.prototype._reset = function() {
    this.writable = false;
    this._streams = [];
    this._currentStream = null;
};
CombinedStream.prototype._checkDataSize = function() {
    this._updateDataSize();
    if (this.dataSize <= this.maxDataSize) {
        return;
    }
    var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
    this._emitError(new Error(message));
};
CombinedStream.prototype._updateDataSize = function() {
    this.dataSize = 0;
    var self = this;
    this._streams.forEach(function(stream) {
        if (!stream.dataSize) {
            return;
        }
        self.dataSize += stream.dataSize;
    });
    if (this._currentStream && this._currentStream.dataSize) {
        this.dataSize += this._currentStream.dataSize;
    }
};
CombinedStream.prototype._emitError = function(err) {
    this._reset();
    this.emit('error', err);
};
}}),
"[project]/node_modules/form-data/node_modules/mime-types/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/*!
 * mime-types
 * Copyright(c) 2014 Jonathan Ong
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */ 'use strict';
/**
 * Module dependencies.
 * @private
 */ var db = __turbopack_context__.r("[project]/node_modules/form-data/node_modules/mime-db/index.js [app-route] (ecmascript)");
var extname = __turbopack_context__.r("[externals]/path [external] (path, cjs)").extname;
/**
 * Module variables.
 * @private
 */ var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
var TEXT_TYPE_REGEXP = /^text\//i;
/**
 * Module exports.
 * @public
 */ exports.charset = charset;
exports.charsets = {
    lookup: charset
};
exports.contentType = contentType;
exports.extension = extension;
exports.extensions = Object.create(null);
exports.lookup = lookup;
exports.types = Object.create(null);
// Populate the extensions/types maps
populateMaps(exports.extensions, exports.types);
/**
 * Get the default charset for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */ function charset(type) {
    if (!type || typeof type !== 'string') {
        return false;
    }
    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime = match && db[match[1].toLowerCase()];
    if (mime && mime.charset) {
        return mime.charset;
    }
    // default text/* to utf-8
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
        return 'UTF-8';
    }
    return false;
}
/**
 * Create a full Content-Type header given a MIME type or extension.
 *
 * @param {string} str
 * @return {boolean|string}
 */ function contentType(str) {
    // TODO: should this even be in this module?
    if (!str || typeof str !== 'string') {
        return false;
    }
    var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;
    if (!mime) {
        return false;
    }
    // TODO: use content-type or other module
    if (mime.indexOf('charset') === -1) {
        var charset = exports.charset(mime);
        if (charset) mime += '; charset=' + charset.toLowerCase();
    }
    return mime;
}
/**
 * Get the default extension for a MIME type.
 *
 * @param {string} type
 * @return {boolean|string}
 */ function extension(type) {
    if (!type || typeof type !== 'string') {
        return false;
    }
    // TODO: use media-typer
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    // get extensions
    var exts = match && exports.extensions[match[1].toLowerCase()];
    if (!exts || !exts.length) {
        return false;
    }
    return exts[0];
}
/**
 * Lookup the MIME type for a file path/extension.
 *
 * @param {string} path
 * @return {boolean|string}
 */ function lookup(path) {
    if (!path || typeof path !== 'string') {
        return false;
    }
    // get the extension ("ext" or ".ext" or full path)
    var extension = extname('x.' + path).toLowerCase().substr(1);
    if (!extension) {
        return false;
    }
    return exports.types[extension] || false;
}
/**
 * Populate the extensions and types maps.
 * @private
 */ function populateMaps(extensions, types) {
    // source preference (least -> most)
    var preference = [
        'nginx',
        'apache',
        undefined,
        'iana'
    ];
    Object.keys(db).forEach(function forEachMimeType(type) {
        var mime = db[type];
        var exts = mime.extensions;
        if (!exts || !exts.length) {
            return;
        }
        // mime -> extensions
        extensions[type] = exts;
        // extension -> mime
        for(var i = 0; i < exts.length; i++){
            var extension = exts[i];
            if (types[extension]) {
                var from = preference.indexOf(db[types[extension]].source);
                var to = preference.indexOf(mime.source);
                if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {
                    continue;
                }
            }
            // set the extension -> mime
            types[extension] = type;
        }
    });
}
}}),
"[project]/node_modules/asynckit/lib/defer.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = defer;
/**
 * Runs provided function on next iteration of the event loop
 *
 * @param {function} fn - function to run
 */ function defer(fn) {
    var nextTick = typeof setImmediate == 'function' ? setImmediate : typeof process == 'object' && typeof process.nextTick == 'function' ? process.nextTick : null;
    if (nextTick) {
        nextTick(fn);
    } else {
        setTimeout(fn, 0);
    }
}
}}),
"[project]/node_modules/asynckit/lib/async.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var defer = __turbopack_context__.r("[project]/node_modules/asynckit/lib/defer.js [app-route] (ecmascript)");
// API
module.exports = async;
/**
 * Runs provided callback asynchronously
 * even if callback itself is not
 *
 * @param   {function} callback - callback to invoke
 * @returns {function} - augmented callback
 */ function async(callback) {
    var isAsync = false;
    // check if async happened
    defer(function() {
        isAsync = true;
    });
    return function async_callback(err, result) {
        if (isAsync) {
            callback(err, result);
        } else {
            defer(function nextTick_callback() {
                callback(err, result);
            });
        }
    };
}
}}),
"[project]/node_modules/asynckit/lib/abort.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
// API
module.exports = abort;
/**
 * Aborts leftover active jobs
 *
 * @param {object} state - current state object
 */ function abort(state) {
    Object.keys(state.jobs).forEach(clean.bind(state));
    // reset leftover jobs
    state.jobs = {};
}
/**
 * Cleans up leftover job by invoking abort function for the provided job id
 *
 * @this  state
 * @param {string|number} key - job id to abort
 */ function clean(key) {
    if (typeof this.jobs[key] == 'function') {
        this.jobs[key]();
    }
}
}}),
"[project]/node_modules/asynckit/lib/iterate.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var async = __turbopack_context__.r("[project]/node_modules/asynckit/lib/async.js [app-route] (ecmascript)"), abort = __turbopack_context__.r("[project]/node_modules/asynckit/lib/abort.js [app-route] (ecmascript)");
// API
module.exports = iterate;
/**
 * Iterates over each job object
 *
 * @param {array|object} list - array or object (named list) to iterate over
 * @param {function} iterator - iterator to run
 * @param {object} state - current job status
 * @param {function} callback - invoked when all elements processed
 */ function iterate(list, iterator, state, callback) {
    // store current index
    var key = state['keyedList'] ? state['keyedList'][state.index] : state.index;
    state.jobs[key] = runJob(iterator, key, list[key], function(error, output) {
        // don't repeat yourself
        // skip secondary callbacks
        if (!(key in state.jobs)) {
            return;
        }
        // clean up jobs
        delete state.jobs[key];
        if (error) {
            // don't process rest of the results
            // stop still active jobs
            // and reset the list
            abort(state);
        } else {
            state.results[key] = output;
        }
        // return salvaged results
        callback(error, state.results);
    });
}
/**
 * Runs iterator over provided job element
 *
 * @param   {function} iterator - iterator to invoke
 * @param   {string|number} key - key/index of the element in the list of jobs
 * @param   {mixed} item - job description
 * @param   {function} callback - invoked after iterator is done with the job
 * @returns {function|mixed} - job abort function or something else
 */ function runJob(iterator, key, item, callback) {
    var aborter;
    // allow shortcut if iterator expects only two arguments
    if (iterator.length == 2) {
        aborter = iterator(item, async(callback));
    } else {
        aborter = iterator(item, key, async(callback));
    }
    return aborter;
}
}}),
"[project]/node_modules/asynckit/lib/state.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
// API
module.exports = state;
/**
 * Creates initial state object
 * for iteration over list
 *
 * @param   {array|object} list - list to iterate over
 * @param   {function|null} sortMethod - function to use for keys sort,
 *                                     or `null` to keep them as is
 * @returns {object} - initial state object
 */ function state(list, sortMethod) {
    var isNamedList = !Array.isArray(list), initState = {
        index: 0,
        keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
        jobs: {},
        results: isNamedList ? {} : [],
        size: isNamedList ? Object.keys(list).length : list.length
    };
    if (sortMethod) {
        // sort array keys based on it's values
        // sort object's keys just on own merit
        initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
            return sortMethod(list[a], list[b]);
        });
    }
    return initState;
}
}}),
"[project]/node_modules/asynckit/lib/terminator.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var abort = __turbopack_context__.r("[project]/node_modules/asynckit/lib/abort.js [app-route] (ecmascript)"), async = __turbopack_context__.r("[project]/node_modules/asynckit/lib/async.js [app-route] (ecmascript)");
// API
module.exports = terminator;
/**
 * Terminates jobs in the attached state context
 *
 * @this  AsyncKitState#
 * @param {function} callback - final callback to invoke after termination
 */ function terminator(callback) {
    if (!Object.keys(this.jobs).length) {
        return;
    }
    // fast forward iteration index
    this.index = this.size;
    // abort jobs
    abort(this);
    // send back results we have so far
    async(callback)(null, this.results);
}
}}),
"[project]/node_modules/asynckit/parallel.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var iterate = __turbopack_context__.r("[project]/node_modules/asynckit/lib/iterate.js [app-route] (ecmascript)"), initState = __turbopack_context__.r("[project]/node_modules/asynckit/lib/state.js [app-route] (ecmascript)"), terminator = __turbopack_context__.r("[project]/node_modules/asynckit/lib/terminator.js [app-route] (ecmascript)");
// Public API
module.exports = parallel;
/**
 * Runs iterator over provided array elements in parallel
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */ function parallel(list, iterator, callback) {
    var state = initState(list);
    while(state.index < (state['keyedList'] || list).length){
        iterate(list, iterator, state, function(error, result) {
            if (error) {
                callback(error, result);
                return;
            }
            // looks like it's the last one
            if (Object.keys(state.jobs).length === 0) {
                callback(null, state.results);
                return;
            }
        });
        state.index++;
    }
    return terminator.bind(state, callback);
}
}}),
"[project]/node_modules/asynckit/serialOrdered.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var iterate = __turbopack_context__.r("[project]/node_modules/asynckit/lib/iterate.js [app-route] (ecmascript)"), initState = __turbopack_context__.r("[project]/node_modules/asynckit/lib/state.js [app-route] (ecmascript)"), terminator = __turbopack_context__.r("[project]/node_modules/asynckit/lib/terminator.js [app-route] (ecmascript)");
// Public API
module.exports = serialOrdered;
// sorting helpers
module.exports.ascending = ascending;
module.exports.descending = descending;
/**
 * Runs iterator over provided sorted array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} sortMethod - custom sort function
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */ function serialOrdered(list, iterator, sortMethod, callback) {
    var state = initState(list, sortMethod);
    iterate(list, iterator, state, function iteratorHandler(error, result) {
        if (error) {
            callback(error, result);
            return;
        }
        state.index++;
        // are we there yet?
        if (state.index < (state['keyedList'] || list).length) {
            iterate(list, iterator, state, iteratorHandler);
            return;
        }
        // done here
        callback(null, state.results);
    });
    return terminator.bind(state, callback);
}
/*
 * -- Sort methods
 */ /**
 * sort helper to sort array elements in ascending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */ function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
}
/**
 * sort helper to sort array elements in descending order
 *
 * @param   {mixed} a - an item to compare
 * @param   {mixed} b - an item to compare
 * @returns {number} - comparison result
 */ function descending(a, b) {
    return -1 * ascending(a, b);
}
}}),
"[project]/node_modules/asynckit/serial.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var serialOrdered = __turbopack_context__.r("[project]/node_modules/asynckit/serialOrdered.js [app-route] (ecmascript)");
// Public API
module.exports = serial;
/**
 * Runs iterator over provided array elements in series
 *
 * @param   {array|object} list - array or object (named list) to iterate over
 * @param   {function} iterator - iterator to run
 * @param   {function} callback - invoked when all elements processed
 * @returns {function} - jobs terminator
 */ function serial(list, iterator, callback) {
    return serialOrdered(list, iterator, null, callback);
}
}}),
"[project]/node_modules/asynckit/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
module.exports = {
    parallel: __turbopack_context__.r("[project]/node_modules/asynckit/parallel.js [app-route] (ecmascript)"),
    serial: __turbopack_context__.r("[project]/node_modules/asynckit/serial.js [app-route] (ecmascript)"),
    serialOrdered: __turbopack_context__.r("[project]/node_modules/asynckit/serialOrdered.js [app-route] (ecmascript)")
};
}}),
"[project]/node_modules/es-object-atoms/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('.')} */ module.exports = Object;
}}),
"[project]/node_modules/es-errors/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('.')} */ module.exports = Error;
}}),
"[project]/node_modules/es-errors/eval.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./eval')} */ module.exports = EvalError;
}}),
"[project]/node_modules/es-errors/range.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./range')} */ module.exports = RangeError;
}}),
"[project]/node_modules/es-errors/ref.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./ref')} */ module.exports = ReferenceError;
}}),
"[project]/node_modules/es-errors/syntax.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./syntax')} */ module.exports = SyntaxError;
}}),
"[project]/node_modules/es-errors/type.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./type')} */ module.exports = TypeError;
}}),
"[project]/node_modules/es-errors/uri.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./uri')} */ module.exports = URIError;
}}),
"[project]/node_modules/math-intrinsics/abs.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./abs')} */ module.exports = Math.abs;
}}),
"[project]/node_modules/math-intrinsics/floor.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./floor')} */ module.exports = Math.floor;
}}),
"[project]/node_modules/math-intrinsics/max.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./max')} */ module.exports = Math.max;
}}),
"[project]/node_modules/math-intrinsics/min.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./min')} */ module.exports = Math.min;
}}),
"[project]/node_modules/math-intrinsics/pow.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./pow')} */ module.exports = Math.pow;
}}),
"[project]/node_modules/math-intrinsics/round.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./round')} */ module.exports = Math.round;
}}),
"[project]/node_modules/math-intrinsics/isNaN.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./isNaN')} */ module.exports = Number.isNaN || function isNaN(a) {
    return a !== a;
};
}}),
"[project]/node_modules/math-intrinsics/sign.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var $isNaN = __turbopack_context__.r("[project]/node_modules/math-intrinsics/isNaN.js [app-route] (ecmascript)");
/** @type {import('./sign')} */ module.exports = function sign(number) {
    if ($isNaN(number) || number === 0) {
        return number;
    }
    return number < 0 ? -1 : +1;
};
}}),
"[project]/node_modules/gopd/gOPD.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./gOPD')} */ module.exports = Object.getOwnPropertyDescriptor;
}}),
"[project]/node_modules/gopd/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('.')} */ var $gOPD = __turbopack_context__.r("[project]/node_modules/gopd/gOPD.js [app-route] (ecmascript)");
if ($gOPD) {
    try {
        $gOPD([], 'length');
    } catch (e) {
        // IE 8 has a broken gOPD
        $gOPD = null;
    }
}
module.exports = $gOPD;
}}),
"[project]/node_modules/es-define-property/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('.')} */ var $defineProperty = Object.defineProperty || false;
if ($defineProperty) {
    try {
        $defineProperty({}, 'a', {
            value: 1
        });
    } catch (e) {
        // IE 8 has a broken defineProperty
        $defineProperty = false;
    }
}
module.exports = $defineProperty;
}}),
"[project]/node_modules/has-symbols/shams.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./shams')} */ /* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') {
        return false;
    }
    if (typeof Symbol.iterator === 'symbol') {
        return true;
    }
    /** @type {{ [k in symbol]?: unknown }} */ var obj = {};
    var sym = Symbol('test');
    var symObj = Object(sym);
    if (typeof sym === 'string') {
        return false;
    }
    if (Object.prototype.toString.call(sym) !== '[object Symbol]') {
        return false;
    }
    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') {
        return false;
    }
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(var _ in obj){
        return false;
    } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) {
        return false;
    }
    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
        return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === 'function') {
        // eslint-disable-next-line no-extra-parens
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
            return false;
        }
    }
    return true;
};
}}),
"[project]/node_modules/has-symbols/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __turbopack_context__.r("[project]/node_modules/has-symbols/shams.js [app-route] (ecmascript)");
/** @type {import('.')} */ module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== 'function') {
        return false;
    }
    if (typeof Symbol !== 'function') {
        return false;
    }
    if (typeof origSymbol('foo') !== 'symbol') {
        return false;
    }
    if (typeof Symbol('bar') !== 'symbol') {
        return false;
    }
    return hasSymbolSham();
};
}}),
"[project]/node_modules/get-proto/Reflect.getPrototypeOf.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./Reflect.getPrototypeOf')} */ module.exports = typeof Reflect !== 'undefined' && Reflect.getPrototypeOf || null;
}}),
"[project]/node_modules/get-proto/Object.getPrototypeOf.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var $Object = __turbopack_context__.r("[project]/node_modules/es-object-atoms/index.js [app-route] (ecmascript)");
/** @type {import('./Object.getPrototypeOf')} */ module.exports = $Object.getPrototypeOf || null;
}}),
"[project]/node_modules/get-proto/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var reflectGetProto = __turbopack_context__.r("[project]/node_modules/get-proto/Reflect.getPrototypeOf.js [app-route] (ecmascript)");
var originalGetProto = __turbopack_context__.r("[project]/node_modules/get-proto/Object.getPrototypeOf.js [app-route] (ecmascript)");
var getDunderProto = __turbopack_context__.r("[project]/node_modules/dunder-proto/get.js [app-route] (ecmascript)");
/** @type {import('.')} */ module.exports = reflectGetProto ? function getProto(O) {
    // @ts-expect-error TS can't narrow inside a closure, for some reason
    return reflectGetProto(O);
} : originalGetProto ? function getProto(O) {
    if (!O || typeof O !== 'object' && typeof O !== 'function') {
        throw new TypeError('getProto: not an object');
    }
    // @ts-expect-error TS can't narrow inside a closure, for some reason
    return originalGetProto(O);
} : getDunderProto ? function getProto(O) {
    // @ts-expect-error TS can't narrow inside a closure, for some reason
    return getDunderProto(O);
} : null;
}}),
"[project]/node_modules/function-bind/implementation.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';
var concatty = function concatty(a, b) {
    var arr = [];
    for(var i = 0; i < a.length; i += 1){
        arr[i] = a[i];
    }
    for(var j = 0; j < b.length; j += 1){
        arr[j + a.length] = b[j];
    }
    return arr;
};
var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for(var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1){
        arr[j] = arrLike[i];
    }
    return arr;
};
var joiny = function(arr, joiner) {
    var str = '';
    for(var i = 0; i < arr.length; i += 1){
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, concatty(args, arguments));
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(that, concatty(args, arguments));
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++){
        boundArgs[i] = '$' + i;
    }
    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};
}}),
"[project]/node_modules/function-bind/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var implementation = __turbopack_context__.r("[project]/node_modules/function-bind/implementation.js [app-route] (ecmascript)");
module.exports = Function.prototype.bind || implementation;
}}),
"[project]/node_modules/call-bind-apply-helpers/functionCall.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./functionCall')} */ module.exports = Function.prototype.call;
}}),
"[project]/node_modules/call-bind-apply-helpers/functionApply.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./functionApply')} */ module.exports = Function.prototype.apply;
}}),
"[project]/node_modules/call-bind-apply-helpers/reflectApply.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
/** @type {import('./reflectApply')} */ module.exports = typeof Reflect !== 'undefined' && Reflect && Reflect.apply;
}}),
"[project]/node_modules/call-bind-apply-helpers/actualApply.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var bind = __turbopack_context__.r("[project]/node_modules/function-bind/index.js [app-route] (ecmascript)");
var $apply = __turbopack_context__.r("[project]/node_modules/call-bind-apply-helpers/functionApply.js [app-route] (ecmascript)");
var $call = __turbopack_context__.r("[project]/node_modules/call-bind-apply-helpers/functionCall.js [app-route] (ecmascript)");
var $reflectApply = __turbopack_context__.r("[project]/node_modules/call-bind-apply-helpers/reflectApply.js [app-route] (ecmascript)");
/** @type {import('./actualApply')} */ module.exports = $reflectApply || bind.call($call, $apply);
}}),
"[project]/node_modules/call-bind-apply-helpers/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var bind = __turbopack_context__.r("[project]/node_modules/function-bind/index.js [app-route] (ecmascript)");
var $TypeError = __turbopack_context__.r("[project]/node_modules/es-errors/type.js [app-route] (ecmascript)");
var $call = __turbopack_context__.r("[project]/node_modules/call-bind-apply-helpers/functionCall.js [app-route] (ecmascript)");
var $actualApply = __turbopack_context__.r("[project]/node_modules/call-bind-apply-helpers/actualApply.js [app-route] (ecmascript)");
/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */ module.exports = function callBindBasic(args) {
    if (args.length < 1 || typeof args[0] !== 'function') {
        throw new $TypeError('a function is required');
    }
    return $actualApply(bind, $call, args);
};
}}),
"[project]/node_modules/dunder-proto/get.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var callBind = __turbopack_context__.r("[project]/node_modules/call-bind-apply-helpers/index.js [app-route] (ecmascript)");
var gOPD = __turbopack_context__.r("[project]/node_modules/gopd/index.js [app-route] (ecmascript)");
var hasProtoAccessor;
try {
    // eslint-disable-next-line no-extra-parens, no-proto
    hasProtoAccessor = /** @type {{ __proto__?: typeof Array.prototype }} */ [].__proto__ === Array.prototype;
} catch (e) {
    if (!e || typeof e !== 'object' || !('code' in e) || e.code !== 'ERR_PROTO_ACCESS') {
        throw e;
    }
}
// eslint-disable-next-line no-extra-parens
var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, '__proto__');
var $Object = Object;
var $getPrototypeOf = $Object.getPrototypeOf;
/** @type {import('./get')} */ module.exports = desc && typeof desc.get === 'function' ? callBind([
    desc.get
]) : typeof $getPrototypeOf === 'function' ? /** @type {import('./get')} */ function getDunder(value) {
    // eslint-disable-next-line eqeqeq
    return $getPrototypeOf(value == null ? value : $Object(value));
} : false;
}}),
"[project]/node_modules/hasown/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = __turbopack_context__.r("[project]/node_modules/function-bind/index.js [app-route] (ecmascript)");
/** @type {import('.')} */ module.exports = bind.call(call, $hasOwn);
}}),
"[project]/node_modules/get-intrinsic/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var undefined1;
var $Object = __turbopack_context__.r("[project]/node_modules/es-object-atoms/index.js [app-route] (ecmascript)");
var $Error = __turbopack_context__.r("[project]/node_modules/es-errors/index.js [app-route] (ecmascript)");
var $EvalError = __turbopack_context__.r("[project]/node_modules/es-errors/eval.js [app-route] (ecmascript)");
var $RangeError = __turbopack_context__.r("[project]/node_modules/es-errors/range.js [app-route] (ecmascript)");
var $ReferenceError = __turbopack_context__.r("[project]/node_modules/es-errors/ref.js [app-route] (ecmascript)");
var $SyntaxError = __turbopack_context__.r("[project]/node_modules/es-errors/syntax.js [app-route] (ecmascript)");
var $TypeError = __turbopack_context__.r("[project]/node_modules/es-errors/type.js [app-route] (ecmascript)");
var $URIError = __turbopack_context__.r("[project]/node_modules/es-errors/uri.js [app-route] (ecmascript)");
var abs = __turbopack_context__.r("[project]/node_modules/math-intrinsics/abs.js [app-route] (ecmascript)");
var floor = __turbopack_context__.r("[project]/node_modules/math-intrinsics/floor.js [app-route] (ecmascript)");
var max = __turbopack_context__.r("[project]/node_modules/math-intrinsics/max.js [app-route] (ecmascript)");
var min = __turbopack_context__.r("[project]/node_modules/math-intrinsics/min.js [app-route] (ecmascript)");
var pow = __turbopack_context__.r("[project]/node_modules/math-intrinsics/pow.js [app-route] (ecmascript)");
var round = __turbopack_context__.r("[project]/node_modules/math-intrinsics/round.js [app-route] (ecmascript)");
var sign = __turbopack_context__.r("[project]/node_modules/math-intrinsics/sign.js [app-route] (ecmascript)");
var $Function = Function;
// eslint-disable-next-line consistent-return
var getEvalledConstructor = function(expressionSyntax) {
    try {
        return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {}
};
var $gOPD = __turbopack_context__.r("[project]/node_modules/gopd/index.js [app-route] (ecmascript)");
var $defineProperty = __turbopack_context__.r("[project]/node_modules/es-define-property/index.js [app-route] (ecmascript)");
var throwTypeError = function() {
    throw new $TypeError();
};
var ThrowTypeError = $gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $gOPD(arguments, 'callee').get;
        } catch (gOPDthrows) {
            return throwTypeError;
        }
    }
}() : throwTypeError;
var hasSymbols = __turbopack_context__.r("[project]/node_modules/has-symbols/index.js [app-route] (ecmascript)")();
var getProto = __turbopack_context__.r("[project]/node_modules/get-proto/index.js [app-route] (ecmascript)");
var $ObjectGPO = __turbopack_context__.r("[project]/node_modules/get-proto/Object.getPrototypeOf.js [app-route] (ecmascript)");
var $ReflectGPO = __turbopack_context__.r("[project]/node_modules/get-proto/Reflect.getPrototypeOf.js [app-route] (ecmascript)");
var $apply = __turbopack_context__.r("[project]/node_modules/call-bind-apply-helpers/functionApply.js [app-route] (ecmascript)");
var $call = __turbopack_context__.r("[project]/node_modules/call-bind-apply-helpers/functionCall.js [app-route] (ecmascript)");
var needsEval = {};
var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);
var INTRINSICS = {
    __proto__: null,
    '%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
    '%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
    '%AsyncFromSyncIteratorPrototype%': undefined,
    '%AsyncFunction%': needsEval,
    '%AsyncGenerator%': needsEval,
    '%AsyncGeneratorFunction%': needsEval,
    '%AsyncIteratorPrototype%': needsEval,
    '%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
    '%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
    '%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': $Error,
    '%eval%': eval,
    '%EvalError%': $EvalError,
    '%Float16Array%': typeof Float16Array === 'undefined' ? undefined : Float16Array,
    '%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
    '%Function%': $Function,
    '%GeneratorFunction%': needsEval,
    '%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
    '%JSON%': typeof JSON === 'object' ? JSON : undefined,
    '%Map%': typeof Map === 'undefined' ? undefined : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': $Object,
    '%Object.getOwnPropertyDescriptor%': $gOPD,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
    '%RangeError%': $RangeError,
    '%ReferenceError%': $ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? undefined : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
    '%Symbol%': hasSymbols ? Symbol : undefined,
    '%SyntaxError%': $SyntaxError,
    '%ThrowTypeError%': ThrowTypeError,
    '%TypedArray%': TypedArray,
    '%TypeError%': $TypeError,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
    '%URIError%': $URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,
    '%Function.prototype.call%': $call,
    '%Function.prototype.apply%': $apply,
    '%Object.defineProperty%': $defineProperty,
    '%Object.getPrototypeOf%': $ObjectGPO,
    '%Math.abs%': abs,
    '%Math.floor%': floor,
    '%Math.max%': max,
    '%Math.min%': min,
    '%Math.pow%': pow,
    '%Math.round%': round,
    '%Math.sign%': sign,
    '%Reflect.getPrototypeOf%': $ReflectGPO
};
if (getProto) {
    try {
        null.error; // eslint-disable-line no-unused-expressions
    } catch (e) {
        // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
        var errorProto = getProto(getProto(e));
        INTRINSICS['%Error.prototype%'] = errorProto;
    }
}
var doEval = function doEval(name) {
    var value;
    if (name === '%AsyncFunction%') {
        value = getEvalledConstructor('async function () {}');
    } else if (name === '%GeneratorFunction%') {
        value = getEvalledConstructor('function* () {}');
    } else if (name === '%AsyncGeneratorFunction%') {
        value = getEvalledConstructor('async function* () {}');
    } else if (name === '%AsyncGenerator%') {
        var fn = doEval('%AsyncGeneratorFunction%');
        if (fn) {
            value = fn.prototype;
        }
    } else if (name === '%AsyncIteratorPrototype%') {
        var gen = doEval('%AsyncGenerator%');
        if (gen && getProto) {
            value = getProto(gen.prototype);
        }
    }
    INTRINSICS[name] = value;
    return value;
};
var LEGACY_ALIASES = {
    __proto__: null,
    '%ArrayBufferPrototype%': [
        'ArrayBuffer',
        'prototype'
    ],
    '%ArrayPrototype%': [
        'Array',
        'prototype'
    ],
    '%ArrayProto_entries%': [
        'Array',
        'prototype',
        'entries'
    ],
    '%ArrayProto_forEach%': [
        'Array',
        'prototype',
        'forEach'
    ],
    '%ArrayProto_keys%': [
        'Array',
        'prototype',
        'keys'
    ],
    '%ArrayProto_values%': [
        'Array',
        'prototype',
        'values'
    ],
    '%AsyncFunctionPrototype%': [
        'AsyncFunction',
        'prototype'
    ],
    '%AsyncGenerator%': [
        'AsyncGeneratorFunction',
        'prototype'
    ],
    '%AsyncGeneratorPrototype%': [
        'AsyncGeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%BooleanPrototype%': [
        'Boolean',
        'prototype'
    ],
    '%DataViewPrototype%': [
        'DataView',
        'prototype'
    ],
    '%DatePrototype%': [
        'Date',
        'prototype'
    ],
    '%ErrorPrototype%': [
        'Error',
        'prototype'
    ],
    '%EvalErrorPrototype%': [
        'EvalError',
        'prototype'
    ],
    '%Float32ArrayPrototype%': [
        'Float32Array',
        'prototype'
    ],
    '%Float64ArrayPrototype%': [
        'Float64Array',
        'prototype'
    ],
    '%FunctionPrototype%': [
        'Function',
        'prototype'
    ],
    '%Generator%': [
        'GeneratorFunction',
        'prototype'
    ],
    '%GeneratorPrototype%': [
        'GeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%Int8ArrayPrototype%': [
        'Int8Array',
        'prototype'
    ],
    '%Int16ArrayPrototype%': [
        'Int16Array',
        'prototype'
    ],
    '%Int32ArrayPrototype%': [
        'Int32Array',
        'prototype'
    ],
    '%JSONParse%': [
        'JSON',
        'parse'
    ],
    '%JSONStringify%': [
        'JSON',
        'stringify'
    ],
    '%MapPrototype%': [
        'Map',
        'prototype'
    ],
    '%NumberPrototype%': [
        'Number',
        'prototype'
    ],
    '%ObjectPrototype%': [
        'Object',
        'prototype'
    ],
    '%ObjProto_toString%': [
        'Object',
        'prototype',
        'toString'
    ],
    '%ObjProto_valueOf%': [
        'Object',
        'prototype',
        'valueOf'
    ],
    '%PromisePrototype%': [
        'Promise',
        'prototype'
    ],
    '%PromiseProto_then%': [
        'Promise',
        'prototype',
        'then'
    ],
    '%Promise_all%': [
        'Promise',
        'all'
    ],
    '%Promise_reject%': [
        'Promise',
        'reject'
    ],
    '%Promise_resolve%': [
        'Promise',
        'resolve'
    ],
    '%RangeErrorPrototype%': [
        'RangeError',
        'prototype'
    ],
    '%ReferenceErrorPrototype%': [
        'ReferenceError',
        'prototype'
    ],
    '%RegExpPrototype%': [
        'RegExp',
        'prototype'
    ],
    '%SetPrototype%': [
        'Set',
        'prototype'
    ],
    '%SharedArrayBufferPrototype%': [
        'SharedArrayBuffer',
        'prototype'
    ],
    '%StringPrototype%': [
        'String',
        'prototype'
    ],
    '%SymbolPrototype%': [
        'Symbol',
        'prototype'
    ],
    '%SyntaxErrorPrototype%': [
        'SyntaxError',
        'prototype'
    ],
    '%TypedArrayPrototype%': [
        'TypedArray',
        'prototype'
    ],
    '%TypeErrorPrototype%': [
        'TypeError',
        'prototype'
    ],
    '%Uint8ArrayPrototype%': [
        'Uint8Array',
        'prototype'
    ],
    '%Uint8ClampedArrayPrototype%': [
        'Uint8ClampedArray',
        'prototype'
    ],
    '%Uint16ArrayPrototype%': [
        'Uint16Array',
        'prototype'
    ],
    '%Uint32ArrayPrototype%': [
        'Uint32Array',
        'prototype'
    ],
    '%URIErrorPrototype%': [
        'URIError',
        'prototype'
    ],
    '%WeakMapPrototype%': [
        'WeakMap',
        'prototype'
    ],
    '%WeakSetPrototype%': [
        'WeakSet',
        'prototype'
    ]
};
var bind = __turbopack_context__.r("[project]/node_modules/function-bind/index.js [app-route] (ecmascript)");
var hasOwn = __turbopack_context__.r("[project]/node_modules/hasown/index.js [app-route] (ecmascript)");
var $concat = bind.call($call, Array.prototype.concat);
var $spliceApply = bind.call($apply, Array.prototype.splice);
var $replace = bind.call($call, String.prototype.replace);
var $strSlice = bind.call($call, String.prototype.slice);
var $exec = bind.call($call, RegExp.prototype.exec);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === '%' && last !== '%') {
        throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
    } else if (last === '%' && first !== '%') {
        throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
    }
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
    });
    return result;
};
/* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = '%' + alias[0] + '%';
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
            value = doEval(intrinsicName);
        }
        if (typeof value === 'undefined' && !allowMissing) {
            throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
        }
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) {
        throw new $TypeError('intrinsic name must be a non-empty string');
    }
    if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
        throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
    }
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) {
            throw new $SyntaxError('property names with quotes must have matching quotes');
        }
        if (part === 'constructor' || !isOwn) {
            skipFurtherCaching = true;
        }
        intrinsicBaseName += '.' + part;
        intrinsicRealName = '%' + intrinsicBaseName + '%';
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
            value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) {
                    throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                }
                return void undefined;
            }
            if ($gOPD && i + 1 >= parts.length) {
                var desc = $gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
                    value = desc.get;
                } else {
                    value = value[part];
                }
            } else {
                isOwn = hasOwn(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) {
                INTRINSICS[intrinsicRealName] = value;
            }
        }
    }
    return value;
};
}}),
"[project]/node_modules/has-tostringtag/shams.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var hasSymbols = __turbopack_context__.r("[project]/node_modules/has-symbols/shams.js [app-route] (ecmascript)");
/** @type {import('.')} */ module.exports = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
};
}}),
"[project]/node_modules/es-set-tostringtag/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var GetIntrinsic = __turbopack_context__.r("[project]/node_modules/get-intrinsic/index.js [app-route] (ecmascript)");
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var hasToStringTag = __turbopack_context__.r("[project]/node_modules/has-tostringtag/shams.js [app-route] (ecmascript)")();
var hasOwn = __turbopack_context__.r("[project]/node_modules/hasown/index.js [app-route] (ecmascript)");
var $TypeError = __turbopack_context__.r("[project]/node_modules/es-errors/type.js [app-route] (ecmascript)");
var toStringTag = hasToStringTag ? Symbol.toStringTag : null;
/** @type {import('.')} */ module.exports = function setToStringTag(object, value) {
    var overrideIfSet = arguments.length > 2 && !!arguments[2] && arguments[2].force;
    var nonConfigurable = arguments.length > 2 && !!arguments[2] && arguments[2].nonConfigurable;
    if (typeof overrideIfSet !== 'undefined' && typeof overrideIfSet !== 'boolean' || typeof nonConfigurable !== 'undefined' && typeof nonConfigurable !== 'boolean') {
        throw new $TypeError('if provided, the `overrideIfSet` and `nonConfigurable` options must be booleans');
    }
    if (toStringTag && (overrideIfSet || !hasOwn(object, toStringTag))) {
        if ($defineProperty) {
            $defineProperty(object, toStringTag, {
                configurable: !nonConfigurable,
                enumerable: false,
                value: value,
                writable: false
            });
        } else {
            object[toStringTag] = value; // eslint-disable-line no-param-reassign
        }
    }
};
}}),
"[project]/node_modules/form-data/lib/populate.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
// populates missing values
module.exports = function(dst, src) {
    Object.keys(src).forEach(function(prop) {
        dst[prop] = dst[prop] || src[prop];
    });
    return dst;
};
}}),
"[project]/node_modules/form-data/lib/form_data.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var CombinedStream = __turbopack_context__.r("[project]/node_modules/combined-stream/lib/combined_stream.js [app-route] (ecmascript)");
var util = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
var path = __turbopack_context__.r("[externals]/path [external] (path, cjs)");
var http = __turbopack_context__.r("[externals]/http [external] (http, cjs)");
var https = __turbopack_context__.r("[externals]/https [external] (https, cjs)");
var parseUrl = __turbopack_context__.r("[externals]/url [external] (url, cjs)").parse;
var fs = __turbopack_context__.r("[externals]/fs [external] (fs, cjs)");
var Stream = __turbopack_context__.r("[externals]/stream [external] (stream, cjs)").Stream;
var mime = __turbopack_context__.r("[project]/node_modules/form-data/node_modules/mime-types/index.js [app-route] (ecmascript)");
var asynckit = __turbopack_context__.r("[project]/node_modules/asynckit/index.js [app-route] (ecmascript)");
var setToStringTag = __turbopack_context__.r("[project]/node_modules/es-set-tostringtag/index.js [app-route] (ecmascript)");
var populate = __turbopack_context__.r("[project]/node_modules/form-data/lib/populate.js [app-route] (ecmascript)");
// Public API
module.exports = FormData;
// make it a Stream
util.inherits(FormData, CombinedStream);
/**
 * Create readable "multipart/form-data" streams.
 * Can be used to submit forms
 * and file uploads to other web applications.
 *
 * @constructor
 * @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
 */ function FormData(options) {
    if (!(this instanceof FormData)) {
        return new FormData(options);
    }
    this._overheadLength = 0;
    this._valueLength = 0;
    this._valuesToMeasure = [];
    CombinedStream.call(this);
    options = options || {};
    for(var option in options){
        this[option] = options[option];
    }
}
FormData.LINE_BREAK = '\r\n';
FormData.DEFAULT_CONTENT_TYPE = 'application/octet-stream';
FormData.prototype.append = function(field, value, options) {
    options = options || {};
    // allow filename as single option
    if (typeof options == 'string') {
        options = {
            filename: options
        };
    }
    var append = CombinedStream.prototype.append.bind(this);
    // all that streamy business can't handle numbers
    if (typeof value == 'number') {
        value = '' + value;
    }
    // https://github.com/felixge/node-form-data/issues/38
    if (Array.isArray(value)) {
        // Please convert your array into string
        // the way web server expects it
        this._error(new Error('Arrays are not supported.'));
        return;
    }
    var header = this._multiPartHeader(field, value, options);
    var footer = this._multiPartFooter();
    append(header);
    append(value);
    append(footer);
    // pass along options.knownLength
    this._trackLength(header, value, options);
};
FormData.prototype._trackLength = function(header, value, options) {
    var valueLength = 0;
    // used w/ getLengthSync(), when length is known.
    // e.g. for streaming directly from a remote server,
    // w/ a known file a size, and not wanting to wait for
    // incoming file to finish to get its size.
    if (options.knownLength != null) {
        valueLength += +options.knownLength;
    } else if (Buffer.isBuffer(value)) {
        valueLength = value.length;
    } else if (typeof value === 'string') {
        valueLength = Buffer.byteLength(value);
    }
    this._valueLength += valueLength;
    // @check why add CRLF? does this account for custom/multiple CRLFs?
    this._overheadLength += Buffer.byteLength(header) + FormData.LINE_BREAK.length;
    // empty or either doesn't have path or not an http response or not a stream
    if (!value || !value.path && !(value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) && !(value instanceof Stream)) {
        return;
    }
    // no need to bother with the length
    if (!options.knownLength) {
        this._valuesToMeasure.push(value);
    }
};
FormData.prototype._lengthRetriever = function(value, callback) {
    if (Object.prototype.hasOwnProperty.call(value, 'fd')) {
        // take read range into a account
        // `end` = Infinity –> read file till the end
        //
        // TODO: Looks like there is bug in Node fs.createReadStream
        // it doesn't respect `end` options without `start` options
        // Fix it when node fixes it.
        // https://github.com/joyent/node/issues/7819
        if (value.end != undefined && value.end != Infinity && value.start != undefined) {
            // when end specified
            // no need to calculate range
            // inclusive, starts with 0
            callback(null, value.end + 1 - (value.start ? value.start : 0));
        // not that fast snoopy
        } else {
            // still need to fetch file size from fs
            fs.stat(value.path, function(err, stat) {
                var fileSize;
                if (err) {
                    callback(err);
                    return;
                }
                // update final size based on the range options
                fileSize = stat.size - (value.start ? value.start : 0);
                callback(null, fileSize);
            });
        }
    // or http response
    } else if (Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {
        callback(null, +value.headers['content-length']);
    // or request stream http://github.com/mikeal/request
    } else if (Object.prototype.hasOwnProperty.call(value, 'httpModule')) {
        // wait till response come back
        value.on('response', function(response) {
            value.pause();
            callback(null, +response.headers['content-length']);
        });
        value.resume();
    // something else
    } else {
        callback('Unknown stream');
    }
};
FormData.prototype._multiPartHeader = function(field, value, options) {
    // custom header specified (as string)?
    // it becomes responsible for boundary
    // (e.g. to handle extra CRLFs on .NET servers)
    if (typeof options.header == 'string') {
        return options.header;
    }
    var contentDisposition = this._getContentDisposition(value, options);
    var contentType = this._getContentType(value, options);
    var contents = '';
    var headers = {
        // add custom disposition as third element or keep it two elements if not
        'Content-Disposition': [
            'form-data',
            'name="' + field + '"'
        ].concat(contentDisposition || []),
        // if no content type. allow it to be empty array
        'Content-Type': [].concat(contentType || [])
    };
    // allow custom headers.
    if (typeof options.header == 'object') {
        populate(headers, options.header);
    }
    var header;
    for(var prop in headers){
        if (Object.prototype.hasOwnProperty.call(headers, prop)) {
            header = headers[prop];
            // skip nullish headers.
            if (header == null) {
                continue;
            }
            // convert all headers to arrays.
            if (!Array.isArray(header)) {
                header = [
                    header
                ];
            }
            // add non-empty headers.
            if (header.length) {
                contents += prop + ': ' + header.join('; ') + FormData.LINE_BREAK;
            }
        }
    }
    return '--' + this.getBoundary() + FormData.LINE_BREAK + contents + FormData.LINE_BREAK;
};
FormData.prototype._getContentDisposition = function(value, options) {
    var filename, contentDisposition;
    if (typeof options.filepath === 'string') {
        // custom filepath for relative paths
        filename = path.normalize(options.filepath).replace(/\\/g, '/');
    } else if (options.filename || value.name || value.path) {
        // custom filename take precedence
        // formidable and the browser add a name property
        // fs- and request- streams have path property
        filename = path.basename(options.filename || value.name || value.path);
    } else if (value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {
        // or try http response
        filename = path.basename(value.client._httpMessage.path || '');
    }
    if (filename) {
        contentDisposition = 'filename="' + filename + '"';
    }
    return contentDisposition;
};
FormData.prototype._getContentType = function(value, options) {
    // use custom content-type above all
    var contentType = options.contentType;
    // or try `name` from formidable, browser
    if (!contentType && value.name) {
        contentType = mime.lookup(value.name);
    }
    // or try `path` from fs-, request- streams
    if (!contentType && value.path) {
        contentType = mime.lookup(value.path);
    }
    // or if it's http-reponse
    if (!contentType && value.readable && Object.prototype.hasOwnProperty.call(value, 'httpVersion')) {
        contentType = value.headers['content-type'];
    }
    // or guess it from the filepath or filename
    if (!contentType && (options.filepath || options.filename)) {
        contentType = mime.lookup(options.filepath || options.filename);
    }
    // fallback to the default content type if `value` is not simple value
    if (!contentType && typeof value == 'object') {
        contentType = FormData.DEFAULT_CONTENT_TYPE;
    }
    return contentType;
};
FormData.prototype._multiPartFooter = function() {
    return (function(next) {
        var footer = FormData.LINE_BREAK;
        var lastPart = this._streams.length === 0;
        if (lastPart) {
            footer += this._lastBoundary();
        }
        next(footer);
    }).bind(this);
};
FormData.prototype._lastBoundary = function() {
    return '--' + this.getBoundary() + '--' + FormData.LINE_BREAK;
};
FormData.prototype.getHeaders = function(userHeaders) {
    var header;
    var formHeaders = {
        'content-type': 'multipart/form-data; boundary=' + this.getBoundary()
    };
    for(header in userHeaders){
        if (Object.prototype.hasOwnProperty.call(userHeaders, header)) {
            formHeaders[header.toLowerCase()] = userHeaders[header];
        }
    }
    return formHeaders;
};
FormData.prototype.setBoundary = function(boundary) {
    this._boundary = boundary;
};
FormData.prototype.getBoundary = function() {
    if (!this._boundary) {
        this._generateBoundary();
    }
    return this._boundary;
};
FormData.prototype.getBuffer = function() {
    var dataBuffer = new Buffer.alloc(0);
    var boundary = this.getBoundary();
    // Create the form content. Add Line breaks to the end of data.
    for(var i = 0, len = this._streams.length; i < len; i++){
        if (typeof this._streams[i] !== 'function') {
            // Add content to the buffer.
            if (Buffer.isBuffer(this._streams[i])) {
                dataBuffer = Buffer.concat([
                    dataBuffer,
                    this._streams[i]
                ]);
            } else {
                dataBuffer = Buffer.concat([
                    dataBuffer,
                    Buffer.from(this._streams[i])
                ]);
            }
            // Add break after content.
            if (typeof this._streams[i] !== 'string' || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
                dataBuffer = Buffer.concat([
                    dataBuffer,
                    Buffer.from(FormData.LINE_BREAK)
                ]);
            }
        }
    }
    // Add the footer and return the Buffer object.
    return Buffer.concat([
        dataBuffer,
        Buffer.from(this._lastBoundary())
    ]);
};
FormData.prototype._generateBoundary = function() {
    // This generates a 50 character boundary similar to those used by Firefox.
    // They are optimized for boyer-moore parsing.
    var boundary = '--------------------------';
    for(var i = 0; i < 24; i++){
        boundary += Math.floor(Math.random() * 10).toString(16);
    }
    this._boundary = boundary;
};
// Note: getLengthSync DOESN'T calculate streams length
// As workaround one can calculate file size manually
// and add it as knownLength option
FormData.prototype.getLengthSync = function() {
    var knownLength = this._overheadLength + this._valueLength;
    // Don't get confused, there are 3 "internal" streams for each keyval pair
    // so it basically checks if there is any value added to the form
    if (this._streams.length) {
        knownLength += this._lastBoundary().length;
    }
    // https://github.com/form-data/form-data/issues/40
    if (!this.hasKnownLength()) {
        // Some async length retrievers are present
        // therefore synchronous length calculation is false.
        // Please use getLength(callback) to get proper length
        this._error(new Error('Cannot calculate proper length in synchronous way.'));
    }
    return knownLength;
};
// Public API to check if length of added values is known
// https://github.com/form-data/form-data/issues/196
// https://github.com/form-data/form-data/issues/262
FormData.prototype.hasKnownLength = function() {
    var hasKnownLength = true;
    if (this._valuesToMeasure.length) {
        hasKnownLength = false;
    }
    return hasKnownLength;
};
FormData.prototype.getLength = function(cb) {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
        knownLength += this._lastBoundary().length;
    }
    if (!this._valuesToMeasure.length) {
        process.nextTick(cb.bind(this, null, knownLength));
        return;
    }
    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
        if (err) {
            cb(err);
            return;
        }
        values.forEach(function(length) {
            knownLength += length;
        });
        cb(null, knownLength);
    });
};
FormData.prototype.submit = function(params, cb) {
    var request, options, defaults = {
        method: 'post'
    };
    // parse provided url if it's string
    // or treat it as options object
    if (typeof params == 'string') {
        params = parseUrl(params);
        options = populate({
            port: params.port,
            path: params.pathname,
            host: params.hostname,
            protocol: params.protocol
        }, defaults);
    // use custom params
    } else {
        options = populate(params, defaults);
        // if no port provided use default one
        if (!options.port) {
            options.port = options.protocol == 'https:' ? 443 : 80;
        }
    }
    // put that good code in getHeaders to some use
    options.headers = this.getHeaders(params.headers);
    // https if specified, fallback to http in any other case
    if (options.protocol == 'https:') {
        request = https.request(options);
    } else {
        request = http.request(options);
    }
    // get content length and fire away
    this.getLength((function(err, length) {
        if (err && err !== 'Unknown stream') {
            this._error(err);
            return;
        }
        // add content length
        if (length) {
            request.setHeader('Content-Length', length);
        }
        this.pipe(request);
        if (cb) {
            var onResponse;
            var callback = function(error, responce) {
                request.removeListener('error', callback);
                request.removeListener('response', onResponse);
                return cb.call(this, error, responce);
            };
            onResponse = callback.bind(this, null);
            request.on('error', callback);
            request.on('response', onResponse);
        }
    }).bind(this));
    return request;
};
FormData.prototype._error = function(err) {
    if (!this.error) {
        this.error = err;
        this.pause();
        this.emit('error', err);
    }
};
FormData.prototype.toString = function() {
    return '[object FormData]';
};
setToStringTag(FormData, 'FormData');
}}),
"[project]/node_modules/proxy-from-env/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
var parseUrl = __turbopack_context__.r("[externals]/url [external] (url, cjs)").parse;
var DEFAULT_PORTS = {
    ftp: 21,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
};
var stringEndsWith = String.prototype.endsWith || function(s) {
    return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
};
/**
 * @param {string|object} url - The URL, or the result from url.parse.
 * @return {string} The URL of the proxy that should handle the request to the
 *  given URL. If no proxy is set, this will be an empty string.
 */ function getProxyForUrl(url) {
    var parsedUrl = typeof url === 'string' ? parseUrl(url) : url || {};
    var proto = parsedUrl.protocol;
    var hostname = parsedUrl.host;
    var port = parsedUrl.port;
    if (typeof hostname !== 'string' || !hostname || typeof proto !== 'string') {
        return ''; // Don't proxy URLs without a valid scheme or host.
    }
    proto = proto.split(':', 1)[0];
    // Stripping ports in this way instead of using parsedUrl.hostname to make
    // sure that the brackets around IPv6 addresses are kept.
    hostname = hostname.replace(/:\d*$/, '');
    port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
    if (!shouldProxy(hostname, port)) {
        return ''; // Don't proxy URLs that match NO_PROXY.
    }
    var proxy = getEnv('npm_config_' + proto + '_proxy') || getEnv(proto + '_proxy') || getEnv('npm_config_proxy') || getEnv('all_proxy');
    if (proxy && proxy.indexOf('://') === -1) {
        // Missing scheme in proxy, default to the requested URL's scheme.
        proxy = proto + '://' + proxy;
    }
    return proxy;
}
/**
 * Determines whether a given URL should be proxied.
 *
 * @param {string} hostname - The host name of the URL.
 * @param {number} port - The effective port of the URL.
 * @returns {boolean} Whether the given URL should be proxied.
 * @private
 */ function shouldProxy(hostname, port) {
    var NO_PROXY = (getEnv('npm_config_no_proxy') || getEnv('no_proxy')).toLowerCase();
    if (!NO_PROXY) {
        return true; // Always proxy if NO_PROXY is not set.
    }
    if (NO_PROXY === '*') {
        return false; // Never proxy if wildcard is set.
    }
    return NO_PROXY.split(/[,\s]/).every(function(proxy) {
        if (!proxy) {
            return true; // Skip zero-length hosts.
        }
        var parsedProxy = proxy.match(/^(.+):(\d+)$/);
        var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
        var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
        if (parsedProxyPort && parsedProxyPort !== port) {
            return true; // Skip if ports don't match.
        }
        if (!/^[.*]/.test(parsedProxyHostname)) {
            // No wildcards, so stop proxying if there is an exact match.
            return hostname !== parsedProxyHostname;
        }
        if (parsedProxyHostname.charAt(0) === '*') {
            // Remove leading wildcard.
            parsedProxyHostname = parsedProxyHostname.slice(1);
        }
        // Stop proxying if the hostname ends with the no_proxy host.
        return !stringEndsWith.call(hostname, parsedProxyHostname);
    });
}
/**
 * Get the value for an environment variable.
 *
 * @param {string} key - The name of the environment variable.
 * @return {string} The value of the environment variable.
 * @private
 */ function getEnv(key) {
    return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';
}
exports.getProxyForUrl = getProxyForUrl;
}}),
"[project]/node_modules/ms/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * Helpers.
 */ var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */ module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === 'string' && val.length > 0) {
        return parse(val);
    } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */ function parse(str) {
    str = String(str);
    if (str.length > 100) {
        return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
        return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || 'ms').toLowerCase();
    switch(type){
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
            return n * y;
        case 'weeks':
        case 'week':
        case 'w':
            return n * w;
        case 'days':
        case 'day':
        case 'd':
            return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
            return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
            return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
            return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
            return n;
        default:
            return undefined;
    }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
    }
    if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
    }
    if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
    }
    if (msAbs >= s) {
        return Math.round(ms / s) + 's';
    }
    return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */ function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
    }
    if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
    }
    if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
    }
    if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
    }
    return ms + ' ms';
}
/**
 * Pluralization helper.
 */ function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}
}}),
"[project]/node_modules/debug/src/common.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */ function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = __turbopack_context__.r("[project]/node_modules/ms/index.js [app-route] (ecmascript)");
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key)=>{
        createDebug[key] = env[key];
    });
    /**
	* The currently active debug mode names, and names to skip.
	*/ createDebug.names = [];
    createDebug.skips = [];
    /**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/ createDebug.formatters = {};
    /**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/ function selectColor(namespace) {
        let hash = 0;
        for(let i = 0; i < namespace.length; i++){
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    /**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/ function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
            // Disabled?
            if (!debug.enabled) {
                return;
            }
            const self = debug;
            // Set `diff` timestamp
            const curr = Number(new Date());
            const ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);
            if (typeof args[0] !== 'string') {
                // Anything else let's inspect with %O
                args.unshift('%O');
            }
            // Apply any `formatters` transformations
            let index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format)=>{
                // If we encounter an escaped % then don't increase the array index
                if (match === '%%') {
                    return '%';
                }
                index++;
                const formatter = createDebug.formatters[format];
                if (typeof formatter === 'function') {
                    const val = args[index];
                    match = formatter.call(self, val);
                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                }
                return match;
            });
            // Apply env-specific formatting (colors, etc.)
            createDebug.formatArgs.call(self, args);
            const logFn = self.log || createDebug.log;
            logFn.apply(self, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.
        Object.defineProperty(debug, 'enabled', {
            enumerable: true,
            configurable: false,
            get: ()=>{
                if (enableOverride !== null) {
                    return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
            },
            set: (v)=>{
                enableOverride = v;
            }
        });
        // Env-specific initialization logic for debug instances
        if (typeof createDebug.init === 'function') {
            createDebug.init(debug);
        }
        return debug;
    }
    function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
    }
    /**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/ function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        const split = (typeof namespaces === 'string' ? namespaces : '').trim().replace(' ', ',').split(',').filter(Boolean);
        for (const ns of split){
            if (ns[0] === '-') {
                createDebug.skips.push(ns.slice(1));
            } else {
                createDebug.names.push(ns);
            }
        }
    }
    /**
	 * Checks if the given string matches a namespace template, honoring
	 * asterisks as wildcards.
	 *
	 * @param {String} search
	 * @param {String} template
	 * @return {Boolean}
	 */ function matchesTemplate(search, template) {
        let searchIndex = 0;
        let templateIndex = 0;
        let starIndex = -1;
        let matchIndex = 0;
        while(searchIndex < search.length){
            if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {
                // Match character or proceed with wildcard
                if (template[templateIndex] === '*') {
                    starIndex = templateIndex;
                    matchIndex = searchIndex;
                    templateIndex++; // Skip the '*'
                } else {
                    searchIndex++;
                    templateIndex++;
                }
            } else if (starIndex !== -1) {
                // Backtrack to the last '*' and try to match more characters
                templateIndex = starIndex + 1;
                matchIndex++;
                searchIndex = matchIndex;
            } else {
                return false; // No match
            }
        }
        // Handle trailing '*' in template
        while(templateIndex < template.length && template[templateIndex] === '*'){
            templateIndex++;
        }
        return templateIndex === template.length;
    }
    /**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/ function disable() {
        const namespaces = [
            ...createDebug.names,
            ...createDebug.skips.map((namespace)=>'-' + namespace)
        ].join(',');
        createDebug.enable('');
        return namespaces;
    }
    /**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/ function enabled(name) {
        for (const skip of createDebug.skips){
            if (matchesTemplate(name, skip)) {
                return false;
            }
        }
        for (const ns of createDebug.names){
            if (matchesTemplate(name, ns)) {
                return true;
            }
        }
        return false;
    }
    /**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/ function coerce(val) {
        if (val instanceof Error) {
            return val.stack || val.message;
        }
        return val;
    }
    /**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/ function destroy() {
        console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    }
    createDebug.enable(createDebug.load());
    return createDebug;
}
module.exports = setup;
}}),
"[project]/node_modules/debug/src/node.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * Module dependencies.
 */ const tty = __turbopack_context__.r("[externals]/tty [external] (tty, cjs)");
const util = __turbopack_context__.r("[externals]/util [external] (util, cjs)");
/**
 * This is the Node.js implementation of `debug()`.
 */ exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(()=>{}, 'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
/**
 * Colors.
 */ exports.colors = [
    6,
    2,
    3,
    4,
    5,
    1
];
try {
    // Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    // eslint-disable-next-line import/no-extraneous-dependencies
    const supportsColor = __turbopack_context__.r("[project]/node_modules/supports-color/index.js [app-route] (ecmascript)");
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
        exports.colors = [
            20,
            21,
            26,
            27,
            32,
            33,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            56,
            57,
            62,
            63,
            68,
            69,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            92,
            93,
            98,
            99,
            112,
            113,
            128,
            129,
            134,
            135,
            148,
            149,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            178,
            179,
            184,
            185,
            196,
            197,
            198,
            199,
            200,
            201,
            202,
            203,
            204,
            205,
            206,
            207,
            208,
            209,
            214,
            215,
            220,
            221
        ];
    }
} catch (error) {
// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}
/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */ exports.inspectOpts = Object.keys(process.env).filter((key)=>{
    return /^debug_/i.test(key);
}).reduce((obj, key)=>{
    // Camel-case
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k)=>{
        return k.toUpperCase();
    });
    // Coerce string value into JS value
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
        val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
        val = false;
    } else if (val === 'null') {
        val = null;
    } else {
        val = Number(val);
    }
    obj[prop] = val;
    return obj;
}, {});
/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */ function useColors() {
    return 'colors' in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
}
/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    const { namespace: name, useColors } = this;
    if (useColors) {
        const c = this.color;
        const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
        const prefix = `  ${colorCode};1m${name} \u001B[0m`;
        args[0] = prefix + args[0].split('\n').join('\n' + prefix);
        args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
    } else {
        args[0] = getDate() + name + ' ' + args[0];
    }
}
function getDate() {
    if (exports.inspectOpts.hideDate) {
        return '';
    }
    return new Date().toISOString() + ' ';
}
/**
 * Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
 */ function log(...args) {
    return process.stderr.write(util.formatWithOptions(exports.inspectOpts, ...args) + '\n');
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    if (namespaces) {
        process.env.DEBUG = namespaces;
    } else {
        // If you set a process.env field to null or undefined, it gets cast to the
        // string 'null' or 'undefined'. Just delete instead.
        delete process.env.DEBUG;
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    return process.env.DEBUG;
}
/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */ function init(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for(let i = 0; i < keys.length; i++){
        debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
}
module.exports = __turbopack_context__.r("[project]/node_modules/debug/src/common.js [app-route] (ecmascript)")(exports);
const { formatters } = module.exports;
/**
 * Map %o to `util.inspect()`, all on a single line.
 */ formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts).split('\n').map((str)=>str.trim()).join(' ');
};
/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */ formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util.inspect(v, this.inspectOpts);
};
}}),
"[project]/node_modules/debug/src/browser.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/* eslint-env browser */ /**
 * This is the web browser implementation of `debug()`.
 */ exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (()=>{
    let warned = false;
    return ()=>{
        if (!warned) {
            warned = true;
            console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
        }
    };
})();
/**
 * Colors.
 */ exports.colors = [
    '#0000CC',
    '#0000FF',
    '#0033CC',
    '#0033FF',
    '#0066CC',
    '#0066FF',
    '#0099CC',
    '#0099FF',
    '#00CC00',
    '#00CC33',
    '#00CC66',
    '#00CC99',
    '#00CCCC',
    '#00CCFF',
    '#3300CC',
    '#3300FF',
    '#3333CC',
    '#3333FF',
    '#3366CC',
    '#3366FF',
    '#3399CC',
    '#3399FF',
    '#33CC00',
    '#33CC33',
    '#33CC66',
    '#33CC99',
    '#33CCCC',
    '#33CCFF',
    '#6600CC',
    '#6600FF',
    '#6633CC',
    '#6633FF',
    '#66CC00',
    '#66CC33',
    '#9900CC',
    '#9900FF',
    '#9933CC',
    '#9933FF',
    '#99CC00',
    '#99CC33',
    '#CC0000',
    '#CC0033',
    '#CC0066',
    '#CC0099',
    '#CC00CC',
    '#CC00FF',
    '#CC3300',
    '#CC3333',
    '#CC3366',
    '#CC3399',
    '#CC33CC',
    '#CC33FF',
    '#CC6600',
    '#CC6633',
    '#CC9900',
    '#CC9933',
    '#CCCC00',
    '#CCCC33',
    '#FF0000',
    '#FF0033',
    '#FF0066',
    '#FF0099',
    '#FF00CC',
    '#FF00FF',
    '#FF3300',
    '#FF3333',
    '#FF3366',
    '#FF3399',
    '#FF33CC',
    '#FF33FF',
    '#FF6600',
    '#FF6633',
    '#FF9900',
    '#FF9933',
    '#FFCC00',
    '#FFCC33'
];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */ // eslint-disable-next-line complexity
function useColors() {
    // NB: In an Electron preload script, document will be defined but not fully
    // initialized. Since we know we're in Chrome, we'll just detect this case
    // explicitly
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    // Internet Explorer and Edge do not support colors.
    if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
    }
    let m;
    // Is webkit? http://stackoverflow.com/a/16459606/376773
    // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    // eslint-disable-next-line no-return-assign
    return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */ function formatArgs(args) {
    args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);
    if (!this.useColors) {
        return;
    }
    const c = 'color: ' + this.color;
    args.splice(1, 0, c, 'color: inherit');
    // The final "%c" is somewhat tricky, because there could be other
    // arguments passed either before or after the %c, so we need to
    // figure out the correct index to insert the CSS into
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match)=>{
        if (match === '%%') {
            return;
        }
        index++;
        if (match === '%c') {
            // We only are interested in the *last* %c
            // (the user may have provided their own)
            lastC = index;
        }
    });
    args.splice(lastC, 0, c);
}
/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */ exports.log = console.debug || console.log || (()=>{});
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */ function save(namespaces) {
    try {
        if (namespaces) {
            exports.storage.setItem('debug', namespaces);
        } else {
            exports.storage.removeItem('debug');
        }
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */ function load() {
    let r;
    try {
        r = exports.storage.getItem('debug');
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
    // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    if (!r && typeof process !== 'undefined' && 'env' in process) {
        r = process.env.DEBUG;
    }
    return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */ function localstorage() {
    try {
        // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
        // The Browser also has localStorage in the global context.
        return localStorage;
    } catch (error) {
    // Swallow
    // XXX (@Qix-) should we be logging these?
    }
}
module.exports = __turbopack_context__.r("[project]/node_modules/debug/src/common.js [app-route] (ecmascript)")(exports);
const { formatters } = module.exports;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */ formatters.j = function(v) {
    try {
        return JSON.stringify(v);
    } catch (error) {
        return '[UnexpectedJSONParseError]: ' + error.message;
    }
};
}}),
"[project]/node_modules/debug/src/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
/**
 * Detect Electron renderer / nwjs process, which is node, but we should
 * treat as a browser.
 */ if (typeof process === 'undefined' || process.type === 'renderer' || ("TURBOPACK compile-time value", false) === true || process.__nwjs) {
    module.exports = __turbopack_context__.r("[project]/node_modules/debug/src/browser.js [app-route] (ecmascript)");
} else {
    module.exports = __turbopack_context__.r("[project]/node_modules/debug/src/node.js [app-route] (ecmascript)");
}
}}),
"[project]/node_modules/has-flag/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
module.exports = (flag, argv = process.argv)=>{
    const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
    const position = argv.indexOf(prefix + flag);
    const terminatorPosition = argv.indexOf('--');
    return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
};
}}),
"[project]/node_modules/supports-color/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
'use strict';
const os = __turbopack_context__.r("[externals]/os [external] (os, cjs)");
const tty = __turbopack_context__.r("[externals]/tty [external] (tty, cjs)");
const hasFlag = __turbopack_context__.r("[project]/node_modules/has-flag/index.js [app-route] (ecmascript)");
const { env } = process;
let forceColor;
if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false') || hasFlag('color=never')) {
    forceColor = 0;
} else if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
    forceColor = 1;
}
if ('FORCE_COLOR' in env) {
    if (env.FORCE_COLOR === 'true') {
        forceColor = 1;
    } else if (env.FORCE_COLOR === 'false') {
        forceColor = 0;
    } else {
        forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    }
}
function translateLevel(level) {
    if (level === 0) {
        return false;
    }
    return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
    };
}
function supportsColor(haveStream, streamIsTTY) {
    if (forceColor === 0) {
        return 0;
    }
    if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
        return 3;
    }
    if (hasFlag('color=256')) {
        return 2;
    }
    if (haveStream && !streamIsTTY && forceColor === undefined) {
        return 0;
    }
    const min = forceColor || 0;
    if (env.TERM === 'dumb') {
        return min;
    }
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    if ('CI' in env) {
        if ([
            'TRAVIS',
            'CIRCLECI',
            'APPVEYOR',
            'GITLAB_CI',
            'GITHUB_ACTIONS',
            'BUILDKITE'
        ].some((sign)=>sign in env) || env.CI_NAME === 'codeship') {
            return 1;
        }
        return min;
    }
    if ('TEAMCITY_VERSION' in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === 'truecolor') {
        return 3;
    }
    if ('TERM_PROGRAM' in env) {
        const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
        switch(env.TERM_PROGRAM){
            case 'iTerm.app':
                return version >= 3 ? 3 : 2;
            case 'Apple_Terminal':
                return 2;
        }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
    }
    if ('COLORTERM' in env) {
        return 1;
    }
    return min;
}
function getSupportLevel(stream) {
    const level = supportsColor(stream, stream && stream.isTTY);
    return translateLevel(level);
}
module.exports = {
    supportsColor: getSupportLevel,
    stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    stderr: translateLevel(supportsColor(true, tty.isatty(2)))
};
}}),
"[project]/node_modules/follow-redirects/debug.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var debug;
module.exports = function() {
    if (!debug) {
        try {
            /* eslint global-require: off */ debug = __turbopack_context__.r("[project]/node_modules/debug/src/index.js [app-route] (ecmascript)")("follow-redirects");
        } catch (error) {}
        if (typeof debug !== "function") {
            debug = function() {};
        }
    }
    debug.apply(null, arguments);
};
}}),
"[project]/node_modules/follow-redirects/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
var url = __turbopack_context__.r("[externals]/url [external] (url, cjs)");
var URL = url.URL;
var http = __turbopack_context__.r("[externals]/http [external] (http, cjs)");
var https = __turbopack_context__.r("[externals]/https [external] (https, cjs)");
var Writable = __turbopack_context__.r("[externals]/stream [external] (stream, cjs)").Writable;
var assert = __turbopack_context__.r("[externals]/assert [external] (assert, cjs)");
var debug = __turbopack_context__.r("[project]/node_modules/follow-redirects/debug.js [app-route] (ecmascript)");
// Preventive platform detection
// istanbul ignore next
(function detectUnsupportedEnvironment() {
    var looksLikeNode = typeof process !== "undefined";
    var looksLikeBrowser = "undefined" !== "undefined" && typeof document !== "undefined";
    var looksLikeV8 = isFunction(Error.captureStackTrace);
    if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) {
        console.warn("The follow-redirects package should be excluded from browser builds.");
    }
})();
// Whether to use the native URL object or the legacy url module
var useNativeURL = false;
try {
    assert(new URL(""));
} catch (error) {
    useNativeURL = error.code === "ERR_INVALID_URL";
}
// URL fields to preserve in copy operations
var preservedUrlFields = [
    "auth",
    "host",
    "hostname",
    "href",
    "path",
    "pathname",
    "port",
    "protocol",
    "query",
    "search",
    "hash"
];
// Create handlers that pass events from native requests
var events = [
    "abort",
    "aborted",
    "connect",
    "error",
    "socket",
    "timeout"
];
var eventHandlers = Object.create(null);
events.forEach(function(event) {
    eventHandlers[event] = function(arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
    };
});
// Error types with codes
var InvalidUrlError = createErrorType("ERR_INVALID_URL", "Invalid URL", TypeError);
var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded", RedirectionError);
var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
// istanbul ignore next
var destroy = Writable.prototype.destroy || noop;
// An HTTP(S) request that can be redirected
function RedirectableRequest(options, responseCallback) {
    // Initialize the request
    Writable.call(this);
    this._sanitizeOptions(options);
    this._options = options;
    this._ended = false;
    this._ending = false;
    this._redirectCount = 0;
    this._redirects = [];
    this._requestBodyLength = 0;
    this._requestBodyBuffers = [];
    // Attach a callback if passed
    if (responseCallback) {
        this.on("response", responseCallback);
    }
    // React to responses of native requests
    var self = this;
    this._onNativeResponse = function(response) {
        try {
            self._processResponse(response);
        } catch (cause) {
            self.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({
                cause: cause
            }));
        }
    };
    // Perform the first request
    this._performRequest();
}
RedirectableRequest.prototype = Object.create(Writable.prototype);
RedirectableRequest.prototype.abort = function() {
    destroyRequest(this._currentRequest);
    this._currentRequest.abort();
    this.emit("abort");
};
RedirectableRequest.prototype.destroy = function(error) {
    destroyRequest(this._currentRequest, error);
    destroy.call(this, error);
    return this;
};
// Writes buffered data to the current native request
RedirectableRequest.prototype.write = function(data, encoding, callback) {
    // Writing is not allowed if end has been called
    if (this._ending) {
        throw new WriteAfterEndError();
    }
    // Validate input and shift parameters if necessary
    if (!isString(data) && !isBuffer(data)) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
    }
    if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
    }
    // Ignore empty buffers, since writing them doesn't invoke the callback
    // https://github.com/nodejs/node/issues/22066
    if (data.length === 0) {
        if (callback) {
            callback();
        }
        return;
    }
    // Only write when we don't exceed the maximum body length
    if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({
            data: data,
            encoding: encoding
        });
        this._currentRequest.write(data, encoding, callback);
    } else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
    }
};
// Ends the current native request
RedirectableRequest.prototype.end = function(data, encoding, callback) {
    // Shift parameters if necessary
    if (isFunction(data)) {
        callback = data;
        data = encoding = null;
    } else if (isFunction(encoding)) {
        callback = encoding;
        encoding = null;
    }
    // Write data if needed and end
    if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
    } else {
        var self = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function() {
            self._ended = true;
            currentRequest.end(null, null, callback);
        });
        this._ending = true;
    }
};
// Sets a header value on the current native request
RedirectableRequest.prototype.setHeader = function(name, value) {
    this._options.headers[name] = value;
    this._currentRequest.setHeader(name, value);
};
// Clears a header value on the current native request
RedirectableRequest.prototype.removeHeader = function(name) {
    delete this._options.headers[name];
    this._currentRequest.removeHeader(name);
};
// Global timeout for all underlying requests
RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
    var self = this;
    // Destroys the socket on timeout
    function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
    }
    // Sets up a timer to trigger a timeout event
    function startTimer(socket) {
        if (self._timeout) {
            clearTimeout(self._timeout);
        }
        self._timeout = setTimeout(function() {
            self.emit("timeout");
            clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
    }
    // Stops a timeout from triggering
    function clearTimer() {
        // Clear the timeout
        if (self._timeout) {
            clearTimeout(self._timeout);
            self._timeout = null;
        }
        // Clean up all attached listeners
        self.removeListener("abort", clearTimer);
        self.removeListener("error", clearTimer);
        self.removeListener("response", clearTimer);
        self.removeListener("close", clearTimer);
        if (callback) {
            self.removeListener("timeout", callback);
        }
        if (!self.socket) {
            self._currentRequest.removeListener("socket", startTimer);
        }
    }
    // Attach callback if passed
    if (callback) {
        this.on("timeout", callback);
    }
    // Start the timer if or when the socket is opened
    if (this.socket) {
        startTimer(this.socket);
    } else {
        this._currentRequest.once("socket", startTimer);
    }
    // Clean up on events
    this.on("socket", destroyOnTimeout);
    this.on("abort", clearTimer);
    this.on("error", clearTimer);
    this.on("response", clearTimer);
    this.on("close", clearTimer);
    return this;
};
// Proxy all other public ClientRequest methods
[
    "flushHeaders",
    "getHeader",
    "setNoDelay",
    "setSocketKeepAlive"
].forEach(function(method) {
    RedirectableRequest.prototype[method] = function(a, b) {
        return this._currentRequest[method](a, b);
    };
});
// Proxy all public ClientRequest properties
[
    "aborted",
    "connection",
    "socket"
].forEach(function(property) {
    Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function() {
            return this._currentRequest[property];
        }
    });
});
RedirectableRequest.prototype._sanitizeOptions = function(options) {
    // Ensure headers are always present
    if (!options.headers) {
        options.headers = {};
    }
    // Since http.request treats host as an alias of hostname,
    // but the url module interprets host as hostname plus port,
    // eliminate the host property to avoid confusion.
    if (options.host) {
        // Use hostname if set, because it has precedence
        if (!options.hostname) {
            options.hostname = options.host;
        }
        delete options.host;
    }
    // Complete the URL object when necessary
    if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
            options.pathname = options.path;
        } else {
            options.pathname = options.path.substring(0, searchPos);
            options.search = options.path.substring(searchPos);
        }
    }
};
// Executes the next native request (initial or redirect)
RedirectableRequest.prototype._performRequest = function() {
    // Load the native protocol
    var protocol = this._options.protocol;
    var nativeProtocol = this._options.nativeProtocols[protocol];
    if (!nativeProtocol) {
        throw new TypeError("Unsupported protocol " + protocol);
    }
    // If specified, use the agent corresponding to the protocol
    // (HTTP and HTTPS use different types of agents)
    if (this._options.agents) {
        var scheme = protocol.slice(0, -1);
        this._options.agent = this._options.agents[scheme];
    }
    // Create the native request and set up its event handlers
    var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
    request._redirectable = this;
    for (var event of events){
        request.on(event, eventHandlers[event]);
    }
    // RFC7230§5.3.1: When making a request directly to an origin server, […]
    // a client MUST send only the absolute path […] as the request-target.
    this._currentUrl = /^\//.test(this._options.path) ? url.format(this._options) : // When making a request to a proxy, […]
    // a client MUST send the target URI in absolute-form […].
    this._options.path;
    // End a redirected request
    // (The first request must be ended explicitly with RedirectableRequest#end)
    if (this._isRedirect) {
        // Write the request entity and end
        var i = 0;
        var self = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
            // Only write if this request has not been redirected yet
            // istanbul ignore else
            if (request === self._currentRequest) {
                // Report any write errors
                // istanbul ignore if
                if (error) {
                    self.emit("error", error);
                } else if (i < buffers.length) {
                    var buffer = buffers[i++];
                    // istanbul ignore else
                    if (!request.finished) {
                        request.write(buffer.data, buffer.encoding, writeNext);
                    }
                } else if (self._ended) {
                    request.end();
                }
            }
        })();
    }
};
// Processes a response from the current native request
RedirectableRequest.prototype._processResponse = function(response) {
    // Store the redirected response
    var statusCode = response.statusCode;
    if (this._options.trackRedirects) {
        this._redirects.push({
            url: this._currentUrl,
            headers: response.headers,
            statusCode: statusCode
        });
    }
    // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
    // that further action needs to be taken by the user agent in order to
    // fulfill the request. If a Location header field is provided,
    // the user agent MAY automatically redirect its request to the URI
    // referenced by the Location field value,
    // even if the specific status code is not understood.
    // If the response is not a redirect; return it as-is
    var location = response.headers.location;
    if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);
        // Clean up
        this._requestBodyBuffers = [];
        return;
    }
    // The response is a redirect, so abort the current request
    destroyRequest(this._currentRequest);
    // Discard the remainder of the response to avoid waiting for data
    response.destroy();
    // RFC7231§6.4: A client SHOULD detect and intervene
    // in cyclical redirections (i.e., "infinite" redirection loops).
    if (++this._redirectCount > this._options.maxRedirects) {
        throw new TooManyRedirectsError();
    }
    // Store the request headers if applicable
    var requestHeaders;
    var beforeRedirect = this._options.beforeRedirect;
    if (beforeRedirect) {
        requestHeaders = Object.assign({
            // The Host header was set by nativeProtocol.request
            Host: response.req.getHeader("host")
        }, this._options.headers);
    }
    // RFC7231§6.4: Automatic redirection needs to done with
    // care for methods not known to be safe, […]
    // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
    // the request method from POST to GET for the subsequent request.
    var method = this._options.method;
    if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || // RFC7231§6.4.4: The 303 (See Other) status code indicates that
    // the server is redirecting the user agent to a different resource […]
    // A user agent can perform a retrieval request targeting that URI
    // (a GET or HEAD request if using HTTP) […]
    statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
        this._options.method = "GET";
        // Drop a possible entity and headers related to it
        this._requestBodyBuffers = [];
        removeMatchingHeaders(/^content-/i, this._options.headers);
    }
    // Drop the Host header, as the redirect might lead to a different host
    var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
    // If the redirect is relative, carry over the host of the last request
    var currentUrlParts = parseUrl(this._currentUrl);
    var currentHost = currentHostHeader || currentUrlParts.host;
    var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url.format(Object.assign(currentUrlParts, {
        host: currentHost
    }));
    // Create the redirected request
    var redirectUrl = resolveUrl(location, currentUrl);
    debug("redirecting to", redirectUrl.href);
    this._isRedirect = true;
    spreadUrlObject(redirectUrl, this._options);
    // Drop confidential headers when redirecting to a less secure protocol
    // or to a different domain that is not a superdomain
    if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {
        removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
    }
    // Evaluate the beforeRedirect callback
    if (isFunction(beforeRedirect)) {
        var responseDetails = {
            headers: response.headers,
            statusCode: statusCode
        };
        var requestDetails = {
            url: currentUrl,
            method: method,
            headers: requestHeaders
        };
        beforeRedirect(this._options, responseDetails, requestDetails);
        this._sanitizeOptions(this._options);
    }
    // Perform the redirected request
    this._performRequest();
};
// Wraps the key/value object of protocols with redirect functionality
function wrap(protocols) {
    // Default settings
    var exports = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024
    };
    // Wrap each protocol
    var nativeProtocols = {};
    Object.keys(protocols).forEach(function(scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);
        // Executes a request, following redirects
        function request(input, options, callback) {
            // Parse parameters, ensuring that input is an object
            if (isURL(input)) {
                input = spreadUrlObject(input);
            } else if (isString(input)) {
                input = spreadUrlObject(parseUrl(input));
            } else {
                callback = options;
                options = validateUrl(input);
                input = {
                    protocol: protocol
                };
            }
            if (isFunction(options)) {
                callback = options;
                options = null;
            }
            // Set defaults
            options = Object.assign({
                maxRedirects: exports.maxRedirects,
                maxBodyLength: exports.maxBodyLength
            }, input, options);
            options.nativeProtocols = nativeProtocols;
            if (!isString(options.host) && !isString(options.hostname)) {
                options.hostname = "::1";
            }
            assert.equal(options.protocol, protocol, "protocol mismatch");
            debug("options", options);
            return new RedirectableRequest(options, callback);
        }
        // Executes a GET request, following redirects
        function get(input, options, callback) {
            var wrappedRequest = wrappedProtocol.request(input, options, callback);
            wrappedRequest.end();
            return wrappedRequest;
        }
        // Expose the properties on the wrapped protocol
        Object.defineProperties(wrappedProtocol, {
            request: {
                value: request,
                configurable: true,
                enumerable: true,
                writable: true
            },
            get: {
                value: get,
                configurable: true,
                enumerable: true,
                writable: true
            }
        });
    });
    return exports;
}
function noop() {}
function parseUrl(input) {
    var parsed;
    // istanbul ignore else
    if (useNativeURL) {
        parsed = new URL(input);
    } else {
        // Ensure the URL is valid and absolute
        parsed = validateUrl(url.parse(input));
        if (!isString(parsed.protocol)) {
            throw new InvalidUrlError({
                input
            });
        }
    }
    return parsed;
}
function resolveUrl(relative, base) {
    // istanbul ignore next
    return useNativeURL ? new URL(relative, base) : parseUrl(url.resolve(base, relative));
}
function validateUrl(input) {
    if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
        throw new InvalidUrlError({
            input: input.href || input
        });
    }
    if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
        throw new InvalidUrlError({
            input: input.href || input
        });
    }
    return input;
}
function spreadUrlObject(urlObject, target) {
    var spread = target || {};
    for (var key of preservedUrlFields){
        spread[key] = urlObject[key];
    }
    // Fix IPv6 hostname
    if (spread.hostname.startsWith("[")) {
        spread.hostname = spread.hostname.slice(1, -1);
    }
    // Ensure port is a number
    if (spread.port !== "") {
        spread.port = Number(spread.port);
    }
    // Concatenate path
    spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;
    return spread;
}
function removeMatchingHeaders(regex, headers) {
    var lastValue;
    for(var header in headers){
        if (regex.test(header)) {
            lastValue = headers[header];
            delete headers[header];
        }
    }
    return lastValue === null || typeof lastValue === "undefined" ? undefined : String(lastValue).trim();
}
function createErrorType(code, message, baseClass) {
    // Create constructor
    function CustomError(properties) {
        // istanbul ignore else
        if (isFunction(Error.captureStackTrace)) {
            Error.captureStackTrace(this, this.constructor);
        }
        Object.assign(this, properties || {});
        this.code = code;
        this.message = this.cause ? message + ": " + this.cause.message : message;
    }
    // Attach constructor and set default properties
    CustomError.prototype = new (baseClass || Error)();
    Object.defineProperties(CustomError.prototype, {
        constructor: {
            value: CustomError,
            enumerable: false
        },
        name: {
            value: "Error [" + code + "]",
            enumerable: false
        }
    });
    return CustomError;
}
function destroyRequest(request, error) {
    for (var event of events){
        request.removeListener(event, eventHandlers[event]);
    }
    request.on("error", noop);
    request.destroy(error);
}
function isSubdomain(subdomain, domain) {
    assert(isString(subdomain) && isString(domain));
    var dot = subdomain.length - domain.length - 1;
    return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
}
function isString(value) {
    return typeof value === "string" || value instanceof String;
}
function isFunction(value) {
    return typeof value === "function";
}
function isBuffer(value) {
    return typeof value === "object" && "length" in value;
}
function isURL(value) {
    return URL && value instanceof URL;
}
// Exports
module.exports = wrap({
    http: http,
    https: https
});
module.exports.wrap = wrap;
}}),
"[project]/node_modules/cockatiel/dist/esm/index.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
;
;
;
;
;
;
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/index.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/index.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/cockatiel/dist/esm/backoff/Backoff.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
;
;
;
;
 //# sourceMappingURL=Backoff.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/backoff/Backoff.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/Backoff.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/cockatiel/dist/esm/backoff/ConstantBackoff.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConstantBackoff": (()=>ConstantBackoff)
});
class ConstantBackoff {
    /**
     * Backoff that returns a constant interval.
     */ constructor(interval){
        this.interval = interval;
    }
    /**
     * @inheritdoc
     */ next() {
        return instance(this.interval);
    }
}
const instance = (interval)=>({
        duration: interval,
        next () {
            return this;
        }
    }); //# sourceMappingURL=ConstantBackoff.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/backoff/DelegateBackoff.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "DelegateBackoff": (()=>DelegateBackoff)
});
class DelegateBackoff {
    /**
     * Backoff that delegates to a user-provided function. The function takes
     * the backoff context, and can optionally take (and return) a state value
     * that will be passed into subsequent backoff requests.
     */ constructor(fn){
        this.fn = fn;
    }
    /**
     * @inheritdoc
     */ next(context) {
        return instance(this.fn).next(context);
    }
}
const instance = (fn, state, current = 0)=>({
        duration: current,
        next (context) {
            const result = fn(context, state);
            return typeof result === 'number' ? instance(fn, state, result) : instance(fn, result.state, result.delay);
        }
    }); //# sourceMappingURL=DelegateBackoff.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/backoff/ExponentialBackoffGenerators.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Generator that creates a backoff with no jitter.
 */ __turbopack_context__.s({
    "decorrelatedJitterGenerator": (()=>decorrelatedJitterGenerator),
    "fullJitterGenerator": (()=>fullJitterGenerator),
    "halfJitterGenerator": (()=>halfJitterGenerator),
    "noJitterGenerator": (()=>noJitterGenerator)
});
const noJitterGenerator = (attempts = 0, options)=>[
        Math.min(options.maxDelay, options.initialDelay * 2 ** attempts),
        attempts + 1
    ];
const fullJitterGenerator = (state, options)=>{
    const [delay, next] = noJitterGenerator(state, options);
    return [
        Math.floor(Math.random() * delay),
        next
    ];
};
const halfJitterGenerator = (attempts, options)=>{
    const [delay, next] = noJitterGenerator(attempts, options);
    return [
        Math.floor((delay + Math.random() * delay) / 2),
        next
    ];
};
/**
 * A factor used within the formula to help smooth the first calculated delay.
 */ const pFactor = 4.0;
/**
 *  A factor used to scale the median values of the retry times generated by
 * the formula to be _near_ whole seconds, to aid user comprehension. This
 * factor allows the median values to fall approximately at 1, 2, 4 etc
 * seconds, instead of 1.4, 2.8, 5.6, 11.2.
 */ const rpScalingFactor = 1 / 1.4;
const decorrelatedJitterGenerator = (state, options)=>{
    const [attempt, prev] = state || [
        0,
        0
    ];
    const t = attempt + Math.random();
    const next = Math.pow(options.exponent, t) * Math.tanh(Math.sqrt(pFactor * t));
    const formulaIntrinsicValue = isFinite(next) ? Math.max(0, next - prev) : Infinity;
    return [
        Math.min(formulaIntrinsicValue * rpScalingFactor * options.initialDelay, options.maxDelay),
        [
            attempt + 1,
            next
        ]
    ];
}; //# sourceMappingURL=ExponentialBackoffGenerators.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/backoff/ExponentialBackoff.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ExponentialBackoff": (()=>ExponentialBackoff)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ExponentialBackoffGenerators$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/ExponentialBackoffGenerators.js [app-route] (ecmascript)");
;
const defaultOptions = {
    generator: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ExponentialBackoffGenerators$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decorrelatedJitterGenerator"],
    maxDelay: 30000,
    exponent: 2,
    initialDelay: 128
};
class ExponentialBackoff {
    /**
     * An implementation of exponential backoff.
     */ constructor(options){
        this.options = options ? {
            ...defaultOptions,
            ...options
        } : defaultOptions;
    }
    next() {
        return instance(this.options).next(undefined);
    }
}
/**
 * An implementation of exponential backoff.
 */ const instance = (options, state, delay = 0, attempt = -1)=>({
        duration: delay,
        next () {
            const [nextDelay, nextState] = options.generator(state, options);
            return instance(options, nextState, nextDelay, attempt + 1);
        }
    }); //# sourceMappingURL=ExponentialBackoff.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/backoff/IterableBackoff.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "IterableBackoff": (()=>IterableBackoff)
});
class IterableBackoff {
    /**
     * Backoff that returns a number from an iterable.
     */ constructor(durations){
        this.durations = durations;
    }
    /**
     * @inheritdoc
     */ next(_context) {
        return instance(this.durations, 0);
    }
}
const instance = (durations, index)=>({
        duration: durations[index],
        next () {
            return index === durations.length - 1 ? this : instance(durations, index + 1);
        }
    }); //# sourceMappingURL=IterableBackoff.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/backoff/Backoff.js [app-route] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConstantBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ConstantBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConstantBackoff"]),
    "DelegateBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$DelegateBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DelegateBackoff"]),
    "ExponentialBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ExponentialBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ExponentialBackoff"]),
    "IterableBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$IterableBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["IterableBackoff"]),
    "decorrelatedJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ExponentialBackoffGenerators$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decorrelatedJitterGenerator"]),
    "fullJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ExponentialBackoffGenerators$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fullJitterGenerator"]),
    "halfJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ExponentialBackoffGenerators$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["halfJitterGenerator"]),
    "noJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ExponentialBackoffGenerators$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["noJitterGenerator"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ConstantBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/ConstantBackoff.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$DelegateBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/DelegateBackoff.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ExponentialBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/ExponentialBackoff.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ExponentialBackoffGenerators$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/ExponentialBackoffGenerators.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$IterableBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/IterableBackoff.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/Backoff.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/cockatiel/dist/esm/backoff/Backoff.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConstantBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ConstantBackoff"]),
    "DelegateBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["DelegateBackoff"]),
    "ExponentialBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ExponentialBackoff"]),
    "IterableBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["IterableBackoff"]),
    "decorrelatedJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["decorrelatedJitterGenerator"]),
    "fullJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fullJitterGenerator"]),
    "halfJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["halfJitterGenerator"]),
    "noJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["noJitterGenerator"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/Backoff.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/Backoff.js [app-route] (ecmascript) <exports>");
}}),
"[project]/node_modules/cockatiel/dist/esm/breaker/Breaker.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
;
;
 //# sourceMappingURL=Breaker.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/breaker/Breaker.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/breaker/Breaker.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/cockatiel/dist/esm/breaker/ConsecutiveBreaker.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConsecutiveBreaker": (()=>ConsecutiveBreaker)
});
class ConsecutiveBreaker {
    /**
     * ConsecutiveBreaker breaks if more than `threshold` exceptions are received
     * over a time period.
     */ constructor(threshold){
        this.threshold = threshold;
        /**
         * @inheritdoc
         */ this.state = 0;
    }
    /**
     * @inheritdoc
     */ success() {
        this.state = 0;
    }
    /**
     * @inheritdoc
     */ failure() {
        return ++this.state >= this.threshold;
    }
} //# sourceMappingURL=ConsecutiveBreaker.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/errors/TaskCancelledError.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "TaskCancelledError": (()=>TaskCancelledError)
});
class TaskCancelledError extends Error {
    /**
     * Error thrown when a task is cancelled.
     */ constructor(message = 'Operation cancelled'){
        super(message);
        this.message = message;
        this.isTaskCancelledError = true;
    }
} //# sourceMappingURL=TaskCancelledError.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/common/Event.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Event": (()=>Event),
    "EventEmitter": (()=>EventEmitter),
    "MemorizingEventEmitter": (()=>MemorizingEventEmitter),
    "noopDisposable": (()=>noopDisposable),
    "onAbort": (()=>onAbort)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/TaskCancelledError.js [app-route] (ecmascript)");
;
const noopDisposable = {
    dispose: ()=>undefined
};
var Event;
(function(Event) {
    /**
     * Adds a handler that handles one event on the emitter.
     */ Event.once = (event, listener)=>{
        let syncDispose = false;
        let disposable;
        disposable = event((value)=>{
            listener(value);
            if (disposable) {
                disposable.dispose();
            } else {
                syncDispose = true; // callback can fire before disposable is returned
            }
        });
        if (syncDispose) {
            disposable.dispose();
            return noopDisposable; // no reason to keep the ref around
        }
        return disposable;
    };
    /**
     * Returns a promise that resolves when the event fires, or when cancellation
     * is requested, whichever happens first.
     */ Event.toPromise = (event, signal)=>{
        if (!signal) {
            return new Promise((resolve)=>Event.once(event, resolve));
        }
        if (signal.aborted) {
            return Promise.reject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TaskCancelledError"]());
        }
        const toDispose = [];
        return new Promise((resolve, reject)=>{
            const abortEvt = onAbort(signal);
            toDispose.push(abortEvt);
            toDispose.push(abortEvt.event(()=>{
                reject(new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TaskCancelledError"]());
            }));
            toDispose.push(Event.once(event, (data)=>{
                resolve(data);
            }));
        }).finally(()=>{
            for (const d of toDispose){
                d.dispose();
            }
        });
    };
})(Event || (Event = {}));
const onAbort = (signal)=>{
    const evt = new OneShotEvent();
    if (signal.aborted) {
        evt.emit();
        return {
            event: evt.addListener,
            dispose: ()=>{}
        };
    }
    const dispose = ()=>signal.removeEventListener('abort', l);
    // @types/node is currently missing the event types on AbortSignal
    const l = ()=>{
        evt.emit();
        dispose();
    };
    signal.addEventListener('abort', l);
    return {
        event: evt.addListener,
        dispose
    };
};
class EventEmitter {
    constructor(){
        /**
         * Event<T> function.
         */ this.addListener = (listener)=>this.addListenerInner(listener);
    }
    /**
     * Gets the number of event listeners.
     */ get size() {
        if (!this.listeners) {
            return 0;
        } else if (typeof this.listeners === 'function') {
            return 1;
        } else {
            return this.listeners.length;
        }
    }
    /**
     * Emits event data.
     */ emit(value) {
        if (!this.listeners) {
        // no-op
        } else if (typeof this.listeners === 'function') {
            this.listeners(value);
        } else {
            for (const listener of this.listeners){
                listener(value);
            }
        }
    }
    addListenerInner(listener) {
        if (!this.listeners) {
            this.listeners = listener;
        } else if (typeof this.listeners === 'function') {
            this.listeners = [
                this.listeners,
                listener
            ];
        } else {
            this.listeners.push(listener);
        }
        return {
            dispose: ()=>this.removeListener(listener)
        };
    }
    removeListener(listener) {
        if (!this.listeners) {
            return;
        }
        if (typeof this.listeners === 'function') {
            if (this.listeners === listener) {
                this.listeners = undefined;
            }
            return;
        }
        const index = this.listeners.indexOf(listener);
        if (index === -1) {
            return;
        }
        if (this.listeners.length === 2) {
            this.listeners = index === 0 ? this.listeners[1] : this.listeners[0];
        } else {
            this.listeners = this.listeners.slice(0, index).concat(this.listeners.slice(index + 1));
        }
    }
}
class MemorizingEventEmitter extends EventEmitter {
    constructor(){
        super(...arguments);
        /**
         * @inheritdoc
         */ this.addListener = (listener)=>{
            const disposable = this.addListenerInner(listener);
            if (this.lastValue) {
                listener(this.lastValue.value);
            }
            return disposable;
        };
    }
    /**
     * Gets whether this emitter has yet emitted any event.
     */ get hasEmitted() {
        return !!this.lastValue;
    }
    /**
     * @inheritdoc
     */ emit(value) {
        this.lastValue = {
            value
        };
        super.emit(value);
    }
}
/**
 * An event emitter that fires a value once and removes all
 * listeners automatically after doing so.
 */ class OneShotEvent extends EventEmitter {
    constructor(){
        super(...arguments);
        /**
         * @inheritdoc
         */ this.addListener = (listener)=>{
            if (this.lastValue) {
                listener(this.lastValue.value);
                return noopDisposable;
            } else {
                return this.addListenerInner(listener);
            }
        };
    }
    /**
     * @inheritdoc
     */ emit(value) {
        this.lastValue = {
            value
        };
        super.emit(value);
        this.listeners = undefined;
    }
} //# sourceMappingURL=Event.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/common/abort.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "abortedSignal": (()=>abortedSignal),
    "deriveAbortController": (()=>deriveAbortController),
    "neverAbortedSignal": (()=>neverAbortedSignal)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Event.js [app-route] (ecmascript)");
;
const neverAbortedSignal = new AbortController().signal;
const cancelledSrc = new AbortController();
cancelledSrc.abort();
const abortedSignal = cancelledSrc.signal;
const noop = ()=>{};
const deriveAbortController = (signal)=>{
    const ctrl = new AbortController();
    let dispose = noop;
    if (!signal) {
        return {
            ctrl,
            dispose
        };
    }
    if (signal.aborted) {
        ctrl.abort();
    } else {
        const abortEvt = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["onAbort"])(signal);
        abortEvt.event(()=>ctrl.abort());
        dispose = abortEvt.dispose;
    }
    return {
        ctrl,
        dispose
    };
}; //# sourceMappingURL=abort.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/common/Executor.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ExecuteWrapper": (()=>ExecuteWrapper),
    "returnOrThrow": (()=>returnOrThrow)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Event.js [app-route] (ecmascript)");
;
const returnOrThrow = (failure)=>{
    if ('error' in failure) {
        throw failure.error;
    }
    if ('success' in failure) {
        return failure.success;
    }
    return failure.value;
};
const makeStopwatch = ()=>{
    if (typeof performance !== 'undefined') {
        const start = performance.now();
        return ()=>performance.now() - start;
    } else {
        const start = process.hrtime.bigint();
        return ()=>Number(process.hrtime.bigint() - start) / 1000000; // ns->ms
    }
};
class ExecuteWrapper {
    constructor(errorFilter = ()=>false, resultFilter = ()=>false){
        this.errorFilter = errorFilter;
        this.resultFilter = resultFilter;
        this.successEmitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]();
        this.failureEmitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]();
        this.onSuccess = this.successEmitter.addListener;
        this.onFailure = this.failureEmitter.addListener;
    }
    clone() {
        return new ExecuteWrapper(this.errorFilter, this.resultFilter);
    }
    async invoke(fn, ...args) {
        const stopwatch = this.successEmitter.size || this.failureEmitter.size ? makeStopwatch() : null;
        try {
            const value = await fn(...args);
            if (!this.resultFilter(value)) {
                if (stopwatch) {
                    this.successEmitter.emit({
                        duration: stopwatch()
                    });
                }
                return {
                    success: value
                };
            }
            if (stopwatch) {
                this.failureEmitter.emit({
                    duration: stopwatch(),
                    handled: true,
                    reason: {
                        value
                    }
                });
            }
            return {
                value
            };
        } catch (rawError) {
            const error = rawError;
            const handled = this.errorFilter(error);
            if (stopwatch) {
                this.failureEmitter.emit({
                    duration: stopwatch(),
                    handled,
                    reason: {
                        error
                    }
                });
            }
            if (!handled) {
                throw error;
            }
            return {
                error
            };
        }
    }
} //# sourceMappingURL=Executor.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/errors/BrokenCircuitError.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrokenCircuitError": (()=>BrokenCircuitError)
});
class BrokenCircuitError extends Error {
    /**
     * Exception thrown from {@link CircuitBreakerPolicy.execute} when the
     * circuit breaker is open.
     */ constructor(message = 'Execution prevented because the circuit breaker is open'){
        super(message);
        this.isBrokenCircuitError = true;
    }
} //# sourceMappingURL=BrokenCircuitError.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/errors/HydratingCircuitError.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "HydratingCircuitError": (()=>HydratingCircuitError)
});
class HydratingCircuitError extends Error {
    /**
     * Exception thrown from {@link CircuitBreakerPolicy.execute} when the
     * circuit breaker is open.
     */ constructor(message = 'Execution prevented because the circuit breaker is open'){
        super(message);
        this.isHydratingCircuitError = true;
    }
} //# sourceMappingURL=HydratingCircuitError.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/errors/IsolatedCircuitError.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "IsolatedCircuitError": (()=>IsolatedCircuitError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$BrokenCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/BrokenCircuitError.js [app-route] (ecmascript)");
;
class IsolatedCircuitError extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$BrokenCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BrokenCircuitError"] {
    /**
     * Exception thrown from {@link CircuitBreakerPolicy.execute} when the
     * circuit breaker is open.
     */ constructor(){
        super(`Execution prevented because the circuit breaker is open`);
        this.isIsolatedCircuitError = true;
    }
} //# sourceMappingURL=IsolatedCircuitError.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/CircuitBreakerPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CircuitBreakerPolicy": (()=>CircuitBreakerPolicy),
    "CircuitState": (()=>CircuitState)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ConstantBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/ConstantBackoff.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/abort.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Event.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Executor.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$BrokenCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/BrokenCircuitError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$HydratingCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/HydratingCircuitError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/TaskCancelledError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$IsolatedCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/IsolatedCircuitError.js [app-route] (ecmascript)");
;
;
;
;
;
;
var CircuitState;
(function(CircuitState) {
    /**
     * Normal operation. Execution of actions allowed.
     */ CircuitState[CircuitState["Closed"] = 0] = "Closed";
    /**
     * The automated controller has opened the circuit. Execution of actions blocked.
     */ CircuitState[CircuitState["Open"] = 1] = "Open";
    /**
     * Recovering from open state, after the automated break duration has
     * expired. Execution of actions permitted. Success of subsequent action/s
     * controls onward transition to Open or Closed state.
     */ CircuitState[CircuitState["HalfOpen"] = 2] = "HalfOpen";
    /**
     * Circuit held manually in an open state. Execution of actions blocked.
     */ CircuitState[CircuitState["Isolated"] = 3] = "Isolated";
})(CircuitState || (CircuitState = {}));
class CircuitBreakerPolicy {
    /**
     * Gets the current circuit breaker state.
     */ get state() {
        return this.innerState.value;
    }
    /**
     * Gets the last reason the circuit breaker failed.
     */ get lastFailure() {
        return this.innerLastFailure;
    }
    constructor(options, executor){
        this.options = options;
        this.executor = executor;
        this.breakEmitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]();
        this.resetEmitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]();
        this.halfOpenEmitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]();
        this.stateChangeEmitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]();
        this.innerState = {
            value: CircuitState.Closed
        };
        /**
         * Event emitted when the circuit breaker opens.
         */ this.onBreak = this.breakEmitter.addListener;
        /**
         * Event emitted when the circuit breaker resets.
         */ this.onReset = this.resetEmitter.addListener;
        /**
         * Event emitted when the circuit breaker is half open (running a test call).
         * Either `onBreak` on `onReset` will subsequently fire.
         */ this.onHalfOpen = this.halfOpenEmitter.addListener;
        /**
         * Fired whenever the circuit breaker state changes.
         */ this.onStateChange = this.stateChangeEmitter.addListener;
        /**
         * @inheritdoc
         */ this.onSuccess = this.executor.onSuccess;
        /**
         * @inheritdoc
         */ this.onFailure = this.executor.onFailure;
        this.halfOpenAfterBackoffFactory = typeof options.halfOpenAfter === 'number' ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ConstantBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConstantBackoff"](options.halfOpenAfter) : options.halfOpenAfter;
        if (options.initialState) {
            const initialState = options.initialState;
            this.innerState = initialState.ownState;
            this.options.breaker.state = initialState.breakerState;
            if (this.innerState.value === CircuitState.Open || this.innerState.value === CircuitState.HalfOpen) {
                this.innerLastFailure = {
                    error: new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$HydratingCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HydratingCircuitError"]()
                };
                let backoff = this.halfOpenAfterBackoffFactory.next({
                    attempt: 1,
                    result: this.innerLastFailure,
                    signal: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["neverAbortedSignal"]
                });
                for(let i = 2; i <= this.innerState.attemptNo; i++){
                    backoff = backoff.next({
                        attempt: i,
                        result: this.innerLastFailure,
                        signal: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["neverAbortedSignal"]
                    });
                }
                this.innerState.backoff = backoff;
            }
        }
    }
    /**
     * Manually holds open the circuit breaker.
     * @returns A handle that keeps the breaker open until `.dispose()` is called.
     */ isolate() {
        if (this.innerState.value !== CircuitState.Isolated) {
            this.innerState = {
                value: CircuitState.Isolated,
                counters: 0
            };
            this.breakEmitter.emit({
                isolated: true
            });
            this.stateChangeEmitter.emit(CircuitState.Isolated);
        }
        this.innerState.counters++;
        let disposed = false;
        return {
            dispose: ()=>{
                if (disposed) {
                    return;
                }
                disposed = true;
                if (this.innerState.value === CircuitState.Isolated && !--this.innerState.counters) {
                    this.innerState = {
                        value: CircuitState.Closed
                    };
                    this.resetEmitter.emit();
                    this.stateChangeEmitter.emit(CircuitState.Closed);
                }
            }
        };
    }
    /**
     * Executes the given function.
     * @param fn Function to run
     * @throws a {@link BrokenCircuitError} if the circuit is open
     * @throws a {@link IsolatedCircuitError} if the circuit is held
     * open via {@link CircuitBreakerPolicy.isolate}
     * @returns a Promise that resolves or rejects with the function results.
     */ async execute(fn, signal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["neverAbortedSignal"]) {
        const state = this.innerState;
        switch(state.value){
            case CircuitState.Closed:
                const result = await this.executor.invoke(fn, {
                    signal
                });
                if ('success' in result) {
                    this.options.breaker.success(state.value);
                } else {
                    this.innerLastFailure = result;
                    if (this.options.breaker.failure(state.value)) {
                        this.open(result, signal);
                    }
                }
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["returnOrThrow"])(result);
            case CircuitState.HalfOpen:
                await state.test.catch(()=>undefined);
                if (this.state === CircuitState.Closed && signal.aborted) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TaskCancelledError"]();
                }
                return this.execute(fn);
            case CircuitState.Open:
                if (Date.now() - state.openedAt < state.backoff.duration) {
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$BrokenCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BrokenCircuitError"]();
                }
                const test = this.halfOpen(fn, signal);
                this.innerState = {
                    value: CircuitState.HalfOpen,
                    test,
                    backoff: state.backoff,
                    attemptNo: state.attemptNo + 1
                };
                this.stateChangeEmitter.emit(CircuitState.HalfOpen);
                return test;
            case CircuitState.Isolated:
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$IsolatedCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["IsolatedCircuitError"]();
            default:
                throw new Error(`Unexpected circuit state ${state}`);
        }
    }
    /**
     * Captures circuit breaker state that can later be used to recreate the
     * breaker by passing `state` to the `circuitBreaker` function. This is
     * useful in cases like serverless functions where you may want to keep
     * the breaker state across multiple executions.
     */ toJSON() {
        const state = this.innerState;
        let ownState;
        if (state.value === CircuitState.HalfOpen) {
            ownState = {
                value: CircuitState.Open,
                openedAt: 0,
                attemptNo: state.attemptNo
            };
        } else if (state.value === CircuitState.Open) {
            ownState = {
                value: CircuitState.Open,
                openedAt: state.openedAt,
                attemptNo: state.attemptNo
            };
        } else {
            ownState = state;
        }
        return {
            ownState,
            breakerState: this.options.breaker.state
        };
    }
    async halfOpen(fn, signal) {
        this.halfOpenEmitter.emit();
        try {
            const result = await this.executor.invoke(fn, {
                signal
            });
            if ('success' in result) {
                this.options.breaker.success(CircuitState.HalfOpen);
                this.close();
            } else {
                this.innerLastFailure = result;
                this.options.breaker.failure(CircuitState.HalfOpen);
                this.open(result, signal);
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["returnOrThrow"])(result);
        } catch (err) {
            // It's an error, but not one the circuit is meant to retry, so
            // for our purposes it's a success. Task failed successfully!
            this.close();
            throw err;
        }
    }
    open(reason, signal) {
        if (this.state === CircuitState.Isolated || this.state === CircuitState.Open) {
            return;
        }
        const attemptNo = this.innerState.value === CircuitState.HalfOpen ? this.innerState.attemptNo : 1;
        const context = {
            attempt: attemptNo,
            result: reason,
            signal
        };
        const backoff = this.innerState.value === CircuitState.HalfOpen ? this.innerState.backoff.next(context) : this.halfOpenAfterBackoffFactory.next(context);
        this.innerState = {
            value: CircuitState.Open,
            openedAt: Date.now(),
            backoff,
            attemptNo
        };
        this.breakEmitter.emit(reason);
        this.stateChangeEmitter.emit(CircuitState.Open);
    }
    close() {
        if (this.state === CircuitState.HalfOpen) {
            this.innerState = {
                value: CircuitState.Closed
            };
            this.resetEmitter.emit();
            this.stateChangeEmitter.emit(CircuitState.Closed);
        }
    }
} //# sourceMappingURL=CircuitBreakerPolicy.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/breaker/CountBreaker.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "CountBreaker": (()=>CountBreaker)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/CircuitBreakerPolicy.js [app-route] (ecmascript)");
;
class CountBreaker {
    /**
     * @inheritdoc
     */ get state() {
        return {
            samples: this.samples,
            currentSample: this.currentSample,
            failures: this.failures,
            successes: this.successes
        };
    }
    /**
     * @inheritdoc
     */ set state(value) {
        Object.assign(this, value);
    }
    /**
     * CountBreaker breaks if more than `threshold` percentage of the last `size`
     * calls failed, so long as at least `minimumNumberOfCalls` calls have been
     * performed (to avoid opening unnecessarily if there are only few samples
     * in the sliding window yet).
     */ constructor({ threshold, size, minimumNumberOfCalls = size }){
        this.successes = 0;
        this.failures = 0;
        this.currentSample = 0;
        if (threshold <= 0 || threshold >= 1) {
            throw new RangeError(`CountBreaker threshold should be between (0, 1), got ${threshold}`);
        }
        if (!Number.isSafeInteger(size) || size < 1) {
            throw new RangeError(`CountBreaker size should be a positive integer, got ${size}`);
        }
        if (!Number.isSafeInteger(minimumNumberOfCalls) || minimumNumberOfCalls < 1 || minimumNumberOfCalls > size) {
            throw new RangeError(`CountBreaker size should be an integer between (1, size), got ${minimumNumberOfCalls}`);
        }
        this.threshold = threshold;
        this.minimumNumberOfCalls = minimumNumberOfCalls;
        this.samples = Array.from({
            length: size
        }, ()=>null);
    }
    /**
     * @inheritdoc
     */ success(state) {
        if (state === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CircuitState"].HalfOpen) {
            this.reset();
        }
        this.sample(true);
    }
    /**
     * @inheritdoc
     */ failure(state) {
        this.sample(false);
        if (state !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CircuitState"].Closed) {
            return true;
        }
        const total = this.successes + this.failures;
        if (total < this.minimumNumberOfCalls) {
            return false;
        }
        if (this.failures > this.threshold * total) {
            return true;
        }
        return false;
    }
    reset() {
        this.samples.fill(null);
        this.successes = 0;
        this.failures = 0;
    }
    sample(success) {
        const current = this.samples[this.currentSample];
        if (current === true) {
            this.successes--;
        } else if (current === false) {
            this.failures--;
        }
        this.samples[this.currentSample] = success;
        if (success) {
            this.successes++;
        } else {
            this.failures++;
        }
        this.currentSample = (this.currentSample + 1) % this.samples.length;
    }
} //# sourceMappingURL=CountBreaker.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/breaker/SamplingBreaker.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "SamplingBreaker": (()=>SamplingBreaker)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/CircuitBreakerPolicy.js [app-route] (ecmascript)");
;
class SamplingBreaker {
    /**
     * @inheritdoc
     */ get state() {
        return {
            windows: this.windows,
            currentWindow: this.currentWindow,
            currentFailures: this.currentFailures,
            currentSuccesses: this.currentSuccesses
        };
    }
    /**
     * @inheritdoc
     */ set state(value) {
        Object.assign(this, value);
    }
    /**
     * SamplingBreaker breaks if more than `threshold` percentage of calls over the
     * last `samplingDuration`, so long as there's at least `minimumRps` (to avoid
     * opening unnecessarily under low RPS).
     */ constructor({ threshold, duration: samplingDuration, minimumRps }){
        this.windows = [];
        this.currentWindow = 0;
        this.currentFailures = 0;
        this.currentSuccesses = 0;
        if (threshold <= 0 || threshold >= 1) {
            throw new RangeError(`SamplingBreaker threshold should be between (0, 1), got ${threshold}`);
        }
        this.threshold = threshold;
        // at least 5 windows, max 1 second each:
        const windowCount = Math.max(5, Math.ceil(samplingDuration / 1000));
        for(let i = 0; i < windowCount; i++){
            this.windows.push({
                startedAt: 0,
                failures: 0,
                successes: 0
            });
        }
        this.windowSize = Math.round(samplingDuration / windowCount);
        this.duration = this.windowSize * windowCount;
        if (minimumRps) {
            this.minimumRpms = minimumRps / 1000;
        } else {
            // for our rps guess, set it so at least 5 failures per second
            // are needed to open the circuit
            this.minimumRpms = 5 / (threshold * 1000);
        }
    }
    /**
     * @inheritdoc
     */ success(state) {
        if (state === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CircuitState"].HalfOpen) {
            this.resetWindows();
        }
        this.push(true);
    }
    /**
     * @inheritdoc
     */ failure(state) {
        this.push(false);
        if (state !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CircuitState"].Closed) {
            return true;
        }
        const total = this.currentSuccesses + this.currentFailures;
        // If we don't have enough rps, then the circuit is open.
        // 1. `total / samplingDuration` gets rps
        // 2. We want `rpms < minimumRpms`
        // 3. Simplifies to `total < samplingDuration * minimumRps`
        if (total < this.duration * this.minimumRpms) {
            return false;
        }
        // If we're above threshold, open the circuit
        // 1. `failures / total > threshold`
        // 2. `failures > threshold * total`
        if (this.currentFailures > this.threshold * total) {
            return true;
        }
        return false;
    }
    resetWindows() {
        this.currentFailures = 0;
        this.currentSuccesses = 0;
        for (const window of this.windows){
            window.failures = 0;
            window.successes = 0;
            window.startedAt = 0;
        }
    }
    rotateWindow(now) {
        const next = (this.currentWindow + 1) % this.windows.length;
        this.currentFailures -= this.windows[next].failures;
        this.currentSuccesses -= this.windows[next].successes;
        const window = this.windows[next] = {
            failures: 0,
            successes: 0,
            startedAt: now
        };
        this.currentWindow = next;
        return window;
    }
    push(success) {
        const now = Date.now();
        // Get the current time period window, advance if necessary
        let window = this.windows[this.currentWindow];
        if (now - window.startedAt >= this.windowSize) {
            window = this.rotateWindow(now);
        }
        // Increment current counts
        if (success) {
            window.successes++;
            this.currentSuccesses++;
        } else {
            window.failures++;
            this.currentFailures++;
        }
    }
} //# sourceMappingURL=SamplingBreaker.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/breaker/Breaker.js [app-route] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConsecutiveBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$ConsecutiveBreaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConsecutiveBreaker"]),
    "CountBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$CountBreaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CountBreaker"]),
    "SamplingBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$SamplingBreaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SamplingBreaker"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$ConsecutiveBreaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/breaker/ConsecutiveBreaker.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$CountBreaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/breaker/CountBreaker.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$SamplingBreaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/breaker/SamplingBreaker.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/breaker/Breaker.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/cockatiel/dist/esm/breaker/Breaker.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ConsecutiveBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ConsecutiveBreaker"]),
    "CountBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["CountBreaker"]),
    "SamplingBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["SamplingBreaker"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/breaker/Breaker.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/breaker/Breaker.js [app-route] (ecmascript) <exports>");
}}),
"[project]/node_modules/cockatiel/dist/esm/common/defer.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "defer": (()=>defer)
});
const defer = ()=>{
    let resolve;
    let reject;
    const promise = new Promise((res, rej)=>{
        resolve = res;
        reject = rej;
    });
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    return {
        resolve: resolve,
        reject: reject,
        promise
    };
}; //# sourceMappingURL=defer.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/errors/BulkheadRejectedError.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BulkheadRejectedError": (()=>BulkheadRejectedError)
});
class BulkheadRejectedError extends Error {
    constructor(executionSlots, queueSlots){
        super(`Bulkhead capacity exceeded (0/${executionSlots} execution slots, 0/${queueSlots} available)`);
        this.isBulkheadRejectedError = true;
    }
} //# sourceMappingURL=BulkheadRejectedError.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/BulkheadPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BulkheadPolicy": (()=>BulkheadPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/abort.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$defer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/defer.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Event.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Executor.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$BulkheadRejectedError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/BulkheadRejectedError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/TaskCancelledError.js [app-route] (ecmascript)");
;
;
;
;
;
;
class BulkheadPolicy {
    /**
     * Returns the number of available execution slots at this point in time.
     */ get executionSlots() {
        return this.capacity - this.active;
    }
    /**
     * Returns the number of queue slots at this point in time.
     */ get queueSlots() {
        return this.queueCapacity - this.queue.length;
    }
    /**
     * Bulkhead limits concurrent requests made.
     */ constructor(capacity, queueCapacity){
        this.capacity = capacity;
        this.queueCapacity = queueCapacity;
        this.active = 0;
        this.queue = [];
        this.onRejectEmitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]();
        this.executor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ExecuteWrapper"]();
        /**
         * @inheritdoc
         */ this.onSuccess = this.executor.onSuccess;
        /**
         * @inheritdoc
         */ this.onFailure = this.executor.onFailure;
        /**
         * Emitter that fires when an item is rejected from the bulkhead.
         */ this.onReject = this.onRejectEmitter.addListener;
    }
    /**
     * Executes the given function.
     * @param fn Function to execute
     * @throws a {@link BulkheadRejectedException} if the bulkhead limits are exceeeded
     */ async execute(fn, signal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["neverAbortedSignal"]) {
        if (signal.aborted) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TaskCancelledError"]();
        }
        if (this.active < this.capacity) {
            this.active++;
            try {
                return await fn({
                    signal
                });
            } finally{
                this.active--;
                this.dequeue();
            }
        }
        if (this.queue.length < this.queueCapacity) {
            const { resolve, reject, promise } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$defer$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["defer"])();
            this.queue.push({
                signal,
                fn,
                resolve,
                reject
            });
            return promise;
        }
        this.onRejectEmitter.emit();
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$BulkheadRejectedError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BulkheadRejectedError"](this.capacity, this.queueCapacity);
    }
    dequeue() {
        const item = this.queue.shift();
        if (!item) {
            return;
        }
        Promise.resolve().then(()=>this.execute(item.fn, item.signal)).then(item.resolve).catch(item.reject);
    }
} //# sourceMappingURL=BulkheadPolicy.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/errors/Errors.js [app-route] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isBrokenCircuitError": (()=>isBrokenCircuitError),
    "isBulkheadRejectedError": (()=>isBulkheadRejectedError),
    "isHydratingCircuitError": (()=>isHydratingCircuitError),
    "isIsolatedCircuitError": (()=>isIsolatedCircuitError),
    "isTaskCancelledError": (()=>isTaskCancelledError)
});
;
;
;
;
;
const isBrokenCircuitError = (e)=>!!e && e instanceof Error && 'isBrokenCircuitError' in e;
const isBulkheadRejectedError = (e)=>!!e && e instanceof Error && 'isBulkheadRejectedError' in e;
const isIsolatedCircuitError = (e)=>!!e && e instanceof Error && 'isBulkheadRejectedError' in e;
const isTaskCancelledError = (e)=>!!e && e instanceof Error && 'isBulkheadRejectedError' in e;
const isHydratingCircuitError = (e)=>!!e && e instanceof Error && 'isHydratingCircuitError' in e; //# sourceMappingURL=Errors.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/errors/Errors.js [app-route] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/Errors.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/cockatiel/dist/esm/errors/Errors.js [app-route] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrokenCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$BrokenCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BrokenCircuitError"]),
    "BulkheadRejectedError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$BulkheadRejectedError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BulkheadRejectedError"]),
    "HydratingCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$HydratingCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HydratingCircuitError"]),
    "IsolatedCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$IsolatedCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["IsolatedCircuitError"]),
    "TaskCancelledError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TaskCancelledError"]),
    "isBrokenCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isBrokenCircuitError"]),
    "isBulkheadRejectedError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isBulkheadRejectedError"]),
    "isHydratingCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isHydratingCircuitError"]),
    "isIsolatedCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isIsolatedCircuitError"]),
    "isTaskCancelledError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__["isTaskCancelledError"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$BrokenCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/BrokenCircuitError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$BulkheadRejectedError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/BulkheadRejectedError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$HydratingCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/HydratingCircuitError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$IsolatedCircuitError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/IsolatedCircuitError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/TaskCancelledError.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/Errors.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/cockatiel/dist/esm/errors/Errors.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrokenCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BrokenCircuitError"]),
    "BulkheadRejectedError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BulkheadRejectedError"]),
    "HydratingCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["HydratingCircuitError"]),
    "IsolatedCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["IsolatedCircuitError"]),
    "TaskCancelledError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["TaskCancelledError"]),
    "isBrokenCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isBrokenCircuitError"]),
    "isBulkheadRejectedError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isBulkheadRejectedError"]),
    "isHydratingCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isHydratingCircuitError"]),
    "isIsolatedCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isIsolatedCircuitError"]),
    "isTaskCancelledError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isTaskCancelledError"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/Errors.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/Errors.js [app-route] (ecmascript) <exports>");
}}),
"[project]/node_modules/cockatiel/dist/esm/FallbackPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "FallbackPolicy": (()=>FallbackPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/abort.js [app-route] (ecmascript)");
;
class FallbackPolicy {
    constructor(executor, value){
        this.executor = executor;
        this.value = value;
        /**
         * @inheritdoc
         */ this.onSuccess = this.executor.onSuccess;
        /**
         * @inheritdoc
         */ this.onFailure = this.executor.onFailure;
    }
    /**
     * Executes the given function.
     * @param fn Function to execute.
     * @returns The function result or fallback value.
     */ async execute(fn, signal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["neverAbortedSignal"]) {
        const result = await this.executor.invoke(fn, {
            signal
        });
        if ('success' in result) {
            return result.success;
        }
        return this.value();
    }
} //# sourceMappingURL=FallbackPolicy.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/NoopPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "NoopPolicy": (()=>NoopPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/abort.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Executor.js [app-route] (ecmascript)");
;
;
class NoopPolicy {
    constructor(){
        this.executor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ExecuteWrapper"]();
        this.onSuccess = this.executor.onSuccess;
        this.onFailure = this.executor.onFailure;
    }
    async execute(fn, signal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["neverAbortedSignal"]) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["returnOrThrow"])(await this.executor.invoke(fn, {
            signal
        }));
    }
} //# sourceMappingURL=NoopPolicy.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/RetryPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "RetryPolicy": (()=>RetryPolicy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ConstantBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/ConstantBackoff.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/abort.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Event.js [app-route] (ecmascript)");
;
;
;
const delay = (duration, unref)=>new Promise((resolve)=>{
        const timer = setTimeout(resolve, duration);
        if (unref) {
            timer.unref();
        }
    });
class RetryPolicy {
    constructor(options, executor){
        this.options = options;
        this.executor = executor;
        this.onGiveUpEmitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]();
        this.onRetryEmitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]();
        /**
         * @inheritdoc
         */ this.onSuccess = this.executor.onSuccess;
        /**
         * @inheritdoc
         */ this.onFailure = this.executor.onFailure;
        /**
         * Emitter that fires when we retry a call, before any backoff.
         *
         */ this.onRetry = this.onRetryEmitter.addListener;
        /**
         * Emitter that fires when we're no longer retrying a call and are giving up.
         */ this.onGiveUp = this.onGiveUpEmitter.addListener;
    }
    /**
     * When retrying, a referenced timer is created. This means the Node.js event
     * loop is kept active while we're delaying a retried call. Calling this
     * method on the retry builder will unreference the timer, allowing the
     * process to exit even if a retry might still be pending.
     */ dangerouslyUnref() {
        return new RetryPolicy({
            ...this.options,
            unref: true
        }, this.executor.clone());
    }
    /**
     * Executes the given function with retries.
     * @param fn Function to run
     * @returns a Promise that resolves or rejects with the function results.
     */ async execute(fn, signal = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["neverAbortedSignal"]) {
        const factory = this.options.backoff || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ConstantBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConstantBackoff"](0);
        let backoff;
        for(let retries = 0;; retries++){
            const result = await this.executor.invoke(fn, {
                attempt: retries,
                signal
            });
            if ('success' in result) {
                return result.success;
            }
            if (!signal.aborted && retries < this.options.maxAttempts) {
                const context = {
                    attempt: retries + 1,
                    signal,
                    result
                };
                backoff = backoff ? backoff.next(context) : factory.next(context);
                const delayDuration = backoff.duration;
                const delayPromise = delay(delayDuration, !!this.options.unref);
                // A little sneaky reordering here lets us use Sinon's fake timers
                // when we get an emission in our tests.
                this.onRetryEmitter.emit({
                    ...result,
                    delay: delayDuration,
                    attempt: retries + 1
                });
                await delayPromise;
                continue;
            }
            this.onGiveUpEmitter.emit(result);
            if ('error' in result) {
                throw result.error;
            }
            return result.value;
        }
    }
} //# sourceMappingURL=RetryPolicy.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/TimeoutPolicy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "TimeoutPolicy": (()=>TimeoutPolicy),
    "TimeoutStrategy": (()=>TimeoutStrategy)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/abort.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Event.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Executor.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/TaskCancelledError.js [app-route] (ecmascript)");
;
;
;
;
var TimeoutStrategy;
(function(TimeoutStrategy) {
    /**
     * Cooperative timeouts will simply revoke the inner cancellation token,
     * assuming the caller handles cancellation and throws or returns appropriately.
     */ TimeoutStrategy["Cooperative"] = "optimistic";
    /**
     * Aggressive cancellation immediately throws
     */ TimeoutStrategy["Aggressive"] = "aggressive";
})(TimeoutStrategy || (TimeoutStrategy = {}));
class TimeoutPolicy {
    constructor(duration, options, executor = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ExecuteWrapper"](), unref = false){
        this.duration = duration;
        this.options = options;
        this.executor = executor;
        this.unref = unref;
        this.timeoutEmitter = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]();
        /**
         * @inheritdoc
         */ this.onTimeout = this.timeoutEmitter.addListener;
        /**
         * @inheritdoc
         */ this.onFailure = this.executor.onFailure;
        /**
         * @inheritdoc
         */ this.onSuccess = this.executor.onSuccess;
    }
    /**
     * When timing out, a referenced timer is created. This means the Node.js
     * event loop is kept active while we're waiting for the timeout, as long as
     * the function hasn't returned. Calling this method on the timeout builder
     * will unreference the timer, allowing the process to exit even if a
     * timeout might still be happening.
     */ dangerouslyUnref() {
        const t = new TimeoutPolicy(this.duration, this.options, this.executor, true);
        return t;
    }
    /**
     * Executes the given function.
     * @param fn Function to execute. Takes in a nested cancellation token.
     * @throws a {@link TaskCancelledError} if a timeout occurs
     */ async execute(fn, signal) {
        const { ctrl: aborter, dispose: disposeAbort } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$abort$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["deriveAbortController"])(signal);
        const timer = setTimeout(()=>aborter.abort(), this.duration);
        if (this.unref) {
            timer.unref();
        }
        const context = {
            signal: aborter.signal
        };
        const onceAborted = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["onAbort"])(aborter.signal);
        const onCancelledListener = onceAborted.event(()=>this.timeoutEmitter.emit());
        try {
            if (this.options.strategy === TimeoutStrategy.Cooperative) {
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["returnOrThrow"])(await this.executor.invoke(fn, context, aborter.signal));
            }
            return await this.executor.invoke(async ()=>Promise.race([
                    Promise.resolve(fn(context, aborter.signal)),
                    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Event"].toPromise(onceAborted.event).then(()=>{
                        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$TaskCancelledError$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TaskCancelledError"](`Operation timed out after ${this.duration}ms`);
                    })
                ])).then(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["returnOrThrow"]);
        } finally{
            onCancelledListener.dispose();
            onceAborted.dispose();
            if (this.options.abortOnReturn !== false) {
                aborter.abort();
            }
            clearTimeout(timer);
            disposeAbort();
        }
    }
} //# sourceMappingURL=TimeoutPolicy.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/Policy.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "Policy": (()=>Policy),
    "bulkhead": (()=>bulkhead),
    "circuitBreaker": (()=>circuitBreaker),
    "fallback": (()=>fallback),
    "handleAll": (()=>handleAll),
    "handleResultType": (()=>handleResultType),
    "handleType": (()=>handleType),
    "handleWhen": (()=>handleWhen),
    "handleWhenResult": (()=>handleWhenResult),
    "noop": (()=>noop),
    "retry": (()=>retry),
    "timeout": (()=>timeout),
    "usePolicy": (()=>usePolicy),
    "wrap": (()=>wrap)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ConstantBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/ConstantBackoff.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$BulkheadPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/BulkheadPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/CircuitBreakerPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Executor.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$FallbackPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/FallbackPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$NoopPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/NoopPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$RetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/RetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$TimeoutPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/TimeoutPolicy.js [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
const typeFilter = (cls, predicate)=>predicate ? (v)=>v instanceof cls && predicate(v) : (v)=>v instanceof cls;
const always = ()=>true;
const never = ()=>false;
class Policy {
    /**
     * Factory that builds a base set of filters that can be used in circuit
     * breakers, retries, etc.
     */ constructor(options){
        this.options = options;
    }
    /**
     * Allows the policy to additionally handles errors of the given type.
     *
     * @param cls Class constructor to check that the error is an instance of.
     * @param predicate If provided, a function to be called with the error
     * which should return "true" if we want to handle this error.
     * @example
     * ```js
     * // retry both network errors and response errors with a 503 status code
     * new Policy()
     *  .orType(NetworkError)
     *  .orType(ResponseError, err => err.statusCode === 503)
     *  .retry()
     *  .attempts(3)
     *  .execute(() => getJsonFrom('https://example.com'));
     * ```
     */ orType(cls, predicate) {
        const filter = typeFilter(cls, predicate);
        return new Policy({
            ...this.options,
            errorFilter: (e)=>this.options.errorFilter(e) || filter(e)
        });
    }
    /**
     * Allows the policy to additionally handles errors that pass the given
     * predicate function.
     *
     * @param predicate Takes any thrown error, and returns true if it should
     * be retried by this policy.
     * @example
     * ```js
     * // only retry if the error has a "shouldBeRetried" property set
     * new Policy()
     *  .orWhen(err => err.shouldBeRetried === true)
     *  .retry()
     *  .attempts(3)
     *  .execute(() => getJsonFrom('https://example.com'));
     * ```
     */ orWhen(predicate) {
        return new Policy({
            ...this.options,
            errorFilter: (e)=>this.options.errorFilter(e) || predicate(e)
        });
    }
    /**
     * Adds handling for return values. The predicate will be called with
     * the return value of the executed function,
     *
     * @param predicate Takes the returned value, and returns true if it
     * should be retried by this policy.
     * @example
     * ```js
     * // retry when the response status code is a 5xx
     * new Policy()
     *  .orResultWhen(res => res.statusCode >= 500)
     *  .retry()
     *  .attempts(3)
     *  .execute(() => getJsonFrom('https://example.com'));
     * ```
     */ orWhenResult(predicate) {
        return new Policy({
            ...this.options,
            resultFilter: (r)=>this.options.resultFilter(r) || predicate(r)
        });
    }
    /**
     * Adds handling for return values. The predicate will be called with
     * the return value of the executed function,
     *
     * @param predicate Takes the returned value, and returns true if it
     * should be retried by this policy.
     * @example
     * ```js
     * // retry when the response status code is a 5xx
     * new Policy()
     *  .orResultType(res => res.statusCode >= 500)
     *  .retry()
     *  .attempts(3)
     *  .execute(() => getJsonFrom('https://example.com'));
     * ```
     */ orResultType(cls, predicate) {
        const filter = typeFilter(cls, predicate);
        return new Policy({
            ...this.options,
            resultFilter: (r)=>this.options.resultFilter(r) || filter(r)
        });
    }
}
const noop = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$NoopPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["NoopPolicy"]();
const handleAll = new Policy({
    errorFilter: always,
    resultFilter: never
});
function handleType(cls, predicate) {
    return new Policy({
        errorFilter: typeFilter(cls, predicate),
        resultFilter: never
    });
}
function handleWhen(predicate) {
    return new Policy({
        errorFilter: predicate,
        resultFilter: never
    });
}
function handleResultType(cls, predicate) {
    return new Policy({
        errorFilter: never,
        resultFilter: typeFilter(cls, predicate)
    });
}
function handleWhenResult(predicate) {
    return new Policy({
        errorFilter: never,
        resultFilter: predicate
    });
}
function bulkhead(limit, queue = 0) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$BulkheadPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BulkheadPolicy"](limit, queue);
}
function usePolicy(policy) {
    return (_target, _key, descriptor)=>{
        const inner = descriptor.value;
        if (typeof inner !== 'function') {
            throw new Error(`Can only decorate functions with @cockatiel, got ${typeof inner}`);
        }
        descriptor.value = function(...args) {
            const signal = args[args.length - 1] instanceof AbortSignal ? args.pop() : undefined;
            return policy.execute((context)=>inner.apply(this, [
                    ...args,
                    context
                ]), signal);
        };
    };
}
function timeout(duration, strategyOrOpts) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$TimeoutPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TimeoutPolicy"](duration, typeof strategyOrOpts === 'string' ? {
        strategy: strategyOrOpts
    } : strategyOrOpts);
}
function wrap(...p) {
    return {
        _altReturn: undefined,
        onFailure: p[0].onFailure,
        onSuccess: p[0].onSuccess,
        wrapped: p,
        execute (fn, signal) {
            const run = (context, i)=>i === p.length ? fn(context) : p[i].execute((next)=>run({
                        ...context,
                        ...next
                    }, i + 1), context.signal);
            return Promise.resolve(run({
                signal
            }, 0));
        }
    };
}
function retry(policy, opts) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$RetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RetryPolicy"]({
        backoff: opts.backoff || new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$ConstantBackoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConstantBackoff"](0),
        maxAttempts: opts.maxAttempts ?? Infinity
    }, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ExecuteWrapper"](policy.options.errorFilter, policy.options.resultFilter));
}
function circuitBreaker(policy, opts) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CircuitBreakerPolicy"](opts, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ExecuteWrapper"](policy.options.errorFilter, policy.options.resultFilter));
}
function fallback(policy, valueOrFactory) {
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$FallbackPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FallbackPolicy"](new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Executor$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ExecuteWrapper"](policy.options.errorFilter, policy.options.resultFilter), typeof valueOrFactory === 'function' ? valueOrFactory : ()=>valueOrFactory);
} //# sourceMappingURL=Policy.js.map
}}),
"[project]/node_modules/cockatiel/dist/esm/index.js [app-route] (ecmascript) <exports>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrokenCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BrokenCircuitError"]),
    "BulkheadPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$BulkheadPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BulkheadPolicy"]),
    "BulkheadRejectedError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BulkheadRejectedError"]),
    "CircuitBreakerPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CircuitBreakerPolicy"]),
    "CircuitState": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CircuitState"]),
    "ConsecutiveBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConsecutiveBreaker"]),
    "ConstantBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ConstantBackoff"]),
    "CountBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["CountBreaker"]),
    "DelegateBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DelegateBackoff"]),
    "Event": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Event"]),
    "EventEmitter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["EventEmitter"]),
    "ExponentialBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ExponentialBackoff"]),
    "FallbackPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$FallbackPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["FallbackPolicy"]),
    "HydratingCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["HydratingCircuitError"]),
    "IsolatedCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["IsolatedCircuitError"]),
    "IterableBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["IterableBackoff"]),
    "NoopPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$NoopPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["NoopPolicy"]),
    "Policy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Policy"]),
    "RetryPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$RetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RetryPolicy"]),
    "SamplingBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SamplingBreaker"]),
    "TaskCancelledError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TaskCancelledError"]),
    "TimeoutPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$TimeoutPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TimeoutPolicy"]),
    "TimeoutStrategy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$TimeoutPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TimeoutStrategy"]),
    "bulkhead": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["bulkhead"]),
    "circuitBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["circuitBreaker"]),
    "decorrelatedJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["decorrelatedJitterGenerator"]),
    "fallback": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fallback"]),
    "fullJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["fullJitterGenerator"]),
    "halfJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["halfJitterGenerator"]),
    "handleAll": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["handleAll"]),
    "handleResultType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["handleResultType"]),
    "handleType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["handleType"]),
    "handleWhen": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["handleWhen"]),
    "handleWhenResult": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["handleWhenResult"]),
    "isBrokenCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isBrokenCircuitError"]),
    "isBulkheadRejectedError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isBulkheadRejectedError"]),
    "isHydratingCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isHydratingCircuitError"]),
    "isIsolatedCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isIsolatedCircuitError"]),
    "isTaskCancelledError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isTaskCancelledError"]),
    "noJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["noJitterGenerator"]),
    "noop": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["noop"]),
    "retry": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["retry"]),
    "timeout": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["timeout"]),
    "usePolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["usePolicy"]),
    "wrap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["wrap"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$backoff$2f$Backoff$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/backoff/Backoff.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$breaker$2f$Breaker$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/breaker/Breaker.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$BulkheadPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/BulkheadPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$CircuitBreakerPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/CircuitBreakerPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$common$2f$Event$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/common/Event.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$errors$2f$Errors$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/errors/Errors.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$FallbackPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/FallbackPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$NoopPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/NoopPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$Policy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/Policy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$RetryPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/RetryPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$TimeoutPolicy$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/TimeoutPolicy.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/index.js [app-route] (ecmascript) <locals>");
}}),
"[project]/node_modules/cockatiel/dist/esm/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "BrokenCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BrokenCircuitError"]),
    "BulkheadPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BulkheadPolicy"]),
    "BulkheadRejectedError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["BulkheadRejectedError"]),
    "CircuitBreakerPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["CircuitBreakerPolicy"]),
    "CircuitState": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["CircuitState"]),
    "ConsecutiveBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ConsecutiveBreaker"]),
    "ConstantBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ConstantBackoff"]),
    "CountBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["CountBreaker"]),
    "DelegateBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["DelegateBackoff"]),
    "Event": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Event"]),
    "EventEmitter": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["EventEmitter"]),
    "ExponentialBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["ExponentialBackoff"]),
    "FallbackPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["FallbackPolicy"]),
    "HydratingCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["HydratingCircuitError"]),
    "IsolatedCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["IsolatedCircuitError"]),
    "IterableBackoff": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["IterableBackoff"]),
    "NoopPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["NoopPolicy"]),
    "Policy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["Policy"]),
    "RetryPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["RetryPolicy"]),
    "SamplingBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["SamplingBreaker"]),
    "TaskCancelledError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["TaskCancelledError"]),
    "TimeoutPolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["TimeoutPolicy"]),
    "TimeoutStrategy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["TimeoutStrategy"]),
    "bulkhead": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["bulkhead"]),
    "circuitBreaker": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["circuitBreaker"]),
    "decorrelatedJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["decorrelatedJitterGenerator"]),
    "fallback": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fallback"]),
    "fullJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["fullJitterGenerator"]),
    "halfJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["halfJitterGenerator"]),
    "handleAll": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["handleAll"]),
    "handleResultType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["handleResultType"]),
    "handleType": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["handleType"]),
    "handleWhen": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["handleWhen"]),
    "handleWhenResult": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["handleWhenResult"]),
    "isBrokenCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isBrokenCircuitError"]),
    "isBulkheadRejectedError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isBulkheadRejectedError"]),
    "isHydratingCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isHydratingCircuitError"]),
    "isIsolatedCircuitError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isIsolatedCircuitError"]),
    "isTaskCancelledError": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["isTaskCancelledError"]),
    "noJitterGenerator": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["noJitterGenerator"]),
    "noop": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["noop"]),
    "retry": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["retry"]),
    "timeout": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["timeout"]),
    "usePolicy": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["usePolicy"]),
    "wrap": (()=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__["wrap"])
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/index.js [app-route] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$cockatiel$2f$dist$2f$esm$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__$3c$exports$3e$__ = __turbopack_context__.i("[project]/node_modules/cockatiel/dist/esm/index.js [app-route] (ecmascript) <exports>");
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apsService.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ApsService = void 0;
const axios_1 = __turbopack_context__.r("[project]/node_modules/axios/dist/node/axios.cjs [app-route] (ecmascript)");
const cockatiel_1 = __turbopack_context__.r("[project]/node_modules/cockatiel/dist/esm/index.js [app-route] (ecmascript)");
class ApsService {
    constructor(config){
        this.retryPolicy = this.createRetryPolicy(config);
        this.circuitBreakerPolicy = this.createCircuitBreakerPolicy(config);
        this.timeoutPolicy = this.createTimeoutPolicy(config);
        this.resiliencePolicy = (0, cockatiel_1.wrap)(this.circuitBreakerPolicy, this.retryPolicy, this.timeoutPolicy);
    }
    createRetryPolicy(config) {
        return (0, cockatiel_1.retry)((0, cockatiel_1.handleType)(axios_1.AxiosError, (err)=>{
            var _a;
            return ApsService.RETRYABLE_STATUS_CODES.includes((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status);
        }).orWhen((err)=>{
            // check if err quacks like an ISDKError
            return 'httpStatusCode' in err && err.httpStatusCode instanceof Function && ApsService.RETRYABLE_STATUS_CODES.includes(err.httpStatusCode());
        }), {
            maxAttempts: config.retryCount,
            backoff: new cockatiel_1.ExponentialBackoff({
                maxDelay: config.backoffInterval
            })
        });
    }
    createCircuitBreakerPolicy(config) {
        return (0, cockatiel_1.circuitBreaker)(cockatiel_1.handleAll, {
            breaker: new cockatiel_1.ConsecutiveBreaker(config.retryCount),
            halfOpenAfter: config.circuitBreakerInterval
        });
    }
    createTimeoutPolicy(config) {
        return (0, cockatiel_1.timeout)(config.timeOutValue, cockatiel_1.TimeoutStrategy.Aggressive);
    }
    request(config) {
        return __awaiter(this, void 0, void 0, function*() {
            return this.resiliencePolicy.execute(()=>axios_1.default.request(config));
        });
    }
}
exports.ApsService = ApsService;
ApsService.RETRYABLE_STATUS_CODES = [
    408,
    429,
    502,
    503,
    504
];
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/resiliencyConfiguration.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ResiliencyConfiguration = void 0;
class ResiliencyConfiguration {
    constructor(retryCount = 5, backoffInterval = 10, circuitBreakerInterval = 60 * 1000, timeoutValue = 15000){
        this.toString = ()=>{
            return `ResiliencyConfiguration (TimeOutValue: ${this._timeoutValue}) RetryCount: ${this._retryCount}) (BackoffInterval: ${this._backoffInterval})  (CircuitBreakerInterval: ${this._circuitBreakerInterval}) `;
        };
        this._retryCount = retryCount;
        this._backoffInterval = backoffInterval;
        this._circuitBreakerInterval = circuitBreakerInterval;
        this._timeoutValue = timeoutValue;
    }
    get retryCount() {
        return this._retryCount;
    }
    set retryCount(retryCount) {
        this._retryCount = retryCount;
    }
    get backoffInterval() {
        return this._backoffInterval;
    }
    get timeOutValue() {
        return this._timeoutValue;
    }
    set timeOutValue(timeOutValue) {
        this._timeoutValue = timeOutValue;
    }
    set backoffInterval(backoffInterval) {
        this._backoffInterval = backoffInterval;
    }
    set circuitBreakerInterval(circuitBreakerInterval) {
        this._circuitBreakerInterval = circuitBreakerInterval;
    }
    get circuitBreakerInterval() {
        return this._circuitBreakerInterval;
    }
}
exports.ResiliencyConfiguration = ResiliencyConfiguration;
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apsClient.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ApsClient = void 0;
const apsService_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apsService.js [app-route] (ecmascript)");
const resiliencyConfiguration_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/resiliencyConfiguration.js [app-route] (ecmascript)");
class ApsClient {
    constructor(resiliencyConfig, logger){
        this.resiliencyConfig = new resiliencyConfiguration_1.ResiliencyConfiguration();
        this.resiliencyConfig = resiliencyConfig;
        this._apsService = new apsService_1.ApsService(this.resiliencyConfig);
        this.logger = logger;
        this.logger.logDebug(`Initializing resiliency config:  ${this.resiliencyConfig}`);
    }
    get apsService() {
        return this._apsService;
    }
}
exports.ApsClient = ApsClient;
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apsConfiguration.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ApsConfiguration = exports.AdskEnvironment = void 0;
var AdskEnvironment;
(function(AdskEnvironment) {
    AdskEnvironment[AdskEnvironment["Dev"] = 0] = "Dev";
    AdskEnvironment[AdskEnvironment["Stg"] = 1] = "Stg";
    AdskEnvironment[AdskEnvironment["Prd"] = 2] = "Prd";
    AdskEnvironment[AdskEnvironment["Local"] = 3] = "Local";
})(AdskEnvironment || (exports.AdskEnvironment = AdskEnvironment = {}));
class ApsConfiguration {
    get BaseAddress() {
        return this.baseAddress;
    }
    set BaseAddress(baseAddress) {
        this.baseAddress = baseAddress;
    }
    constructor(apsConfigurationParams){
        this.baseAddress = new URL('https://developer.api.autodesk.com');
        this.baseOptions = apsConfigurationParams.baseOptions;
        this.formDataCtor = apsConfigurationParams.formDataCtor;
        switch(apsConfigurationParams.environment){
            case AdskEnvironment.Local:
                {
                    this.baseAddress = new URL('http://localhost:1234');
                    break;
                }
            case AdskEnvironment.Dev:
                {
                    this.baseAddress = new URL('https://developer-dev.api.autodesk.com');
                    break;
                }
            case AdskEnvironment.Stg:
                {
                    this.baseAddress = new URL('https://developer-stg.api.autodesk.com');
                    break;
                }
            default:
                {
                    this.baseAddress = new URL('https://developer.api.autodesk.com');
                    break;
                }
        }
    }
}
exports.ApsConfiguration = ApsConfiguration;
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/authClientConfiguration.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AuthClientConfiguration = void 0;
class AuthClientConfiguration {
}
exports.AuthClientConfiguration = AuthClientConfiguration;
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/logger.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Logger = exports.LogLevel = void 0;
var LogLevel;
(function(LogLevel) {
    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
    LogLevel[LogLevel["WARN"] = 1] = "WARN";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 3] = "DEBUG";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class Logger {
    constructor(level, enabled){
        this.level = level !== null && level !== void 0 ? level : LogLevel.ERROR;
        this.enabled = enabled !== null && enabled !== void 0 ? enabled : true;
    }
    getLevelPriority(level) {
        switch(level){
            case LogLevel.DEBUG:
                return 1;
            case LogLevel.INFO:
                return 2;
            case LogLevel.WARN:
                return 3;
            case LogLevel.ERROR:
                return 4;
            default:
                return 0;
        }
    }
    initLogger(level) {
        return this.enabled && this.getLevelPriority(level) >= this.getLevelPriority(this.level);
    }
    logDebug(message) {
        if (this.initLogger(LogLevel.DEBUG)) {
            console.debug(`DEBUG: ${message}`);
        }
    }
    logInfo(message) {
        if (this.initLogger(LogLevel.INFO)) {
            console.log(`INFO: ${message}`);
        }
    }
    logWarn(message) {
        if (this.initLogger(LogLevel.WARN)) {
            console.warn(`WARN: ${message}`);
        }
    }
    logError(message) {
        if (this.initLogger(LogLevel.ERROR)) {
            console.error(`ERROR: ${message}`);
        }
    }
    setEnabled(enabled) {
        this.enabled = enabled;
    }
}
exports.Logger = Logger;
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/sdkManager.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SdkManager = void 0;
const apsConfiguration_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apsConfiguration.js [app-route] (ecmascript)");
const resiliencyConfiguration_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/resiliencyConfiguration.js [app-route] (ecmascript)");
const apsClient_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apsClient.js [app-route] (ecmascript)");
const logger_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/logger.js [app-route] (ecmascript)");
class SdkManager {
    constructor(apsConfiguration, resiliencyConfiguration, authClient, logger){
        this._apsConfiguration = apsConfiguration !== null && apsConfiguration !== void 0 ? apsConfiguration : new apsConfiguration_1.ApsConfiguration({});
        this._resiliencyConfiguration = resiliencyConfiguration !== null && resiliencyConfiguration !== void 0 ? resiliencyConfiguration : new resiliencyConfiguration_1.ResiliencyConfiguration();
        this._logger = logger !== null && logger !== void 0 ? logger : new logger_1.Logger();
        this._apsClient = new apsClient_1.ApsClient(this._resiliencyConfiguration, this._logger);
        this._authClient = authClient;
    }
    set logger(logger) {
        this._logger = logger;
    }
    get logger() {
        return this._logger;
    }
    static getInstance(apsConfiguration, resiliencyConfiguration, authClient, logger) {
        return new SdkManager(apsConfiguration, resiliencyConfiguration, authClient, logger);
    }
    get apsClient() {
        return this._apsClient;
    }
    get authClient() {
        return this._authClient;
    }
    get apsConfiguration() {
        return this._apsConfiguration;
    }
    set apsConfiguration(apsConfiguration) {
        this._apsConfiguration = apsConfiguration;
    }
    toggleLogging(enabled) {
        this._logger.setEnabled(enabled);
    }
}
exports.SdkManager = SdkManager;
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/sdkManagerBuilder.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SdkManagerBuilder = void 0;
const sdkManager_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/sdkManager.js [app-route] (ecmascript)");
class SdkManagerBuilder {
    static create() {
        return new SdkManagerBuilder();
    }
    addResiliencyConfiguration(resiliencyConfiguration) {
        this.resiliencyConfiguration = resiliencyConfiguration;
        return this;
    }
    addAuthClient(authClient) {
        this.authClient = authClient;
        return this;
    }
    addApsConfiguration(apsConfiguration) {
        this.apsConfiguration = apsConfiguration;
        return this;
    }
    addLogger(logger) {
        this.logger = logger;
        return this;
    }
    build() {
        return sdkManager_1.SdkManager.getInstance(this.apsConfiguration, this.resiliencyConfiguration, this.authClient, this.logger);
    }
}
exports.SdkManagerBuilder = SdkManagerBuilder;
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apiResponse.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ApiResponse = void 0;
class ApiResponse {
    constructor(response, content){
        this.response = response;
        this.content = content;
    }
}
exports.ApiResponse = ApiResponse;
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/baseClient.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BaseClient = void 0;
class BaseClient {
    get authenticationProvider() {
        return this._authenticationProvider;
    }
    set authenticationProvider(value) {
        this._authenticationProvider = value;
    }
    constructor(authenticationProvider){
        if (authenticationProvider) {
            this._authenticationProvider = authenticationProvider;
        }
    }
}
exports.BaseClient = BaseClient;
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/staticAuthenticationProvider.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StaticAuthenticationProvider = void 0;
class StaticAuthenticationProvider {
    constructor(accessToken){
        this._accessToken = accessToken;
    }
    getAccessToken(scopes) {
        return __awaiter(this, void 0, void 0, function*() {
            return this._accessToken;
        });
    }
}
exports.StaticAuthenticationProvider = StaticAuthenticationProvider;
}}),
"[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/index.js [app-route] (ecmascript)": (function(__turbopack_context__) {

var { g: global, __dirname, m: module, e: exports } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StaticAuthenticationProvider = exports.BaseClient = exports.ApiResponse = exports.SdkManagerBuilder = exports.ApsService = exports.SdkManager = exports.ResiliencyConfiguration = exports.LogLevel = exports.Logger = exports.AuthClientConfiguration = exports.AdskEnvironment = exports.ApsConfiguration = exports.ApsClient = void 0;
var apsClient_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apsClient.js [app-route] (ecmascript)");
Object.defineProperty(exports, "ApsClient", {
    enumerable: true,
    get: function() {
        return apsClient_1.ApsClient;
    }
});
var apsConfiguration_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apsConfiguration.js [app-route] (ecmascript)");
Object.defineProperty(exports, "ApsConfiguration", {
    enumerable: true,
    get: function() {
        return apsConfiguration_1.ApsConfiguration;
    }
});
Object.defineProperty(exports, "AdskEnvironment", {
    enumerable: true,
    get: function() {
        return apsConfiguration_1.AdskEnvironment;
    }
});
var authClientConfiguration_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/authClientConfiguration.js [app-route] (ecmascript)");
Object.defineProperty(exports, "AuthClientConfiguration", {
    enumerable: true,
    get: function() {
        return authClientConfiguration_1.AuthClientConfiguration;
    }
});
var logger_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/logger.js [app-route] (ecmascript)");
Object.defineProperty(exports, "Logger", {
    enumerable: true,
    get: function() {
        return logger_1.Logger;
    }
});
Object.defineProperty(exports, "LogLevel", {
    enumerable: true,
    get: function() {
        return logger_1.LogLevel;
    }
});
var resiliencyConfiguration_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/resiliencyConfiguration.js [app-route] (ecmascript)");
Object.defineProperty(exports, "ResiliencyConfiguration", {
    enumerable: true,
    get: function() {
        return resiliencyConfiguration_1.ResiliencyConfiguration;
    }
});
var sdkManager_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/sdkManager.js [app-route] (ecmascript)");
Object.defineProperty(exports, "SdkManager", {
    enumerable: true,
    get: function() {
        return sdkManager_1.SdkManager;
    }
});
var apsService_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apsService.js [app-route] (ecmascript)");
Object.defineProperty(exports, "ApsService", {
    enumerable: true,
    get: function() {
        return apsService_1.ApsService;
    }
});
var sdkManagerBuilder_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/sdkManagerBuilder.js [app-route] (ecmascript)");
Object.defineProperty(exports, "SdkManagerBuilder", {
    enumerable: true,
    get: function() {
        return sdkManagerBuilder_1.SdkManagerBuilder;
    }
});
var apiResponse_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/apiResponse.js [app-route] (ecmascript)");
Object.defineProperty(exports, "ApiResponse", {
    enumerable: true,
    get: function() {
        return apiResponse_1.ApiResponse;
    }
});
var baseClient_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/baseClient.js [app-route] (ecmascript)");
Object.defineProperty(exports, "BaseClient", {
    enumerable: true,
    get: function() {
        return baseClient_1.BaseClient;
    }
});
var staticAuthenticationProvider_1 = __turbopack_context__.r("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/src/staticAuthenticationProvider.js [app-route] (ecmascript)");
Object.defineProperty(exports, "StaticAuthenticationProvider", {
    enumerable: true,
    get: function() {
        return staticAuthenticationProvider_1.StaticAuthenticationProvider;
    }
});
}}),
"[project]/node_modules/@aps_sdk/authentication/dist/esm/base.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ __turbopack_context__.s({
    "AuthenticationApiError": (()=>AuthenticationApiError),
    "BaseApi": (()=>BaseApi),
    "COLLECTION_FORMATS": (()=>COLLECTION_FORMATS),
    "RequiredError": (()=>RequiredError)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$axios$2f$lib$2f$axios$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/axios/lib/axios.js [app-route] (ecmascript)");
;
const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|"
};
class BaseApi {
    constructor(sdkManager, axios = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$axios$2f$lib$2f$axios$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"]){
        this.axios = axios;
        if (sdkManager) {
            this.sdkManager = sdkManager;
        }
    }
}
;
class RequiredError extends Error {
    constructor(field, msg){
        super(msg);
        this.field = field;
        this.name = "RequiredError";
    }
}
class AuthenticationApiError extends Error {
    constructor(message, axiosError){
        super(message);
        if (axiosError) {
            this.axiosError = axiosError;
        }
        Object.setPrototypeOf(this, AuthenticationApiError.prototype);
    }
    httpStatusCode() {
        var _a, _b;
        return (_b = (_a = this.axiosError) === null || _a === void 0 ? void 0 : _a.response) === null || _b === void 0 ? void 0 : _b.status;
    }
}
}}),
"[project]/node_modules/@aps_sdk/authentication/dist/esm/common.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ __turbopack_context__.s({
    "assertParamExists": (()=>assertParamExists),
    "createRequestFunction": (()=>createRequestFunction),
    "createRequestFunctionforUserInfo": (()=>createRequestFunctionforUserInfo),
    "serializeDataIfNeeded": (()=>serializeDataIfNeeded),
    "setBearerAuthToObject": (()=>setBearerAuthToObject),
    "setSearchParams": (()=>setSearchParams),
    "toPathString": (()=>toPathString)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/authentication/dist/esm/base.js [app-route] (ecmascript)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
;
const assertParamExists = function(functionName, paramName, paramValue) {
    if (paramValue === null || paramValue === undefined) {
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["RequiredError"](paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
    }
};
const setBearerAuthToObject = function(object, accessToken) {
    return __awaiter(this, void 0, void 0, function*() {
        object["Authorization"] = "Bearer " + accessToken;
    });
};
function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
    if (parameter == null) return;
    if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
            parameter.forEach((item)=>setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
            Object.keys(parameter).forEach((currentKey)=>setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`));
        }
    } else {
        if (urlSearchParams.has(key)) {
            urlSearchParams.append(key, parameter);
        } else {
            urlSearchParams.set(key, parameter);
        }
    }
}
const setSearchParams = function(url, ...objects) {
    const searchParams = new URLSearchParams(url.search);
    setFlattenedQueryParams(searchParams, objects);
    url.search = searchParams.toString();
};
const serializeDataIfNeeded = function(value, requestOptions, apsConfiguration) {
    const nonString = typeof value !== 'string';
    const needsSerialization = nonString && apsConfiguration && isJsonMime ? isJsonMime(requestOptions.headers['Content-Type']) : nonString;
    return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || "";
};
/**
* Check if the given MIME is a JSON MIME.
* JSON MIME examples:
*   application/json
*   application/json; charset=UTF8
*   APPLICATION/JSON
*   application/vnd.company+json
* @param mime - MIME (Multipurpose Internet Mail Extensions)
* @return True if the given MIME is JSON, false otherwise.
*/ function isJsonMime(mime) {
    const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
}
const toPathString = function(url) {
    return url.pathname + url.search + url.hash;
};
const createRequestFunction = function(axiosArgs, sdkManager) {
    return ()=>{
        var _a, _b;
        const config = Object.assign(Object.assign({}, axiosArgs.options), {
            url: ((_a = sdkManager.apsConfiguration) === null || _a === void 0 ? void 0 : _a.baseAddress) + axiosArgs.url
        });
        return (_b = sdkManager === null || sdkManager === void 0 ? void 0 : sdkManager.apsClient) === null || _b === void 0 ? void 0 : _b.apsService.request(config);
    };
};
const createRequestFunctionforUserInfo = function(axiosArgs, sdkManager) {
    return ()=>{
        var _a;
        const config = Object.assign(Object.assign({}, axiosArgs.options), {
            url: axiosArgs.url
        });
        return (_a = sdkManager === null || sdkManager === void 0 ? void 0 : sdkManager.apsClient) === null || _a === void 0 ? void 0 : _a.apsService.request(config);
    };
};
}}),
"[project]/node_modules/@aps_sdk/authentication/dist/esm/api/tokenApi.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ __turbopack_context__.s({
    "TokenApi": (()=>TokenApi),
    "TokenApiAxiosParamCreator": (()=>TokenApiAxiosParamCreator),
    "TokenApiFp": (()=>TokenApiFp)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/authentication/dist/esm/common.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/authentication/dist/esm/base.js [app-route] (ecmascript)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
;
;
;
const TokenApiAxiosParamCreator = function(apsConfiguration) {
    return {
        /**
         * Returns a browser URL to redirect an end user in order to acquire the user’s consent to authorize the application to access resources on their behalf.  Invoking this operation is the first step in authenticating users and retrieving an authorization code grant. The authorization code that is generated remains valid for 5 minutes, while the ID token stays valid for 60 minutes. Any access tokens you obtain are valid for 60 minutes, and refresh tokens remain valid for 15 days.  This operation has a rate limit of 500 calls per minute.  **Note:** This operation is intended for use with client-side applications only. It is not suitable for server-side applications.
         * @summary Authorize User
         * @param {string} clientId The Client ID of the calling application, as registered with APS.
         * @param {ResponseType} responseType The type of response you want to receive. Possible values are:   -  &#x60;&#x60;code&#x60;&#x60; - Authorization code grant. -  &#x60;&#x60;id_token&#x60;&#x60; - OpenID Connect ID token.
         * @param {string} redirectUri The URI that APS redirects users to after they grant or deny access permission to the application. Must match the Callback URL for the application as registered with APS.  Must be specified as a URL-safe string. It can include query parameters or any other valid URL construct.
         * @param {string} [nonce] A random string that is sent with the request. APS passes back the same string to you so that you can verify whether you received the same string that you sent. This check mitigates token replay attacks
         * @param {string} [state] A URL-encoded random string. The authorization flow will pass the same string back to the Callback URL using the &#x60;&#x60;state&#x60;&#x60; query string parameter. This process helps ensure that the callback you receive is a response to what you originally requested. It prevents malicious actors from forging requests.  The string can only contain alphanumeric characters, commas, periods, underscores, and hyphens.
         * @param {Scopes} [scopes] A URL-encoded space-delimited list of requested scopes. See the &#x60;Developer\&#39;s Guide documentation on scopes &lt;/en/docs/oauth/v2/developers_guide/scopes/&gt;&#x60;_ for a list of valid values you can provide.  The string you specify for this parameter must not exceed 2000 characters and it cannot contain more than 50 scopes.
         * @param {string} [responseMode] Specifies how the authorization response should be returned. Valid values are:  - &#x60;&#x60;fragment&#x60;&#x60; - Encode the response parameters in the fragment of the redirect URI. A fragment in a URI is the optional part of the URI that appears after a &#x60;&#x60;#&#x60;&#x60; symbol, which refers to a specific section within a resource. For example, &#x60;&#x60;section&#x60;&#x60; in &#x60;&#x60;https://www.mysite.org/myresource#section&#x60;&#x60;. - &#x60;&#x60;form_post&#x60;&#x60; - Embed the authorization response parameter in an HTML form. - &#x60;&#x60;query&#x60;&#x60; -  Embed the authorization response as a query string parameter of the redirect URI.   If &#x60;&#x60;id_token&#x60;&#x60; is stated as &#x60;&#x60;response_type&#x60;&#x60;,  only &#x60;&#x60;form_post&#x60;&#x60; is allowed as &#x60;&#x60;response_mode&#x60;&#x60;.\&#39;
         * @param {string} [prompt] Specifies how to prompt users for authentication. Possible values are:   - &#x60;&#x60;login&#x60;&#x60; : Always prompt the user for authentication, regardless of the state of the login session.   **Note:** If you do not specify this parameter, the system will not prompt the user for authentication as long as a login session is active. If a login session is not active, the system will prompt the user for authentication.
         * @param {string} [authoptions] A JSON object containing options that specify how to display the sign-in page. Refer the &#x60;Developer\&#39;s Guide documentation on AuthOptions &lt;/en/docs/oauth/v2/developers_guide/authoptions/&gt;&#x60;_ for supported values.
         * @param {string} [codeChallenge] A URL-encoded string derived from the code verifier sent in the authorization request with the Proof Key for Code Exchange (PKCE) grant flow.
         * @param {string} [codeChallengeMethod] The method used to derive the code challenge for the PKCE grant flow. Possible value is:  - &#x60;&#x60;S256&#x60;&#x60;- Hashes the code verifier using the SHA-256 algorithm and then applies Base64 URL encoding.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ authorize: (clientId, responseType, redirectUri, nonce, state, scopes, responseMode, prompt, authoptions, codeChallenge, codeChallengeMethod)=>{
            // verify required parameter 'clientId' is not null or undefined
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('authorize', 'clientId', clientId);
            // verify required parameter 'responseType' is not null or undefined
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('authorize', 'responseType', responseType);
            // verify required parameter 'redirectUri' is not null or undefined
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('authorize', 'redirectUri', redirectUri);
            const localVarPath = `/authentication/v2/authorize`;
            const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
            let baseOptions;
            if (apsConfiguration) {
                baseOptions = apsConfiguration.baseOptions;
            }
            const localVarQueryParameter = {};
            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }
            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }
            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }
            if (nonce !== undefined) {
                localVarQueryParameter['nonce'] = nonce;
            }
            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }
            if (scopes !== undefined) {
                localVarQueryParameter['scope'] = scopes.join(' ');
            }
            if (responseMode !== undefined) {
                localVarQueryParameter['response_mode'] = responseMode;
            }
            if (prompt !== undefined) {
                localVarQueryParameter['prompt'] = prompt;
            }
            if (authoptions !== undefined) {
                localVarQueryParameter['authoptions'] = authoptions;
            }
            if (codeChallenge !== undefined) {
                localVarQueryParameter['code_challenge'] = codeChallenge;
            }
            if (codeChallengeMethod !== undefined) {
                localVarQueryParameter['code_challenge_method'] = codeChallengeMethod;
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
            return localVarUrlObj.toString();
        },
        /**
         * Returns an access token or refresh token.  * If `grant_type` is `authorization_code`, returns a 3-legged access token for authorization code grant.  * If `grant_type` is `client_credentials`, returns a 2-legged access token for client credentials grant. * If `grant_type` is `refresh_token`, returns new access token using the refresh token provided in the request.  Traditional Web Apps and Server-to-Server Apps should use the ``Authorization`` header with Basic Authentication for this operation. Desktop, Mobile, and Single-Page Apps should use ``client_id`` in the form body instead.  This operation has a rate limit of 500 calls per minute.
         * @summary Acquire Token
         * @param {string} [authorization] Must be &#x60;&#x60;Bearer &lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; where &#x60;&#x60;&lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; is the Base64 encoding of the concatenated string &#x60;&#x60;&lt;CLIENT_ID&gt;:&lt;CLIENT_SECRET&gt;&#x60;&#x60;.\&#39;  **Note** This header is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {GrantType} [grantType]
         * @param {string} [code] The authorization code that was passed to your application when the user granted access permission to your application. It was passed as the &#x60;&#x60;code&#x60;&#x60; query parameter to the redirect URI when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.   Required if &#x60;grant_type&#x60; is &#x60;&#x60;authorization_code&#x60;&#x60;.
         * @param {string} [redirectUri] The URI that APS redirects users to after they grant or deny access permission to the application. Must match the Callback URL for the application registered with APS.   Required if &#x60;grant_type&#x60; is &#x60;&#x60;authorization_code&#x60;&#x60;.
         * @param {string} [codeVerifier] A random URL-encoded string between 43 characters and 128 characters. In a PKCE grant flow, the authentication server uses this string to verify the code challenge that was passed when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.    Required if &#x60;&#x60;grant_type&#x60;&#x60; is &#x60;authorization_code&#x60; and &#x60;&#x60;code_challenge&#x60;&#x60; was specified when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.
         * @param {string} [refreshToken] The refresh token used to acquire a new access token and a refresh token.  Required if &#x60;&#x60;grant_type&#x60;&#x60; is &#x60;&#x60;refresh_token&#x60;&#x60;.
         * @param {Scopes} [scopes]
         * @param {string} [clientId] The Client ID of the application making the request.  **Note** This is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ fetchToken: (authorization_1, grantType_1, code_1, redirectUri_1, codeVerifier_1, refreshToken_1, scopes_1, clientId_1, ...args_1)=>__awaiter(this, [
                authorization_1,
                grantType_1,
                code_1,
                redirectUri_1,
                codeVerifier_1,
                refreshToken_1,
                scopes_1,
                clientId_1,
                ...args_1
            ], void 0, function*(authorization, grantType, code, redirectUri, codeVerifier, refreshToken, scopes, clientId, options = {}) {
                const localVarPath = `/authentication/v2/token`;
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'POST'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                const localVarFormParams = new URLSearchParams();
                // await setBearerAuthToObject(localVarHeaderParameter, accessToken)
                if (authorization != null) {
                    localVarHeaderParameter['Authorization'] = String(authorization);
                }
                if (grantType !== undefined) {
                    localVarFormParams.set('grant_type', grantType);
                }
                if (code !== undefined) {
                    localVarFormParams.set('code', code);
                }
                if (redirectUri !== undefined) {
                    localVarFormParams.set('redirect_uri', redirectUri);
                }
                if (codeVerifier !== undefined) {
                    localVarFormParams.set('code_verifier', codeVerifier);
                }
                if (refreshToken !== undefined) {
                    localVarFormParams.set('refresh_token', refreshToken);
                }
                if (scopes !== undefined) {
                    localVarFormParams.set('scope', scopes.join(' '));
                }
                if (clientId !== undefined) {
                    localVarFormParams.set('client_id', clientId);
                }
                localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/AUTHENTICATION/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = localVarFormParams.toString();
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Returns a set of public keys in the JSON Web Key Set (JWKS) format.  Public keys returned by this operation can be used to validate the asymmetric JWT signature of an access token without making network calls. It can be used to validate both two-legged access tokens and three-legged access tokens.   See the Developer\'s Guide topic on `Asymmetric Signing </en/docs/oauth/v2/developers_guide/asymmetric-encryption/>`_ for more information.
         * @summary Get JWKS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getKeys: (...args_1)=>__awaiter(this, [
                ...args_1
            ], void 0, function*(options = {}) {
                const localVarPath = `/authentication/v2/keys`;
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'GET'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                // await setBearerAuthToObject(localVarHeaderParameter, accessToken)
                localVarHeaderParameter['User-Agent'] = 'APS SDK/AUTHENTICATION/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Returns an OpenID Connect Discovery Specification compliant JSON document. It contains a list of the OpenID/OAuth endpoints, supported scopes, claims, public keys used to sign the tokens, and other details.
         * @summary Get OIDC Specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getOidcSpec: (...args_1)=>__awaiter(this, [
                ...args_1
            ], void 0, function*(options = {}) {
                const localVarPath = `/.well-known/openid-configuration`;
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'GET'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                // await setBearerAuthToObject(localVarHeaderParameter, accessToken)
                localVarHeaderParameter['User-Agent'] = 'APS SDK/AUTHENTICATION/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Returns metadata about the specified access token or reference token.  An application can only introspect its own tokens.  This operation has a rate limit of 500 calls per minute.
         * @summary Introspect Token
         * @param {string} [authorization] Must be &#x60;&#x60;Bearer &lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; where &#x60;&#x60;&lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; is the Base64 encoding of the concatenated string &#x60;&#x60;&lt;CLIENT_ID&gt;:&lt;CLIENT_SECRET&gt;&#x60;&#x60;.\&#39;  **Note** This header is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {string} [token] The token to be introspected.
         * @param {string} [clientId] The Client ID of the application making the request.  **Note** This is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param accessToken bearer access token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ introspectToken: (authorization_1, token_1, clientId_1, ...args_1)=>__awaiter(this, [
                authorization_1,
                token_1,
                clientId_1,
                ...args_1
            ], void 0, function*(authorization, token, clientId, options = {}) {
                const localVarPath = `/authentication/v2/introspect`;
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'POST'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                const localVarFormParams = new URLSearchParams();
                //  await setBearerAuthToObject(localVarHeaderParameter, accessToken)
                if (authorization != null) {
                    localVarHeaderParameter['Authorization'] = String(authorization);
                }
                if (token !== undefined) {
                    localVarFormParams.set('token', token);
                }
                if (clientId !== undefined) {
                    localVarFormParams.set('client_id', clientId);
                }
                localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/AUTHENTICATION/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = localVarFormParams.toString();
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            }),
        /**
         * Signs out the currently authenticated user from the APS authorization server. Thereafter, this operation redirects the user to the ``post_logout_redirect_uri``, or to the Autodesk Sign-in page when no ``post_logout_redirect_uri`` is provided.  This operation has a rate limit of 500 calls per minute.
         * @summary Logout
         * @param {string} [postLogoutRedirectUri] The URI to redirect your users to once logout is performed. If you do not specify this parameter your users are redirected to the Autodesk Sign-in page.   **Note:**  You must provide a redirect URI that is pre-registered with APS. This precaution is taken to prevent unauthorized applications from hijacking the logout process.
         * @throws {RequiredError}
         */ logout: (postLogoutRedirectUri)=>{
            const localVarPath = `/authentication/v2/logout`;
            const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
            let baseOptions;
            if (apsConfiguration) {
                baseOptions = apsConfiguration.baseOptions;
            }
            const localVarQueryParameter = {};
            if (postLogoutRedirectUri !== undefined) {
                localVarQueryParameter['post_logout_redirect_uri'] = postLogoutRedirectUri;
            }
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
            return localVarUrlObj.toString();
        },
        /**
         * Revokes an active access token or refresh token.  An application can only revoke its own tokens.  This operation has a rate limit of 100 calls per minute.
         * @summary Revoke Token
         * @param {string} token The token to be revoked.
         * @param {TokenTypeHint} tokenTypeHint
         * @param {string} [authorization] Must be &#x60;&#x60;Bearer &lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; where &#x60;&#x60;&lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; is the Base64 encoding of the concatenated string &#x60;&#x60;&lt;CLIENT_ID&gt;:&lt;CLIENT_SECRET&gt;&#x60;&#x60;.\&#39;  **Note** This header is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {string} [clientId] The Client ID of the application making the request.  **Note** This is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ revoke: (token_1, tokenTypeHint_1, authorization_1, clientId_1, ...args_1)=>__awaiter(this, [
                token_1,
                tokenTypeHint_1,
                authorization_1,
                clientId_1,
                ...args_1
            ], void 0, function*(token, tokenTypeHint, authorization, clientId, options = {}) {
                // verify required parameter 'token' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('revoke', 'token', token);
                // verify required parameter 'tokenTypeHint' is not null or undefined
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertParamExists"])('revoke', 'tokenTypeHint', tokenTypeHint);
                const localVarPath = `/authentication/v2/revoke`;
                const localVarUrlObj = new URL(localVarPath, apsConfiguration.baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'POST'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                const localVarFormParams = new URLSearchParams();
                // await setBearerAuthToObject(localVarHeaderParameter, accessToken)
                if (authorization != null) {
                    localVarHeaderParameter['Authorization'] = String(authorization);
                }
                if (token !== undefined) {
                    localVarFormParams.set('token', token);
                }
                if (tokenTypeHint !== undefined) {
                    localVarFormParams.set('token_type_hint', tokenTypeHint);
                }
                if (clientId !== undefined) {
                    localVarFormParams.set('client_id', clientId);
                }
                localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
                localVarHeaderParameter['User-Agent'] = 'APS SDK/AUTHENTICATION/TypeScript/1.0.0';
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["setSearchParams"])(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                localVarRequestOptions.data = localVarFormParams.toString();
                return {
                    url: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["toPathString"])(localVarUrlObj),
                    options: localVarRequestOptions
                };
            })
    };
};
const TokenApiFp = function(sdkManager) {
    const localVarAxiosParamCreator = TokenApiAxiosParamCreator(sdkManager.apsConfiguration);
    return {
        /**
         * Returns a browser URL to redirect an end user in order to acquire the user’s consent to authorize the application to access resources on their behalf.  Invoking this operation is the first step in authenticating users and retrieving an authorization code grant. The authorization code that is generated remains valid for 5 minutes, while the ID token stays valid for 60 minutes. Any access tokens you obtain are valid for 60 minutes, and refresh tokens remain valid for 15 days.  This operation has a rate limit of 500 calls per minute.  **Note:** This operation is intended for use with client-side applications only. It is not suitable for server-side applications.
         * @summary Authorize User
         * @param {string} clientId The Client ID of the calling application, as registered with APS.
         * @param {ResponseType} responseType The type of response you want to receive. Possible values are:   -  &#x60;&#x60;code&#x60;&#x60; - Authorization code grant. -  &#x60;&#x60;id_token&#x60;&#x60; - OpenID Connect ID token.
         * @param {string} redirectUri The URI that APS redirects users to after they grant or deny access permission to the application. Must match the Callback URL for the application as registered with APS.  Must be specified as a URL-safe string. It can include query parameters or any other valid URL construct.
         * @param {string} [nonce] A random string that is sent with the request. APS passes back the same string to you so that you can verify whether you received the same string that you sent. This check mitigates token replay attacks
         * @param {string} [state] A URL-encoded random string. The authorization flow will pass the same string back to the Callback URL using the &#x60;&#x60;state&#x60;&#x60; query string parameter. This process helps ensure that the callback you receive is a response to what you originally requested. It prevents malicious actors from forging requests.  The string can only contain alphanumeric characters, commas, periods, underscores, and hyphens.
         * @param {Scopes} [scope] A URL-encoded space-delimited list of requested scopes. See the &#x60;Developer\&#39;s Guide documentation on scopes &lt;/en/docs/oauth/v2/developers_guide/scopes/&gt;&#x60;_ for a list of valid values you can provide.  The string you specify for this parameter must not exceed 2000 characters and it cannot contain more than 50 scopes.
         * @param {string} [responseMode] Specifies how the authorization response should be returned. Valid values are:  - &#x60;&#x60;fragment&#x60;&#x60; - Encode the response parameters in the fragment of the redirect URI. A fragment in a URI is the optional part of the URI that appears after a &#x60;&#x60;#&#x60;&#x60; symbol, which refers to a specific section within a resource. For example, &#x60;&#x60;section&#x60;&#x60; in &#x60;&#x60;https://www.mysite.org/myresource#section&#x60;&#x60;. - &#x60;&#x60;form_post&#x60;&#x60; - Embed the authorization response parameter in an HTML form. - &#x60;&#x60;query&#x60;&#x60; -  Embed the authorization response as a query string parameter of the redirect URI.   If &#x60;&#x60;id_token&#x60;&#x60; is stated as &#x60;&#x60;response_type&#x60;&#x60;,  only &#x60;&#x60;form_post&#x60;&#x60; is allowed as &#x60;&#x60;response_mode&#x60;&#x60;.\&#39;
         * @param {string} [prompt] Specifies how to prompt users for authentication. Possible values are:   - &#x60;&#x60;login&#x60;&#x60; : Always prompt the user for authentication, regardless of the state of the login session.   **Note:** If you do not specify this parameter, the system will not prompt the user for authentication as long as a login session is active. If a login session is not active, the system will prompt the user for authentication.
         * @param {string} [authoptions] A JSON object containing options that specify how to display the sign-in page. Refer the &#x60;Developer\&#39;s Guide documentation on AuthOptions &lt;/en/docs/oauth/v2/developers_guide/authoptions/&gt;&#x60;_ for supported values.
         * @param {string} [codeChallenge] A URL-encoded string derived from the code verifier sent in the authorization request with the Proof Key for Code Exchange (PKCE) grant flow.
         * @param {string} [codeChallengeMethod] The method used to derive the code challenge for the PKCE grant flow. Possible value is:  - &#x60;&#x60;S256&#x60;&#x60;- Hashes the code verifier using the SHA-256 algorithm and then applies Base64 URL encoding.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ authorize (clientId, responseType, redirectUri, nonce, state, scopes, responseMode, prompt, authoptions, codeChallenge, codeChallengeMethod) {
            const url = localVarAxiosParamCreator.authorize(clientId, responseType, redirectUri, nonce, state, scopes, responseMode, prompt, authoptions, codeChallenge, codeChallengeMethod);
            return url;
        },
        /**
         * Returns an access token or refresh token.  * If `grant_type` is `authorization_code`, returns a 3-legged access token for authorization code grant.  * If `grant_type` is `client_credentials`, returns a 2-legged access token for client credentials grant. * If `grant_type` is `refresh_token`, returns new access token using the refresh token provided in the request.  Traditional Web Apps and Server-to-Server Apps should use the ``Authorization`` header with Basic Authentication for this operation. Desktop, Mobile, and Single-Page Apps should use ``client_id`` in the form body instead.  This operation has a rate limit of 500 calls per minute.
         * @summary Acquire Token
         * @param {string} [authorization] Must be &#x60;&#x60;Bearer &lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; where &#x60;&#x60;&lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; is the Base64 encoding of the concatenated string &#x60;&#x60;&lt;CLIENT_ID&gt;:&lt;CLIENT_SECRET&gt;&#x60;&#x60;.\&#39;  **Note** This header is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {GrantType} [grantType]
         * @param {string} [code] The authorization code that was passed to your application when the user granted access permission to your application. It was passed as the &#x60;&#x60;code&#x60;&#x60; query parameter to the redirect URI when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.   Required if &#x60;grant_type&#x60; is &#x60;&#x60;authorization_code&#x60;&#x60;.
         * @param {string} [redirectUri] The URI that APS redirects users to after they grant or deny access permission to the application. Must match the Callback URL for the application registered with APS.   Required if &#x60;grant_type&#x60; is &#x60;&#x60;authorization_code&#x60;&#x60;.
         * @param {string} [codeVerifier] A random URL-encoded string between 43 characters and 128 characters. In a PKCE grant flow, the authentication server uses this string to verify the code challenge that was passed when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.    Required if &#x60;&#x60;grant_type&#x60;&#x60; is &#x60;authorization_code&#x60; and &#x60;&#x60;code_challenge&#x60;&#x60; was specified when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.
         * @param {string} [refreshToken] The refresh token used to acquire a new access token and a refresh token.  Required if &#x60;&#x60;grant_type&#x60;&#x60; is &#x60;&#x60;refresh_token&#x60;&#x60;.
         * @param {Scopes} [scope]
         * @param {string} [clientId] The Client ID of the application making the request.  **Note** This is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ fetchToken (authorization, grantType, code, redirectUri, codeVerifier, refreshToken, scopes, clientId, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.fetchToken(authorization, grantType, code, redirectUri, codeVerifier, refreshToken, scopes, clientId, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Returns a set of public keys in the JSON Web Key Set (JWKS) format.  Public keys returned by this operation can be used to validate the asymmetric JWT signature of an access token without making network calls. It can be used to validate both two-legged access tokens and three-legged access tokens.   See the Developer\'s Guide topic on `Asymmetric Signing </en/docs/oauth/v2/developers_guide/asymmetric-encryption/>`_ for more information.
         * @summary Get JWKS
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getKeys (options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getKeys(options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Returns an OpenID Connect Discovery Specification compliant JSON document. It contains a list of the OpenID/OAuth endpoints, supported scopes, claims, public keys used to sign the tokens, and other details.
         * @summary Get OIDC Specification
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getOidcSpec (options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getOidcSpec(options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Returns metadata about the specified access token or reference token.  An application can only introspect its own tokens.  This operation has a rate limit of 500 calls per minute.
         * @summary Introspect Token
         * @param {string} [authorization] Must be &#x60;&#x60;Bearer &lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; where &#x60;&#x60;&lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; is the Base64 encoding of the concatenated string &#x60;&#x60;&lt;CLIENT_ID&gt;:&lt;CLIENT_SECRET&gt;&#x60;&#x60;.\&#39;  **Note** This header is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {string} [token] The token to be introspected.
         * @param {string} [clientId] The Client ID of the application making the request.  **Note** This is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ introspectToken (authorization, token, clientId, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.introspectToken(authorization, token, clientId, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        },
        /**
         * Signs out the currently authenticated user from the APS authorization server. Thereafter, this operation redirects the user to the ``post_logout_redirect_uri``, or to the Autodesk Sign-in page when no ``post_logout_redirect_uri`` is provided.  This operation has a rate limit of 500 calls per minute.
         * @summary Logout
         * @param {string} [postLogoutRedirectUri] The URI to redirect your users to once logout is performed. If you do not specify this parameter your users are redirected to the Autodesk Sign-in page.   **Note:**  You must provide a redirect URI that is pre-registered with APS. This precaution is taken to prevent unauthorized applications from hijacking the logout process.
         * @throws {RequiredError}
         */ logout (postLogoutRedirectUri) {
            const url = localVarAxiosParamCreator.logout(postLogoutRedirectUri);
            return url;
        },
        /**
         * Revokes an active access token or refresh token.  An application can only revoke its own tokens.  This operation has a rate limit of 100 calls per minute.
         * @summary Revoke Token
         * @param {string} token The token to be revoked.
         * @param {TokenTypeHint} tokenTypeHint
         * @param {string} [authorization] Must be &#x60;&#x60;Bearer &lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; where &#x60;&#x60;&lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; is the Base64 encoding of the concatenated string &#x60;&#x60;&lt;CLIENT_ID&gt;:&lt;CLIENT_SECRET&gt;&#x60;&#x60;.\&#39;  **Note** This header is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {string} [clientId] The Client ID of the application making the request.  **Note** This is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ revoke (token, tokenTypeHint, authorization, clientId, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.revoke(token, tokenTypeHint, authorization, clientId, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunction"])(localVarAxiosArgs, sdkManager);
            });
        }
    };
};
class TokenApi extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseApi"] {
    constructor(){
        super(...arguments);
        this.logger = this.sdkManager.logger;
    }
    /**
     * Returns a browser URL to redirect an end user in order to acquire the user’s consent to authorize the application to access resources on their behalf.  Invoking this operation is the first step in authenticating users and retrieving an authorization code grant. The authorization code that is generated remains valid for 5 minutes, while the ID token stays valid for 60 minutes. Any access tokens you obtain are valid for 60 minutes, and refresh tokens remain valid for 15 days.  This operation has a rate limit of 500 calls per minute.  **Note:** This operation is intended for use with client-side applications only. It is not suitable for server-side applications.
     * @summary Authorize User
     * @param {string} clientId The Client ID of the calling application, as registered with APS.
     * @param {ResponseType} responseType The type of response you want to receive. Possible values are:   -  &#x60;&#x60;code&#x60;&#x60; - Authorization code grant. -  &#x60;&#x60;id_token&#x60;&#x60; - OpenID Connect ID token.
     * @param {string} redirectUri The URI that APS redirects users to after they grant or deny access permission to the application. Must match the Callback URL for the application as registered with APS.  Must be specified as a URL-safe string. It can include query parameters or any other valid URL construct.
     * @param {string} [nonce] A random string that is sent with the request. APS passes back the same string to you so that you can verify whether you received the same string that you sent. This check mitigates token replay attacks
     * @param {string} [state] A URL-encoded random string. The authorization flow will pass the same string back to the Callback URL using the &#x60;&#x60;state&#x60;&#x60; query string parameter. This process helps ensure that the callback you receive is a response to what you originally requested. It prevents malicious actors from forging requests.  The string can only contain alphanumeric characters, commas, periods, underscores, and hyphens.
     * @param {Scopes} [scope] A URL-encoded space-delimited list of requested scopes. See the &#x60;Developer\&#39;s Guide documentation on scopes &lt;/en/docs/oauth/v2/developers_guide/scopes/&gt;&#x60;_ for a list of valid values you can provide.  The string you specify for this parameter must not exceed 2000 characters and it cannot contain more than 50 scopes.
     * @param {string} [responseMode] Specifies how the authorization response should be returned. Valid values are:  - &#x60;&#x60;fragment&#x60;&#x60; - Encode the response parameters in the fragment of the redirect URI. A fragment in a URI is the optional part of the URI that appears after a &#x60;&#x60;#&#x60;&#x60; symbol, which refers to a specific section within a resource. For example, &#x60;&#x60;section&#x60;&#x60; in &#x60;&#x60;https://www.mysite.org/myresource#section&#x60;&#x60;. - &#x60;&#x60;form_post&#x60;&#x60; - Embed the authorization response parameter in an HTML form. - &#x60;&#x60;query&#x60;&#x60; -  Embed the authorization response as a query string parameter of the redirect URI.   If &#x60;&#x60;id_token&#x60;&#x60; is stated as &#x60;&#x60;response_type&#x60;&#x60;,  only &#x60;&#x60;form_post&#x60;&#x60; is allowed as &#x60;&#x60;response_mode&#x60;&#x60;.\&#39;
     * @param {string} [prompt] Specifies how to prompt users for authentication. Possible values are:   - &#x60;&#x60;login&#x60;&#x60; : Always prompt the user for authentication, regardless of the state of the login session.   **Note:** If you do not specify this parameter, the system will not prompt the user for authentication as long as a login session is active. If a login session is not active, the system will prompt the user for authentication.
     * @param {string} [authoptions] A JSON object containing options that specify how to display the sign-in page. Refer the &#x60;Developer\&#39;s Guide documentation on AuthOptions &lt;/en/docs/oauth/v2/developers_guide/authoptions/&gt;&#x60;_ for supported values.
     * @param {string} [codeChallenge] A URL-encoded string derived from the code verifier sent in the authorization request with the Proof Key for Code Exchange (PKCE) grant flow.
     * @param {string} [codeChallengeMethod] The method used to derive the code challenge for the PKCE grant flow. Possible value is:  - &#x60;&#x60;S256&#x60;&#x60;- Hashes the code verifier using the SHA-256 algorithm and then applies Base64 URL encoding.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */ authorize(clientId, responseType, redirectUri, nonce, state, scopes, responseMode, prompt, authoptions, codeChallenge, codeChallengeMethod) {
        this.logger.logInfo("Entered into authorize ");
        try {
            const url = TokenApiFp(this.sdkManager).authorize(clientId, responseType, redirectUri, nonce, state, scopes, responseMode, prompt, authoptions, codeChallenge, codeChallengeMethod);
            this.logger.logInfo(`authorize Request completed successfully.`);
            return url;
        } catch (error) {
            if (error.response) {
                const errorMessage = JSON.stringify(error.response.data);
                this.logger.logError(`authorize Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`authorize Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
            } else if (error.request) {
                this.logger.logError(`authorize Request failed with no response received: ${error.request}`);
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`authorize Request failed with no response received: ${error.request}`, error);
            }
            throw error;
        }
    }
    /**
     * Returns an access token or refresh token.  * If `grant_type` is `authorization_code`, returns a 3-legged access token for authorization code grant.  * If `grant_type` is `client_credentials`, returns a 2-legged access token for client credentials grant. * If `grant_type` is `refresh_token`, returns new access token using the refresh token provided in the request.  Traditional Web Apps and Server-to-Server Apps should use the ``Authorization`` header with Basic Authentication for this operation. Desktop, Mobile, and Single-Page Apps should use ``client_id`` in the form body instead.  This operation has a rate limit of 500 calls per minute.
     * @summary Acquire Token
     * @param {string} [authorization] Must be &#x60;&#x60;Bearer &lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; where &#x60;&#x60;&lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; is the Base64 encoding of the concatenated string &#x60;&#x60;&lt;CLIENT_ID&gt;:&lt;CLIENT_SECRET&gt;&#x60;&#x60;.\&#39;  **Note** This header is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
     * @param {GrantType} [grantType]
     * @param {string} [code] The authorization code that was passed to your application when the user granted access permission to your application. It was passed as the &#x60;&#x60;code&#x60;&#x60; query parameter to the redirect URI when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.   Required if &#x60;grant_type&#x60; is &#x60;&#x60;authorization_code&#x60;&#x60;.
     * @param {string} [redirectUri] The URI that APS redirects users to after they grant or deny access permission to the application. Must match the Callback URL for the application registered with APS.   Required if &#x60;grant_type&#x60; is &#x60;&#x60;authorization_code&#x60;&#x60;.
     * @param {string} [codeVerifier] A random URL-encoded string between 43 characters and 128 characters. In a PKCE grant flow, the authentication server uses this string to verify the code challenge that was passed when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.    Required if &#x60;&#x60;grant_type&#x60;&#x60; is &#x60;authorization_code&#x60; and &#x60;&#x60;code_challenge&#x60;&#x60; was specified when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.
     * @param {string} [refreshToken] The refresh token used to acquire a new access token and a refresh token.  Required if &#x60;&#x60;grant_type&#x60;&#x60; is &#x60;&#x60;refresh_token&#x60;&#x60;.
     * @param {Scopes} [scopes]
     * @param {string} [clientId] The Client ID of the application making the request.  **Note** This is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */ fetchToken(authorization, grantType, code, redirectUri, codeVerifier, refreshToken, scopes, clientId, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into fetchToken ");
            try {
                const request = yield TokenApiFp(this.sdkManager).fetchToken(authorization, grantType, code, redirectUri, codeVerifier, refreshToken, scopes, clientId, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`fetchToken Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`fetchToken Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`fetchToken Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`fetchToken Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`fetchToken Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Returns a set of public keys in the JSON Web Key Set (JWKS) format.  Public keys returned by this operation can be used to validate the asymmetric JWT signature of an access token without making network calls. It can be used to validate both two-legged access tokens and three-legged access tokens.   See the Developer\'s Guide topic on `Asymmetric Signing </en/docs/oauth/v2/developers_guide/asymmetric-encryption/>`_ for more information.
     * @summary Get JWKS
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */ getKeys(options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into getKeys ");
            try {
                const request = yield TokenApiFp(this.sdkManager).getKeys(options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getKeys Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getKeys Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`getKeys Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`getKeys Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`getKeys Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Returns an OpenID Connect Discovery Specification compliant JSON document. It contains a list of the OpenID/OAuth endpoints, supported scopes, claims, public keys used to sign the tokens, and other details.
     * @summary Get OIDC Specification
     * @param accessToken bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */ getOidcSpec(options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into getOidcSpec ");
            try {
                const request = yield TokenApiFp(this.sdkManager).getOidcSpec(options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getOidcSpec Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getOidcSpec Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`getOidcSpec Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`getOidcSpec Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`getOidcSpec Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Returns metadata about the specified access token or reference token.  An application can only introspect its own tokens.  This operation has a rate limit of 500 calls per minute.
     * @summary Introspect Token
     * @param {string} [authorization] Must be &#x60;&#x60;Bearer &lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; where &#x60;&#x60;&lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; is the Base64 encoding of the concatenated string &#x60;&#x60;&lt;CLIENT_ID&gt;:&lt;CLIENT_SECRET&gt;&#x60;&#x60;.\&#39;  **Note** This header is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
     * @param {string} [token] The token to be introspected.
     * @param {string} [clientId] The Client ID of the application making the request.  **Note** This is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */ introspectToken(authorization, token, clientId, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into introspectToken ");
            try {
                const request = yield TokenApiFp(this.sdkManager).introspectToken(authorization, token, clientId, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`introspectToken Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`introspectToken Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`introspectToken Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`introspectToken Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`introspectToken Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
    /**
     * Signs out the currently authenticated user from the APS authorization server. Thereafter, this operation redirects the user to the ``post_logout_redirect_uri``, or to the Autodesk Sign-in page when no ``post_logout_redirect_uri`` is provided.  This operation has a rate limit of 500 calls per minute.
     * @summary Logout
     * @param {string} [postLogoutRedirectUri] The URI to redirect your users to once logout is performed. If you do not specify this parameter your users are redirected to the Autodesk Sign-in page.   **Note:**  You must provide a redirect URI that is pre-registered with APS. This precaution is taken to prevent unauthorized applications from hijacking the logout process.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */ logout(postLogoutRedirectUri) {
        this.logger.logInfo("Entered into logout ");
        try {
            const url = TokenApiFp(this.sdkManager).logout(postLogoutRedirectUri);
            this.logger.logInfo(`logout Request completed successfully`);
            return url;
        } catch (error) {
            if (error.response) {
                const errorMessage = JSON.stringify(error.response.data);
                this.logger.logError(`logout Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`logout Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
            } else if (error.request) {
                this.logger.logError(`logout Request failed with no response received: ${error.request}`);
                throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`logout Request failed with no response received: ${error.request}`, error);
            }
            throw error;
        }
    }
    /**
     * Revokes an active access token or refresh token.  An application can only revoke its own tokens.  This operation has a rate limit of 100 calls per minute.
     * @summary Revoke Token
     * @param {string} token The token to be revoked.
     * @param {TokenTypeHint} tokenTypeHint
     * @param {string} [authorization] Must be &#x60;&#x60;Bearer &lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; where &#x60;&#x60;&lt;BASE64_ENCODED_STRING&gt;&#x60;&#x60; is the Base64 encoding of the concatenated string &#x60;&#x60;&lt;CLIENT_ID&gt;:&lt;CLIENT_SECRET&gt;&#x60;&#x60;.\&#39;  **Note** This header is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
     * @param {string} [clientId] The Client ID of the application making the request.  **Note** This is required only for Traditional Web Apps and Server-to-Server Apps. It is not required for Desktop, Mobile, and Single-Page Apps.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */ revoke(token, tokenTypeHint, authorization, clientId, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into revoke ");
            try {
                const request = yield TokenApiFp(this.sdkManager).revoke(token, tokenTypeHint, authorization, clientId, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`revoke Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`revoke Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`revoke Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`revoke Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`revoke Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
}
}}),
"[project]/node_modules/@aps_sdk/authentication/dist/esm/api/usersApi.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ __turbopack_context__.s({
    "UsersApi": (()=>UsersApi),
    "UsersApiAxiosParamCreator": (()=>UsersApiAxiosParamCreator),
    "UsersApiFp": (()=>UsersApiFp)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/authentication/dist/esm/common.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/authentication/dist/esm/base.js [app-route] (ecmascript)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
;
;
;
const UsersApiAxiosParamCreator = function(apsConfiguration) {
    return {
        /**
         * Retrieves information about the authenticated user.
         * @summary Get User Info
         * @param authorization Three Legged access token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getUserInfo: (authorization_1, baseAddress_1, ...args_1)=>__awaiter(this, [
                authorization_1,
                baseAddress_1,
                ...args_1
            ], void 0, function*(authorization, baseAddress, options = {}) {
                const localVarPath = `/userinfo`;
                const localVarUrlObj = new URL(localVarPath, baseAddress);
                let baseOptions;
                if (apsConfiguration) {
                    baseOptions = apsConfiguration.baseOptions;
                }
                const localVarRequestOptions = Object.assign(Object.assign({
                    method: 'GET'
                }, baseOptions), options);
                const localVarHeaderParameter = {};
                const localVarQueryParameter = {};
                // await setBearerAuthToObject(localVarHeaderParameter, accessToken)
                if (authorization != null) {
                    localVarHeaderParameter['Authorization'] = authorization;
                }
                localVarHeaderParameter['User-Agent'] = 'APS SDK/AUTHENTICATION/TypeScript/1.0.0';
                //  setSearchParams(localVarUrlObj, localVarQueryParameter);
                let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                return {
                    url: localVarUrlObj.toString(),
                    options: localVarRequestOptions
                };
            })
    };
};
const UsersApiFp = function(sdkManager) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(sdkManager.apsConfiguration);
    return {
        /**
         * Retrieves information about the authenticated user.
         * @summary Get User Info
         * @param {string} [authorization] YOUR_3_LEGGED_ACCESS_TOKEN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */ getUserInfo (authorization, baseAddress, options) {
            return __awaiter(this, void 0, void 0, function*() {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getUserInfo(authorization, baseAddress, options);
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$common$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["createRequestFunctionforUserInfo"])(localVarAxiosArgs, sdkManager);
            });
        }
    };
};
class UsersApi extends __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["BaseApi"] {
    constructor(){
        super(...arguments);
        this.logger = this.sdkManager.logger;
        this.baseAddress = new URL("https://api.userprofile.autodesk.com");
    }
    /**
     * Retrieves information about the authenticated user.
     * @summary Get User Info
     * @param authorization bearer access token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */ getUserInfo(authorization, options) {
        return __awaiter(this, void 0, void 0, function*() {
            this.logger.logInfo("Entered into getUserInfo ");
            try {
                const request = yield UsersApiFp(this.sdkManager).getUserInfo(authorization, this.baseAddress, options);
                const response = yield request(this.axios);
                this.logger.logInfo(`getUserInfo Request completed successfully with status code: ${response.status}`);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ApiResponse"](response, response.data);
            } catch (error) {
                if (error.response) {
                    const errorMessage = JSON.stringify(error.response.data);
                    this.logger.logError(`getUserInfo Request failed with status : ${error.response.status} and statusText : ${error.response.statusText} and error message: ${errorMessage}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`getUserInfo Request failed with status : ${error.response.status} and error message: ${errorMessage}`, error);
                } else if (error.request) {
                    this.logger.logError(`getUserInfo Request failed with no response received: ${error.request}`);
                    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$base$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["AuthenticationApiError"](`getUserInfo Request failed with no response received: ${error.request}`, error);
                }
                throw error;
            }
        });
    }
}
}}),
"[project]/node_modules/@aps_sdk/authentication/dist/esm/model/grantType.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ /**
 * Specifies the grant type you are requesting the code for. Possible values are:   - ``client_credentials`` -  For a 2-legged access token. - ``authorization_code`` - For a 3-legged access token. - ``refresh_token`` - For a refresh token.
 * @export
 * @enum {string}
 */ __turbopack_context__.s({
    "GrantType": (()=>GrantType)
});
const GrantType = {
    ClientCredentials: 'client_credentials',
    AuthorizationCode: 'authorization_code',
    RefreshToken: 'refresh_token'
};
}}),
"[project]/node_modules/@aps_sdk/authentication/dist/esm/model/threeLeggedToken.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ /**
 * Represents the payload returned in response to an authorization code grant request.
 * @export
 * @class ThreeLeggedToken
 */ __turbopack_context__.s({
    "ThreeLeggedToken": (()=>ThreeLeggedToken)
});
class ThreeLeggedToken {
    constructor(content){
        this.access_token = content.access_token;
        this.refresh_token = content.refresh_token;
        this.token_type = content.token_type;
        this.expires_in = content.expires_in;
        this.id_token = content.id_token;
        this.expires_at = Date.now() + this.expires_in * 1000;
    }
}
}}),
"[project]/node_modules/@aps_sdk/authentication/dist/esm/model/twoLeggedToken.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ /**
 * Represents the payload returned in response to a client credentials grant request.
 * @export
 * @class TwoLeggedToken
 */ __turbopack_context__.s({
    "TwoLeggedToken": (()=>TwoLeggedToken)
});
class TwoLeggedToken {
    constructor(content){
        this.access_token = content.access_token;
        this.token_type = content.token_type;
        this.expires_in = content.expires_in;
        this.expires_at = Date.now() + this.expires_in * 1000;
    }
}
}}),
"[project]/node_modules/@aps_sdk/authentication/dist/esm/custom-code/authenticationClient.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AuthenticationClient": (()=>AuthenticationClient)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/autodesk-sdkmanager/dist/index.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$api$2f$tokenApi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/authentication/dist/esm/api/tokenApi.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$api$2f$usersApi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/authentication/dist/esm/api/usersApi.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$grantType$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/authentication/dist/esm/model/grantType.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$threeLeggedToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/authentication/dist/esm/model/threeLeggedToken.js [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$twoLeggedToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@aps_sdk/authentication/dist/esm/model/twoLeggedToken.js [app-route] (ecmascript)");
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
;
;
;
class AuthenticationClient {
    constructor(optionalArgs){
        if (!(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.sdkManager)) {
            (optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : optionalArgs = {}).sdkManager = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$autodesk$2d$sdkmanager$2f$dist$2f$index$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SdkManagerBuilder"].create().build();
        }
        this.tokenApi = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$api$2f$tokenApi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TokenApi"](optionalArgs.sdkManager);
        this.usersApi = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$api$2f$usersApi$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["UsersApi"](optionalArgs.sdkManager);
    }
    //#region  UsersApi
    /**
         * Retrieves information for the authenticated user. Only supports 3-legged access tokens.
         * @summary Get User Info
         * @param {string} authorization The three legged access token.
         * @param {*} [options] Override http request option.
     */ getUserInfo(authorization, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            const response = yield this.usersApi.getUserInfo(authorization, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    //#endregion UsersApi
    //#region TokenApi
    /**
         * Returns a two legged access token.
         * @summary Get two legged token.
         * @param {string} clientId The Client Id of the application making the request.
         * @param {string} clientSecret The Client secret of the application making the request.
         * @param {Array<Scopes>} scopes Array of scopes. Supported values: 1. device_sso 2. All scopes mentioned in [Forge Developers Guide](https://forge.autodesk.com/en/docs/oauth/v3/developers_guide/scopes/).
         * @param {*} [options] Override http request option.
         * @returns {TwoleggedToken} Two legged access token.
     */ getTwoLeggedToken(clientId, clientSecret, scopes, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            const clientIDSecret = Buffer.from(`${clientId}:${clientSecret}`).toString(`base64`);
            const response = yield this.tokenApi.fetchToken(`Basic ${clientIDSecret}`, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$grantType$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GrantType"].ClientCredentials, undefined, undefined, undefined, undefined, scopes, undefined, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$twoLeggedToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TwoLeggedToken"](response.content);
        });
    }
    /**
     * Returns a browser URL to redirect an end user in order to acquire the user’s consent to authorize the application to access resources on their behalf.  Invoking this operation is the first step in authenticating users and retrieving an authorization code grant. The authorization code that is generated remains valid for 5 minutes, while the ID token stays valid for 60 minutes. Any access tokens you obtain are valid for 60 minutes, and refresh tokens remain valid for 15 days.  This operation has a rate limit of 500 calls per minute.  **Note:** This operation is intended for use with client-side applications only. It is not suitable for server-side applications.
     * @summary Get Authorise URL.
     * @param {string} clientId The Client Id of the application making the request.
     * @param {ResponseType} responseType Must be &#x60;code&#x60; for authorization code grant, &#x60;id_token&#x60; for an OpenID Connect ID token.
     * @param {string} redirectUri URL-encoded callback URL.
     * @param {Array<Scopes>} scopes Array of scopes. Supported values: 1. device_sso 2. All scopes mentioned in [Forge Developers Guide](https://forge.autodesk.com/en/docs/oauth/v3/developers_guide/scopes/).
     * @param {string} [state] The payload that authorization flow will pass back verbatim in state query parameter to the callback URL. It can contain alphanumeric, comma, period, underscore, and hyphen characters.
     * @param {string} [nonce] A string value used to associate a Client session with an ID Token, and to mitigate replay attacks. Required if &#x60;response_type&#x60; is &#x60;id_token&#x60; or &#x60;token&#x60;
     * @param {string} [responseMode] The mode of response for the supplied &#x60;response_type&#x60;. Supported values are &#x60;fragment&#x60;, &#x60;form_post&#x60; or &#x60;query&#x60;. &#x60;query&#x60; is not supported if the &#x60;response_type&#x60; is &#x60;token&#x60;.
     * @param {string} [prompt] Values supported: &#x60;login&#x60; and &#x60;none&#x60;. &#x60;login&#x60;: Always prompt the user for authentication, regardless of the login session. &#x60;prompt&#x60;: Do not prompt user for authentication. If user is not logged in, the calling application receives an error.
     * @param {string} [authoptions] A Json object carries information to Identity.
     * @param {string} [codeChallenge] A challenge for PKCE. The challenge is verified in the access token request.
     * @param {string} [codeChallengeMethod] Method used to derive the code challenge for PKCE. Must be S256 if &#x60;code_challenge&#x60; is present.
     * @returns {string} Returns the authorize URL.
    */ authorize(clientId, responseType, redirectUri, scopes, optionalArgs) {
        const url = this.tokenApi.authorize(clientId, responseType, redirectUri, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.nonce, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.state, scopes, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.responseMode, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.prompt, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.authoptions, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.codeChallenge, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.codeChallengeMethod);
        return url;
    }
    /**
      * Returns a three Legged access token.
      * For Private clients specify the client secret along with the Client ID.
      * For Public clients only Client ID needs to be specified.
      * @summary Get Three legged token.
      * @param {string} clientId The Client Id of the application making the request.
      * @param {string} code The authorization code that was passed to your application when the user granted access permission to your application. It was passed as the &#x60;&#x60;code&#x60;&#x60; query parameter to the redirect URI when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.
      * @param {string} redirectUri The URI that APS redirects users to after they grant or deny access permission to the application. Must match the Callback URL for the application registered with APS.
      * @param {string} [clientSecret] The Client secret of the application making the request. Required only for private clients
      * @param {string} [codeVerifier] A random URL-encoded string between 43 characters and 128 characters. In a PKCE grant flow, the authentication server uses this string to verify the code challenge that was passed when you called &#x60;Authorize User &lt;/en/docs/oauth/v2/reference/http/authorize-GET/&gt;&#x60;_.
      * @param {*} [options] Override http request option.
      * @returns {ThreeleggedToken} Three legged access token
    */ getThreeLeggedToken(clientId, code, redirect_uri, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.clientSecret) {
                const clientIDSecret = Buffer.from(`${clientId}:${optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.clientSecret}`).toString(`base64`);
                const response = yield this.tokenApi.fetchToken(`Basic ${clientIDSecret}`, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$grantType$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GrantType"].AuthorizationCode, code, redirect_uri, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.code_verifier, undefined, undefined, undefined, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$threeLeggedToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ThreeLeggedToken"](response.content);
            } else {
                const response = yield this.tokenApi.fetchToken(undefined, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$grantType$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GrantType"].AuthorizationCode, code, redirect_uri, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.code_verifier, undefined, undefined, clientId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$threeLeggedToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ThreeLeggedToken"](response.content);
            }
        });
    }
    /**
      * Returns new access token using the refresh token provided in the request.
      * For Private clients specify the client secret along with the Client ID.
      * For Public clients only Client ID needs to be specified.
      * @summary Refresh token.
      * @param {string} refreshToken The refresh token used to acquire a new access token and a refresh token.
      * @param {string} clientId The Client Id of the application making the request.
      * @param {string} [clientSecret] The Client secret of the application making the request. This field is required for client secret
      * @param {Array<Scopes>} [scopes] Array of scopes. If specified, scopes have to be primarily same with or a subset of the scopes used to generate the refresh_token.
      * @param {*} [options] Override http request option.
      * @returns {ThreeLeggedToken} Refreshed three legged access token.
    */ refreshToken(refreshToken, clientId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.clientSecret) {
                const clientIDSecret = Buffer.from(`${clientId}:${optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.clientSecret}`).toString(`base64`);
                const response = yield this.tokenApi.fetchToken(`Basic ${clientIDSecret}`, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$grantType$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GrantType"].RefreshToken, undefined, undefined, undefined, refreshToken, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.scopes, undefined, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$threeLeggedToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ThreeLeggedToken"](response.content);
            } else {
                const response = yield this.tokenApi.fetchToken(undefined, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$grantType$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GrantType"].RefreshToken, undefined, undefined, undefined, refreshToken, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.scopes, clientId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
                return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$aps_sdk$2f$authentication$2f$dist$2f$esm$2f$model$2f$threeLeggedToken$2e$js__$5b$app$2d$route$5d$__$28$ecmascript$29$__["ThreeLeggedToken"](response.content);
            }
        });
    }
    /**
     * Returns a set of public keys in the JSON Web Key Set (JWKS) format.  Public keys returned by this operation can be used to validate the asymmetric JWT signature of an access token without making network calls. It can be used to validate both two-legged access tokens and three-legged access tokens.   See the Developer\'s Guide topic on `Asymmetric Signing </en/docs/oauth/v2/developers_guide/asymmetric-encryption/>`_ for more information.
     * @summary Get JWKS
     * @param {*} [options] Override http request option.
     * @returns {Jwks} JSON Web Key Set.
    */ getKeys(optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            const response = yield this.tokenApi.getKeys(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
        * Returns an OpenID Connect Discovery Specification compliant JSON document. It contains a list of the OpenID/OAuth endpoints, supported scopes, claims, public keys used to sign the tokens, and other details.
        * @summary Get OIDC Specification
        * @param {*} [options] Override http request option.
        * @returns {OidcSpec}
    */ getOidcSpec(optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            const response = yield this.tokenApi.getOidcSpec(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
            return response.content;
        });
    }
    /**
       * Returns metadata about the specified access token or reference token.  An application can only introspect its own tokens.  This operation has a rate limit of 500 calls per minute.
       * @summary Introspect Token
       * @param {string} token The token to be introspected.
       * @param {string} clientId The Client Id of the application making the request.
       * @param {string} [clientSecret] The Client secret of the application making the request. Only required for private clients.
       * @param {*} [options] Override http request option.
    * @returns {IntrospectToken}
    */ introspectToken(token, clientId, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.clientSecret) {
                // Private client
                const clientIDSecret = Buffer.from(`${clientId}:${optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.clientSecret}`).toString(`base64`);
                const response = yield this.tokenApi.introspectToken(`Basic ${clientIDSecret}`, token, undefined, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
                return response.content;
            } else {
                //public client
                const response = yield this.tokenApi.introspectToken(undefined, token, clientId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
                return response.content;
            }
        });
    }
    /**
     * Signs out the currently authenticated user from the APS authorization server. Thereafter, this operation redirects the user to the ``post_logout_redirect_uri``, or to the Autodesk Sign-in page when no ``post_logout_redirect_uri`` is provided.  This operation has a rate limit of 500 calls per minute.
     * @summary Logout
     * @param {string} [postLogoutRedirectUri] The URI to redirect your users to once logout is performed. If you do not specify this parameter your users are redirected to the Autodesk Sign-in page.   **Note:**  You must provide a redirect URI that is pre-registered with APS. This precaution is taken to prevent unauthorized applications from hijacking the logout process.
    */ logout(optionalArgs) {
        const logoutUrl = this.tokenApi.logout(optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.postLogoutRedirectUri);
        return logoutUrl;
    }
    /**
       * Revokes an active access token or refresh token.  An application can only revoke its own tokens.  This operation has a rate limit of 100 calls per minute.
       * @summary Revoke Token
       * @param {string} token The token to be revoked.
       * @param {string} clientId The Client Id of the application making the request.
       * @param {TokenTypeHint} tokenTypeHint Should be either \\\&#39;access_token\\\&#39;, \\\&#39;refresh_token\\\&#39; or \\\&#39;device_secret\\\&#39;.
       * @param {string} [clientSecret] The Client secret of the application making the request. Only required for private clients.
       * @param {*} [options] Override http request option.
    */ revoke(token, clientId, tokenTypeHint, optionalArgs) {
        return __awaiter(this, void 0, void 0, function*() {
            if (optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.clientSecret) {
                const clientIDSecret = Buffer.from(`${clientId}:${optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.clientSecret}`).toString(`base64`);
                const response = yield this.tokenApi.revoke(token, tokenTypeHint, `Basic ${clientIDSecret}`, undefined, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
                return response;
            } else {
                const response = yield this.tokenApi.revoke(token, tokenTypeHint, undefined, clientId, optionalArgs === null || optionalArgs === void 0 ? void 0 : optionalArgs.options);
                return response;
            }
        });
    }
}
}}),
"[project]/node_modules/@aps_sdk/authentication/dist/esm/model/scopes.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/* tslint:disable */ /* eslint-disable */ /**
 * Specifies the scope for the token you are requesting. See the `Developer\'s Guide documentation on scopes </en/docs/oauth/v2/developers_guide/scopes/>`_ for a complete list of possible values.
 * @export
 * @enum {string}
 */ __turbopack_context__.s({
    "Scopes": (()=>Scopes)
});
const Scopes = {
    UserRead: 'user:read',
    UserWrite: 'user:write',
    UserProfileRead: 'user-profile:read',
    ViewablesRead: 'viewables:read',
    DataRead: 'data:read',
    DataReadUrnOfResource: 'data:read:<URN_OF_RESOURCE>',
    DataWrite: 'data:write',
    DataCreate: 'data:create',
    DataSearch: 'data:search',
    BucketCreate: 'bucket:create',
    BucketRead: 'bucket:read',
    BucketUpdate: 'bucket:update',
    BucketDelete: 'bucket:delete',
    CodeAll: 'code:all',
    AccountRead: 'account:read',
    AccountWrite: 'account:write',
    OpenId: 'openid'
};
}}),

};

//# sourceMappingURL=node_modules_ee89f6fa._.js.map