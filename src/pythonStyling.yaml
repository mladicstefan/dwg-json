python_style_guide:
  purpose: >
    Provide concise, enforceable best practices for Python code structure, especially in projects involving
    data parsing, AI logic, and modular pipeline design. Focus on clarity, extensibility, and performance.
    Recommend when to use functions vs. classes, and how to design classes to promote clean architecture.

  language_version: "Python 3.11+"

  code_structure:
    - prefer_small_modules: true
    - each_script_should_have_one_responsibility: true
    - use_main_guard: true # if __name__ == "__main__"
    - avoid_monolithic_scripts: true
    - project_layout:
        - data/
        - models/
        - utils/
        - parsers/
        - pipeline/
        - app.py

  class_usage:
    principles:
      - use_class_when_data_and_behavior_belong_together
      - prefer_class_for_stateful_entities (e.g., Parser, EntityGraph)
      - avoid_classes_for_simple stateless utilities (use functions instead)
    examples:
      - use_dataclass_for_structured_data: true
      - use_inheritance_only_when_needed: true
      - prefer_composition_over_inheritance: true
    suggested_classes:
      - name: DWGEntity
        pattern: "@dataclass"
        fields: [id, type, coords, content]
        usage: "Represents a single parsed entity (text, line, or object) from a DWG file."

      - name: SpatialGraph
        usage: "Holds entity nodes and edges, provides proximity queries and connection inference."

      - name: BoMExtractor
        usage: "Handles semantic and NLP parsing logic for a single note."

      - name: MatchEngine
        usage: "Combines embedding matching with rule-based fallbacks and confidence scoring."

  typing_and_annotations:
    - always_use_type_hints: true
    - prefer_builtin_types (e.g., list[str] over List[str]): true
    - enforce_return_types: true
    - use_optional_for_nullable_fields: true

  functions:
    - keep_functions_pure_when_possible: true
    - avoid_nested_functions (except decorators or closures): true
    - prefer_clear_arguments_over_context_mutation: true
    - separate_data_transformation_from_io: true

  naming_conventions:
    - functions: snake_case
    - classes: PascalCase
    - constants: UPPER_SNAKE_CASE
    - files: snake_case.py
    - avoid_abbreviations_unless_common: true

  logging:
    - use_logging_module: true
    - avoid_print_statements_in_prod_code: true
    - logging_levels:
        - DEBUG: internal dev use
        - INFO: operational logs
        - WARNING: user-action required
        - ERROR: exception triggered
        - CRITICAL: program-stopping

  testing:
    - use_pytest: true
    - keep_test_files_in_tests/: true
    - mock_external_services: true
    - test_core_logic_without_IO: true
    - include_edge_cases_and_ambiguous_data: true

  dependencies:
    - use_requirements.txt or pyproject.toml
    - pin_versions_in_prod: true
    - keep_core_dependencies_light: true
    - use_virtualenv_or_poetry: true

  docstrings_and_comments:
    - use_google_style_docstrings: true
    - class_docstrings_explain_responsibility: true
    - function_docstrings_explain_inputs_outputs: true
    - inline_comments_only_when_necessary: true

tags:
  [
    python,
    code_quality,
    clean_architecture,
    ai_project,
    cad_parsing,
    dataclass,
    semantic_ai,
  ]
